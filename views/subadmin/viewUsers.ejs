<%- include ("superheader.ejs") %>
<%- include ("supersidebar.ejs") %>
  

<style>
   .card{
      border-top: 4px solid #39444e;
    border-bottom: 4px solid #39444e;
}


/* ------------- popup submit button start ----------- */
.button-container {
  display: flex !important;
  flex-direction: row !important;
  justify-content: space-between !important;
}

.button-container button {
  flex: 1 !important;
  margin: 0 10px !important; /* add some margin between buttons */
  width: 45% !important; /* set a fixed width for each button */
}



/* Style for the image modal */
.image-popup {
  display: none;
  position: fixed;
  z-index: 1000;
  padding-top: 60px;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.8);
}

/* Modal content (the images) */
.image-popup .modal-content {
  margin: auto;
  display: block;
  width: 80%;
  max-width: 700px;
}

/* The close button */
.image-popup .close {
  position: absolute;
  top: 15px;
  right: 35px;
  color: #fff;
  font-size: 40px;
  font-weight: bold;
  cursor: pointer;
}

/* Add some animation to the modal */
.image-popup .modal-content {
  animation-name: zoom;
  animation-duration: 0.6s;
}

@keyframes zoom {
  from {transform: scale(0)}
  to {transform: scale(1)}
}


</style>

      <!-- Sidebar chat end-->
      <div class="content-wrapper">
         <!-- Container-fluid starts -->
         <!-- Main content starts -->
         <div class="container-fluid">
             <div class="row ">
                <div class="col-lg-12">
                    <div class="bread-boxes">
                        <ol class="breadcrumb">
                            <li><a href="/superadmin"> Home </a></li>
                               <li><a href="#"> / User Managements </a></li>
                            <li class="active"> / View User Management </li>        
                          </ol>
                    </div>
                </div>
                <!--   <div class="col-lg-6">
               <div class="headings headings-boxess mt-4">
                  <div class="main-headers mt-0" style="margin-top: 0px !important;">
                    <h4> <i class="fa fa-arrow-circle-o-left yellow_color"></i>  User View User </h4>
                     </div>
                </div>
             </div> -->
                    
            </div>
            <!-- 1-3-block row start -->
            <div class="row">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
               <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                  <h6 class=" font-weight-bold "> <i class="fa fa-arrow-circle-o-left"></i>  View Users </h6>
                 </div>
                    <div class="heads-rights">
                    <a class="btn btn-success waves-effect waves-light" href="/superadmin/addUser"><i class="fa fa-user  mr-1"></i> Add User  </a>
                  </div>
                  </div>
                  <div class="user-form">




           <!-- alert msgs -->
           <% if ( output.includes('successfully') ) { %>
            <p class="success-text"><%= output %></p>
              <% } else { %>
                    <p class="error-text"><%= output %></p>
              <% } %>
          <!-- /alert msgs -->  




                    
                     <div class="table-reponsive box">
                        <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                          <div class="row">
                          <table id="example" class="table table-striped table-bordered dataTable no-footer" role="grid" aria-describedby="example_info">
                        <thead>
                             <tr role="row">
                                <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: auto">S.No</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 70px">Name</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Gross: activate to sort column ascending" style="width: 60px">Email</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 50px">Customer Image</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: auto">Status</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending" style="width: 190px">Action</th>
                            </tr>
                        </thead>
                           <div class="table-responsive">
                              </div>
                         

                              <tbody>
                                <% users.forEach((user, index) => { %>
                                <tr>
                                    <td><%= index + 1 %></td>
                                    <td><%= user.first_name %> <%= user.last_name %></td>
                                    <td> <%= user.email	 %> </td>
                                   
                             
                               
                                    <td>
                                        <% if (user.profile_image) { 
                                            let images = user.profile_image.split(','); // Split the comma-separated images
                                        %>
                                            <!-- Show only the first image in the table -->
                                            <a href="javascript:void(0);" onclick="openImageSlideshow('<%= images.join(',') %>')">
                                                <img class="img-circle" src="../images/profiles/<%= images[0] %>" alt="Image" style="width:50px; height:50px;">
                                            </a>
                                        <% } else { %>
                                            No image
                                        <% } %>
                                    </td>

                                                                   


                                    <td class="status-container" data-user-id="<%=  user.user_id %>" data-user-status="<%= user.status %>">
                                        <div >
                                    
                                          <% if (user.status == 'Approve') { %>
                                            <img src="../images/icons/active.png" class="status-image" style="width:30px;height:30px;">
                                        <% } else if (user.status == 'Pending') { %>
                                            <!-- Add an image for Pending status here -->
                                            <img src="../images/icons/pending.png" class="status-image" style="width:30px;height:30px;">
                                        <% } else { %>
                                            <img src="../images/icons/inactive.png" class="status-image" style="width:30px;height:30px;">
                                        <% } %>

                                          <div class="status-overlay"></div>
                                        </div>
                                                           
                                      
                                        <% if (user.status == 'Approve') { %>
                                          <p id="msg<%=  user.user_id %>" style="color: orange;"></p>
                                          <p class="kilstatus" style="color: green;"> Approved</p>
                                        <% } else if (user.status == 'Pending') { %>
                                          <p id="msg<%=  user.user_id %>" style="color: green !important;"></p>
                                          <p class="kilstatus" style="color: #a6ad96;"> Pending</p>
                                        <% } else { %>
                                          <p id="msg<%=  user.user_id %>" style="color: green !important;"></p>
                                          <p class="kilstatus" style="color: red;"> Disapproved</p>
                                        <% } %>                   
                                    
                
                                      </td> 
                                      
                                      

                                    <td>

                                      <!-- <a class="buttons" href="#popup1<%= user.user_id %>"><i class="fa fa-eye icon-1"></i></a>

                                      <a data-toggle="modal"  href="#edit_personal_details<%= user.user_id %>"><i class="fa fa-edit icon-2"></i></a> -->
    

                                     <a href="javascript:void(0)" onclick="updateUser('<%= user.user_id %>', '<%= JSON.stringify(user) %>')" title="Update">
                                         <i class="fa fa-edit icon-2"></i>
                                     </a>
                                     <a href="javascript:void(0)" onclick="deleteUser('<%= user.user_id  %>', '<%= user.first_name  %>')"  title="Delete" >
                                         <i class="fa fa-trash icon-5"></i>
                                     </a>



                                     <% if (user.status === 'Approve') { %>
                                      
                                        <a href="javascript:void(0)" onclick="changeUserStatus('<%= user.user_id  %>', 'Disapprove', '<%= user.first_name %>')"  title="Make Disapprove" >
                                         
                                            <i class="fa fa-times icon-4"></i>
                                        </a>
                                      <% } else { %>
                                      
                                        <a href="javascript:void(0)" onclick="changeUserStatus('<%= user.user_id  %>', 'Approve', '<%= user.first_name %>')" title="Make Approve" >
                                            <i class="fa fa-check-square-o icon-3"></i>
                                        </a>
                                      <% } %>

                                      <a href="javascript:void(0)" onclick="viewUserWallet('<%= user.user_id %>')" title="View Wallet" ><i class="fa fa-money icon-6"></i></a>

                                   
                                 </td>
                                 
                                </tr>
                                <% }) %>
                            </tbody>



                            </table>
                        </div>
                      </div>
                  </div>
                   </div>
                 </div> 
               </div>
            </div>
            <!-- 1-3-block row end -->

             <!-- row start  -->
             
                <!-- ROW END -->
         </div>
         <!-- Main content ends -->
         <!-- Container-fluid ends -->
      </div>
   </div>

<!--  -->
<!-- VIEW Details Modal POPUP CODE START -->

<% users.forEach((user, index) => { %>



<div id="popup1<%= user.user_id %>" class="popup">
  <div class="view-header">
      <a href="#" class="close">&times;</a>
  <h4>User's Details </h4>
  </div>
  <p class="view-lists">
      <table class="table">
     <tbody>
 
      <tr>
        <td>First Name</td>
        <td><%= user.first_name %></td>
      </tr>
      <tr>
        <td>Last Name</td>
        <td><%= user.last_name %></td>
      </tr>
      <tr>
        <td>Email Address</td>
        <td><%= user.email %></td>
      </tr>
      <tr>
        <td>Mobile No</td>
        <td><%= user.country_code %>-<%= user.contact %></td>
      </tr>
      <tr>
        <td>License Number</td>
        <td><%= user.license_number %></td>
      </tr>
      <tr>
        <td>License Expiry Date</td>
        <td><%= user.expiry_date %></td>
      </tr>

      <!-- Show the first document image with click functionality -->
      <tr>
        <td>Document Image</td>
        <td>
          <img src="../images/docUploads/<%= user.user_document_images.split(',')[0] %>" 
               style="width: 50px; cursor: pointer;" 
               onclick="openImageModal('<%= user.user_document_images %>', 'document')" 
               alt="Document Front Image">
        </td>
      </tr>

      <!-- Show the first license image with click functionality -->
      <tr>
        <td>License Image</td>
        <td>
          <img src="../images/docUploads/<%= user.license_images.split(',')[0] %>" 
               style="width: 50px; cursor: pointer;" 
               onclick="openImageModal('<%= user.license_images %>', 'license')" 
               alt="License Front Image">
        </td>
      </tr>
            
     </tbody>
      </table>
       <button type="submit" class="btn btn-primary pt-2 pb-2 btn-block">Close User Details</button>
  </p>
</div>
<a href="#" class="close-popup"></a>

<!-- VIEW BUTTON POPUP CSS SSTART  -->


 <% }) %>


   

   <!-- Image Modal for Slideshow -->
   <div id="imageModal" class="image-popup">
    <span class="close" onclick="closeImageModal()">&times;</span>
    <div class="modal-content" id="imageModalContent">
      <!-- Images will be dynamically injected here -->
    </div>
  </div>

 <%- include ("superfooter.ejs") %>
  

 

<script>

document.addEventListener("DOMContentLoaded", function() {
            document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
            document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            document.cookie = 'rental_type_id'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
       
    });


  //-------------- Comman Kilvish Function for input validation start ---------------------

     
   
  function validateRequiredFields(kil) {

const form = document.querySelector(`${kil}`); 
const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
let isValid = true;



// Remove previous error messages and borders
form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
inputs.forEach(input => {
    input.style.border = ''; // Reset borders
});

inputs.forEach(input => {
    if (!input.value.trim()) {  // If the required field is empty
        isValid = false;
        input.style.border = '1px solid red'; // Set border to red for empty required fields
        addErrorMessage(input.parentNode, "This Field is Required."); // Add error message
    }
});

return isValid;
}

// Add real-time validation for each required field
function addRealTimeValidation(kil) {
const form = document.querySelector(`${kil}`); 
const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');

inputs.forEach(input => {
 // Listen for 'input' and 'change' events on required fields
 input.addEventListener('input', function () {
     if (input.value.trim()) {
         // If the input is filled, remove red border and error message
         input.style.border = '';
         const errorMessage = input.parentNode.querySelector('.error-message');
         if (errorMessage) {
             errorMessage.remove();
         }
     }
 });
 input.addEventListener('change', function () {
     if (input.value.trim()) {
         // For select fields, check if an option is selected
         input.style.border = '';
         const errorMessage = input.parentNode.querySelector('.error-message');
         if (errorMessage) {
             errorMessage.remove();
         }
     }
 });
});
}




// Combined validation function
function validateForm(kil) {

if(!validateRequiredFields(kil)){
  event.preventDefault();
}
}

// Add real-time validation once the document is loaded
document.addEventListener('DOMContentLoaded', () => {
addRealTimeValidation('#kilfrom');  // Activate real-time validation
});




function validateKilvishInput(event) {
    const inputField = event.target;

    // General valid character sets
    // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;

    let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 

    // Define allowed image file types
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];

    // Use parentNode for regular inputs, container for checkboxes
    const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
    const inputParent = inputField.parentNode;

    // Remove previous error message and border
    let errorMessage = inputParent.querySelector('.error-message');
    if (errorMessage) errorMessage.remove();
    inputField.style.border = ''; // Reset border

    // Custom validations based on input name
    if (inputField.name === 'description') {
        validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;

        // Check length limit
        if (inputField.value.length > 400) {
            addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
            inputField.style.border = '1px solid red';
            inputField.value = inputField.value.substring(0, 400); // Truncate the input
            return;
        }
    } else if (inputField.name === 'contact' || inputField.name === 'contact') {
        // Only numbers allowed, between 7 and 10 digits
        validCharacters = /^\d{7,10}$/;
    }else if (inputField.name === 'age') {
        // Only numbers allowed, between 7 and 10 digits
        validCharacters = /^\d{2,2}$/;
          // Custom validation: Ensure age is 18 or above
              if (inputField.value && parseInt(inputField.value) < 18 && event.type === 'change') {
                  addErrorMessage(inputParent, 'Age must be 18 or above!');
                  inputField.style.border = '1px solid red';
                  inputField.value = ''; // Clear the input field if age is below 18
                  return;
              }else if(inputField.value && parseInt(inputField.value) < 18 ){
                addErrorMessage(inputParent, 'Age must be 18 or above!');
                  inputField.style.border = '1px solid red';                 

              }
            }else if (inputField.name === 'job_exp') {
               // Only numbers allowed, between 7 and 10 digits
               validCharacters = /^\d{1,2}$/;
            }else if(inputField.type ==='email'){
               validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
            }else if(inputField.type ==='password'){

                            const hasSequentialChars = (password) => {
                                 console.log("passworddddddd -", password)
                                 const length = password.length;
                                 
                                 // Check for ascending sequences (e.g., "123", "abc")
                                 for (let i = 0; i < length - 3; i++) {
                                    if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                          password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                          password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                          return true; // Ascending sequence found
                                    }
                                 }

                                 // Check for descending sequences (e.g., "321", "cba")
                                 for (let i = 0; i < length - 3; i++) {
                                    if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                          password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                          password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                          return true; // Descending sequence found
                                    }
                                 }
                                 
                                 return false; // No sequential characters
                              };

               

               validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;


                                          // Check if password meets the required pattern
                           if (!validCharacters.test(inputField.value)) {
                              addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                              inputField.style.border = '1px solid red';
                              if (event.type === 'change') {   inputField.value = '';  }
                              return; // Stop further validation
                           }

                           // Check for sequential characters
                           if (hasSequentialChars(inputField.value)) {
                              addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                              inputField.style.border = '1px solid red';
                                 if (event.type === 'change') {   inputField.value = '';  }
                              return; // Stop further validation
                           }


                           // Function to check for sequential characters in the password
                 
                                                   



            }
              

            



    // Handle file input validation
    if (inputField.type === 'file') {
        const file = inputField.files[0];
        if (file && !validImageTypes.includes(file.type)) {
            addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
            inputField.value = ''; // Clear the file input field
            inputField.style.border = '1px solid red';
            return;
        }
    } else {
        // For normal text/number input validation
        if (event.type === 'keyup') {
            if (!validCharacters.test(inputField.value)) {
                addErrorMessage(inputParent, 'Invalid character entered!');
                inputField.style.border = '1px solid red';
                
            }
        }

        if (event.type === 'change') {
            if (!validCharacters.test(inputField.value)) {
                // On invalid input during change event, clear the field and show an error
                inputField.value = ''; // Clear invalid input
                addErrorMessage(inputParent, 'Invalid character or format!');
                inputField.style.border = '1px solid red';
            } else {
                // Clear error when value is corrected
                inputField.style.border = '';
                if (errorMessage) errorMessage.remove();
            }
        }
    }
}

// Function to display error messages under the input field or container for checkboxes
function addErrorMessage(parent, message) {
    if (!parent.querySelector('.error-message')) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.style.color = 'red';
        errorMessage.style.fontSize = '12px';
        errorMessage.innerText = message;
        parent.appendChild(errorMessage);
    }
}





//-------------- Comman Kilvish Function for input validation End ---------------------



</script>

<script>


document.addEventListener("DOMContentLoaded", function() {
            document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
            document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            document.cookie = 'rental_user'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
            document.cookie = 'rental_user'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            
            document.cookie = 'rental_user_id'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
       
    });

//================== start Update =========================

function updateUser(user_id, user) {
    user = JSON.parse(user);

    // Create the form structure for editing inside SweetAlert
    const htmlForm = `
        <div style="position: relative;">
            <!-- Close (X) Button -->
            <button type="button" class="swal2-close" onclick="Swal.close()" aria-label="Close" style="position: absolute; top: -10px; right: -10px; background: transparent; border: none; font-size: 24px; cursor: pointer;">&times;</button>
        </div>
        <form id="kileditfrom" action="/superadmin/updateUser" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="user_id" value="${user_id}">   
            <div class="form-group" style="text-align: left;">
                 <label>First Name</label>
                 <input onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" type="text" name="first_name" class="form-control" value="${user.first_name}"  placeholder="Enter First Name" required>
            </div>

            <div class="form-group" style="text-align: left;">
                <label>Last Name</label>
                 <input onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" type="text" name="last_name"  class="form-control" value="${user.last_name}"  placeholder="Enter Last Name" required>
            </div>

            <div class="form-group" style="text-align: left;">
                <label>Email ID</label>
                <input type="email" name="email" class="form-control" id="emailInput" placeholder="Enter email" value="${user.email}" readonly required>
                <div id="kilErrorupdate" style="color: red;"></div>
            </div>

            <div class="form-group" style="text-align: left;">
                <label for="exampleInputPassword" class="form-control-label">Mobile Number</label>
                <input type="tel" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" name="contact" id="kilvishcontact" value="${user.contact}" class="form-control cc text-left prof-boxes" placeholder="Contact Number" required>
                <input type="hidden" id="fullkilvishcontact" name="fullkilvishcontact">
                <input type="hidden" id="country_code" name="country_code">
                <div id="errorText1" style="color: red;"></div>
            </div>

            <div class="form-group" style="text-align: left;">
                <label>Customer Image</label><br>
                <img src="../images/profiles/${user.profile_image}" width="100" height="100"/> <br>
                <input type="file" class="form-control" name="profile_image">
            </div>

            <div style="display: flex; justify-content: space-between;">
                <button type="button" class="btn btn-secondary" onclick="Swal.close()">Cancel</button>
                <button type="submit" onclick="validateForm('#kileditfrom')" class="btn btn-success">Update</button>
            </div>
        </form>
    `;

    // Open SweetAlert with the form
    Swal.fire({
        title: `<span style="font-size: 16px;">Update User : ${user.first_name}</span>`,
        html: htmlForm,
        showConfirmButton: false, // Disable default SweetAlert buttons, use form's submit buttons instead
        focusCancel: true,
        customClass: {
            popup: 'my-popup-class' // Add a custom class for the popup
        },
        allowOutsideClick: false, // Disable closing by clicking outside
        didOpen: () => {
            // Now initialize intlTelInput when the modal has fully opened
            var input = document.querySelector("#kilvishcontact");
            var savedCountryCode = user.country_code || '';  // Use saved country code from user data
            var savedPhoneNumber = user.contact || '';  // Use saved phone number from user data

            var iti = window.intlTelInput(input, {
                preferredCountries: ["hk", "cn"], // Customize based on your needs
                separateDialCode: true,
                initialCountry: "auto",
                geoIpLookup: function(success, failure) {
                    fetch('https://ipinfo.io/json', {cache: 'reload'}).then(resp => resp.json()).then(resp => {
                        var countryCode = (resp && resp.country) ? resp.country : "hk";
                        success(countryCode);
                    }).catch(() => success("hk"));
                },
                utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
            });

            if (savedCountryCode && savedPhoneNumber) {
                // Combine country code and phone number if available
                iti.setNumber(savedCountryCode + savedPhoneNumber);
            }

            // Update hidden input field with full phone number
            input.addEventListener("input", function() {
                var fullPhoneNumber = iti.getNumber();
                var countryCode = '+' + iti.getSelectedCountryData().dialCode;
                document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
                document.querySelector("#country_code").value = countryCode;
            });

            input.addEventListener("countrychange", function() {
                var fullPhoneNumber = iti.getNumber();
                var countryCode = '+' + iti.getSelectedCountryData().dialCode;
                document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
                document.querySelector("#country_code").value = countryCode;
            });

            // Initialize hidden field with the current value on page load
            var fullPhoneNumber = iti.getNumber();
            var countryCode = '+' + iti.getSelectedCountryData().dialCode;
            document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
            document.querySelector("#country_code").value = countryCode;
        }
    });

    // Add real-time validation for inputs (reuse the existing validation)
    addRealTimeValidation('#kileditfrom'); // Ensure real-time validation works with the new modal form
}



// document.addEventListener("DOMContentLoaded", function() {
//         var input = document.querySelector("#kilvishcontact");
//         var savedCountryCode = document.getElementById("country_code").value;
//         var savedPhoneNumber = document.getElementById("kilvishcontact").value;
        
//         var iti = window.intlTelInput(input, {
//           preferredCountries: ["hk", "cn"], // Customize based on your needs
//           separateDialCode: true,
//           initialCountry: "hk",
//           utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
//         });


//               // Set only country based on the saved country code from database
//       // if (savedCountryCode) {
//       //   iti.setNumber(savedCountryCode);  // This sets the phone number with the country code
//       // }


//   var fullPhoneNumber = savedCountryCode + savedPhoneNumber;

//   if (savedCountryCode && savedPhoneNumber) {
//     iti.setNumber(fullPhoneNumber);  // This sets both the country code and the phone number
//   }


//     // Update hidden input field with full phone number
//     input.addEventListener("input", function() {
//       var fullPhoneNumber = iti.getNumber();
//       var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
    
//       document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
//       document.querySelector("#country_code").value = countryCode;

//     });



//     input.addEventListener("countrychange", function() {
//     var fullPhoneNumber = iti.getNumber();  // Get the full number
//     var countryCode = '+' + iti.getSelectedCountryData().dialCode;  // Get the new country code
//     // Update hidden fields
//     document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
//     document.querySelector("#country_code").value = countryCode;
//   });



//     // Initialize hidden field with the current value on page load
//     var fullPhoneNumber = iti.getNumber();
//     var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
//     document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
//     document.querySelector("#country_code").value = countryCode;

//   });





// Function to open the SweetAlert slideshow
function openImageSlideshow(imagesString) {
    const images = imagesString.split(','); // Split the images by comma
    let currentIndex = 0;

    // Function to update the content inside SweetAlert
    function updateImage(index) {
        const totalImages = images.length;
        const imgSrc = `/images/profiles/${images[index].trim()}`;
        const imageTag = `<img src="${imgSrc}" style="width:100%; height:auto;" />`;
        const navigationText = `${index + 1} of ${totalImages} Images`;

        // Display SweetAlert
        Swal.fire({
            title: navigationText, // Display image count
            html: imageTag,
            showCancelButton: true,
            showConfirmButton: true,
            confirmButtonText: 'Next',
            cancelButtonText: 'Previous',
            allowOutsideClick: false,
            showCloseButton: true,
            preConfirm: () => {
                if (currentIndex < totalImages - 1) {
                    currentIndex++;
                    updateImage(currentIndex); // Go to next image
                }
            },
            preCancel: () => {
                if (currentIndex > 0) {
                    currentIndex--;
                    updateImage(currentIndex); // Go to previous image
                }
            }
        });
    }

    // Start slideshow with the first image
    updateImage(currentIndex);
}



//============ delete User ================

function deleteUser(user_id,username) {

// Use SweetAlert2 for a stylish confirmation
Swal.fire({
          title: 'Are you sure?',
          html: `<span style="color: red;">Data related to  User : <span style="font-weight: bold; color: red; background-color: yellow;">${username}</span> Will be Permanently Deleted from all Records.</span>`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, delete User'
      }).then((result) => {
          if (result.isConfirmed) {
              // Make an AJAX request to delete the user
                                  $.ajax({
                          url: '/superadmin/deleteUser',
                          type: 'POST',
                          data: { id: user_id },
                          success: function(response) {
                            if (response.success == true) {
                              document.cookie = `rental_msg=${response.msg}`;
                              window.location.href = '/superadmin/viewUsers'
                            }else{
                             // alert(response.msg)
                               document.cookie = `rental_msg=${response.msg}`;
                            window.location.href = '/superadmin/viewUsers'
                            }
                          },
                          error: function(error) {
                              console.error('Error:', error);
                          }
                      });
          }
      });



}



//=================== Change User Status ====================== 


function changeUserStatus(user_id, newStatus,username ) {

  event.preventDefault(); 
  var action;
if(newStatus== 'Disapprove'){
  action = 'Disapproved'
}else{
  action = 'approved '
}
 

  const userStatusElement = document.getElementById(`userStatus${user_id}`);
  const pmsgElement  = document.getElementById(`msg${user_id}`);

    $.ajax({
        url: '/superadmin/changeUserStatus',
        type: 'POST',
        data: { id: user_id, status: newStatus },
        beforeSend: function() {
            // Hide the kilstatus paragraph before the request
            $('.kilstatus').hide();
        },
        success: function(response) {  
           console.log(response)       
           
                    if (response.success == true) {
               
                                                      $('[data-user-id="' + user_id + '"]').attr('data-user-status', newStatus);

                                // Update image source and tooltip based on new status
                                var imgSrc = (newStatus === 'Approve') ? '../images/icons/active.png' : '../images/icons/inactive.png';
                                $('[data-user-id="' + user_id + '"] .status-image').attr('src', imgSrc);
                                $('[data-user-id="' + user_id + '"] .status-tooltip').attr('title', (newStatus === 'Approve') ? 'deactive' : 'active');

                                // Add fade in overlay and change background color based on new status
                                var bgColor = (newStatus === 'Approve') ? 'rgba(163,209,121,0.5)' : 'rgba(227 99 99 / 50%)';

                                var textColor = (newStatus === 'Approve') ? '#3c763d' : '#ffffff'; // White font for non-Approve status
                                // var textColor = (newStatus === 'Approve') ? 'rgba(163,209,121,0.5)' : 'rgba(227 99 99 / 50%)';
                                // $('[data-user-id="' + user_id + '"] .status-overlay').css('background-color', bgColor).fadeIn();



                                $('[data-user-id="' + user_id + '"] .status-overlay').css({
                                    'background-color': bgColor,
                                    'color': textColor + ' !important', // Force the font color change
                                  
                                }).fadeIn();


                                pmsgElement.innerHTML = response.msg;
                                var msg = 'User ('+username+') '+action+' successfully'
                                document.cookie = `rental_msg=${msg}`;

                                // Fade out the overlay after a delay
                                setTimeout(function() {
                                 
                                    $('[data-user-id="' + user_id + '"] .status-overlay').fadeOut();
                                    window.location.href = '/superadmin/viewUsers'
                                }, 1500);

                                // $('.kilstatus').show();


              } else {
                  console.error('Error:', response.msg);
                  $("#errorMessage").removeClass("d-none");
                  $("#successMessage").addClass("d-none");
              }


        },
        error: function(error) { alert("ajax error")
          console.error('Error:', error);
          $("#errorMessage").text('Ajax Error');
    $("#errorMessage").removeClass("d-none");
    $("#successMessage").addClass("d-none");
        }
    });
}






function viewUserWallet(user_id) {

                  document.cookie = `rental_user_id=${user_id}`;

                  const userTimezone = moment.tz.guess();
                  document.cookie = `rental_time_zone=${userTimezone}`;
               window.location.href = '/superadmin/adduserAmount';
    }


</script>







