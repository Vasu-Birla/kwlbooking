

<%- include ("superheader.ejs") %>
<%- include ("supersidebar.ejs") %>

<style>

.conversation-container {
    max-height: 400px; /* Adjust as needed */
    overflow-y: auto; /* Enable vertical scrolling */
}

.customer-message {
    background-color: #10182a;
    color: white;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
    max-width: 100%;
    margin-right: 200px;
    margin-left: 10px;
}

.support-executive-message {
    background-color: #10182a;
    color: white;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
    max-width: 100%;
    align-self: flex-end;
    margin-left: 200px;
    margin-right: 10px;
   
}


.message-role1 {
    font-size: 14px;
    color: #888;
    margin-top: 5px;
}

.message-role {
    font-size: 11px;
    border-radius: 7px;
    text-transform: capitalize;
    color: #fff;
    padding: 0px 3px;
    border: 2px solid #4b4b4b;
    margin-top: 5px;
    background: #1c4526;
}

.msgtext {
  margin-top: 10px;
  color: white;
  font-size: 14px !important;
}

span.message-time {
    font-size: 11px;
    color: coral;
}

.closed-message {
    color: red;
    font-size: 16px;
    font-weight: bold;
    text-align: center;
    margin-top: 10px;
}

.badge.badge-info {
    background-color: #3abaf4;
    font-size: small;
}

.badge.badge-success {
    background-color: #54ca68;
    font-size: small;
}

.badge-warning {
    color: #212529;
    background-color: #be9109;
    font-size: small;
}


</style>




<!-- Modal -->
<div class="modal fade" id="emailModal1" tabindex="-1" role="dialog" aria-labelledby="emailModalLabel" aria-hidden="true">
   <div class="modal-dialog" role="document">
     <div class="modal-content">
       <div class="modal-header">
         <h5 class="modal-title" id="emailModalLabel">Ticket Thread</h5>
  
           <span aria-hidden="true">&times;</span>
         </button>
       </div>
 
       <div class="closed-message">
       
       </div>
       
 
       <div class="modal-body">
 
        
 
         <form action="/admin/sendemail" method="post"> <!-- Adjust the form action URL as needed -->
           <div class="form-group">
             <label for="recipientEmail">Recipient Email:</label>
             <input type="email" class="form-control" id="recipientEmail" name="recipientEmail" value="" readonly>
           </div>
 
           <input type="hidden" class="form-control" id="ticket_number" name="ticket_number" value="" readonly>
           
           <div class="form-group">
             <label for="emailSubject">Subject:</label>
             <input type="text" class="form-control" id="emailSubject" name="emailSubject" required readonly>
           </div>
           <div class="form-group">
             <label for="emailMessage">Message:</label>
             <div id="errmsg"></div>
             <textarea class="form-control" id="emailMessage" name="emailMessage" rows="4" onkeyup="validateInput(event)" onchange="validateInput(event)" required></textarea>
           </div>
           <button type="submit" class="btn btn-success">Reply</button>
           <button type="button" class="btn btn-danger" data-dismiss="modal" onclick="closeEmailModal()">Close</button>
         </form>
       </div>
       <div class="conversation-container">
         <!-- Conversation messages will be displayed here -->
     </div>
 
     </div>
   </div>
 </div>
<!-- ----------------------  End Model --------------------    -->



      <!-- Sidebar chat end-->
      <div class="content-wrapper">
         <!-- Container-fluid starts -->
         <!-- Main content starts -->
         <div class="container-fluid">
             <div class="row ">
                <div class="col-lg-12">
                    <div class="bread-boxes">
                        <ol class="breadcrumb">
                            <li><a href="/superadmin"> Home </a></li>
                               <li class="active"><a href="#"> / Support Contact </a></li>
                            <!-- <li class="active"> / Add Video </li>         -->
                          </ol>
                    </div>
                </div>
                 <!--  <div class="col-lg-6">
               <div class="headings headings-boxess mt-4">
                  <div class="main-headers mt-0" style="margin-top: 0px !important;">
                    <h4> <i class="fa fa-arrow-circle-o-left yellow_color"></i>  User Withdrawl Report </h4>
                     </div>
                </div>
             </div> -->       
            </div>

            <!-- 1-3-block row start -->
            <div class="row">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
               <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left"></i> View Support Contact</h6>
                 </div>
                    <div class="heads-rights">
                   <a class="btn btn-success waves-effect waves-light " href="Support_add_contact.html"><i class="fa fa-user  mr-1"></i> Add Contact </a> 
                  </div>
                  </div>
                          <!-- alert msgs -->
                          <% if ( output.includes('successfully') || output.startsWith('Ticket Response')) { %>
                           <p class="success-text"><%= output %></p>
                     <% } else { %>
                           <p class="error-text"><%= output %></p>
                     <% } %>
               <!-- /alert msgs -->
                  <div class="user-form">
                     <div class="table-reponsive box">
                        <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                          <div class="row">
                          <table id="example" class="table table-striped table-bordered dataTable no-footer" role="grid" aria-describedby="example_info">
                        <thead>
                             <tr role="row">
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 30.0781px;">Id</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 80.0781px;">Ticket Num  </th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 80.0781px;">Customer </th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 80.0781px;">Subject  </th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Dc Id: activate to sort column ascending" style="width: 167.953px;"> Message </th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Dc Id: activate to sort column ascending" style="width: 167.953px;"> Ticket Thread </th>                    
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Gross: activate to sort column ascending" style="width: 100.922px;">status</th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending" style="width: 110.156px;">Action </th>


                            </tr>
                        </thead>
                           <div class="table-responsive">
                              </div>
                          

                              <tbody>

                                 <% for(var i = 0; i < queries.length; i++) { %>
                               <tr>
                                 <td><%- i+1 %></td>   
                                 
                                 <td>  <%- queries[i].complain_number %> </td>
         
                                 <td>  <%- queries[i].customer_name %> </td>
         
         
                                 <td>  <%- queries[i].subject %> </td>
         
                                 <td>  <%- queries[i].message %> </td>
         
                                 
                                 <!-- <td> <button style=" background-color: rgb(255, 255, 255); color: rgb(12, 17, 59); font-weight: bold; " aria-pressed="true" data-toggle="modal" data-target="#emailModal" data-status="<%- queries[i].status %>"  data-subject="<%- queries[i].subject %>"  data-thread="<%= JSON.stringify(queries[i].ticket_thread) %>"  data-customer_name="<%- queries[i].customer_name %>" data-ticket="<%- queries[i].complain_number %>" data-email="<%- queries[i].email %>"> Open Thread </button> </td> -->

                                 <td>
                                    <button style="background-color: rgb(255, 255, 255); color: rgb(12, 17, 59); font-weight: bold;" 
                                        aria-pressed="true"
                                        data-toggle="modal" 
                                        data-target="#emailModal"
                                        data-status="<%- queries[i].status %>"  
                                        data-subject="<%- queries[i].subject %>"  
                                        data-thread="<%= JSON.stringify(queries[i].ticket_thread) %>"  
                                        data-customer_name="<%- queries[i].customer_name %>" 
                                        data-ticket="<%- queries[i].complain_number %>" 
                                        data-email="<%- queries[i].email %>"> 
                                        Open Thread
                                    </button> 
                                </td>
                                
         
                           
         
                                 <td>                      
                                   
                                  
                               <% if(queries[i].status == 'opened') { %>
                                   <div class="badge badge-warning badge-lg"><%- queries[i].status %></div>
                                   <% } else { %>                     
                                     <div class="badge badge-success badge-lg"><%- queries[i].status %> </div>
                                
                                <% } %>  
                                   
                                   
                                 </td>
                                 <td>
                                   
         
                                <% if(queries[i].status == 'opened') { %>
                                   <button  onclick="updateStatus('<%= queries[i].id %>','<%= queries[i].status %>')" class="badge badge-info badge-lg"> Close Ticket  </button>
                                   <% } else { %>                     
                                     <div class="badge badge-success badge-lg"><%- queries[i].status %> By  <%- queries[i].closed_by %>  </div>
                                
                                <% } %> 
                          
                                 
                                 </td>
                             
         
                                 
                               </tr>
                               <% } %>
         
                               </tbody>
                            </table>
                        </div>
                      </div>
                  </div>
                   </div>
                 </div> 
               </div>
            </div>
            <!-- 1-3-block row end -->


            
         </div>
         <!-- Main content ends -->
         <!-- Container-fluid ends -->
      </div>
   </div>


   
   <%- include ("superfooter.ejs") %>




   

<script>
   
   
   function updateStatus(id,status)
   { 
   
    
      $.ajax({
   
                   url: "/superadmin/queries",
                   type: "POST",
                   data:{ id : id , status:status},
                   dataType: 'json',
                       success: function(result) { 
                         window.location.href = '/superadmin/queries'; 
                   }
                   }
               )
   }

   $(document).on('click', 'button[data-target="#emailModal"]', function () {
    var button = $(this); // Button that triggered the modal

    var recipientEmail = button.data('email');
    var ticket_number = button.data('ticket');
    var ticket_thread = button.data('thread');
    var customer_name = button.data('customer_name');
    var subject = button.data('subject');
    var status = button.data('status');
    var uniqueSubject = 'Ticket_' + ticket_number + '_' + subject;

    if (status == 'opened') {
        // Create conversation thread content
        var conversationHtml = '';
        ticket_thread.forEach(function (message) {
            conversationHtml += '<div class="message">';
            if (message.role === 'customer') {
                conversationHtml += '<div class="customer-message" style="text-align:left">';
                conversationHtml += '<span class="message-role">' + customer_name + ':</span>';
            } else {
                conversationHtml += '<div class="support-executive-message" style="text-align:right">';
                conversationHtml += '<span class="message-role">Support Executive:</span>';
            }



   var userTimezone = moment.tz.guess(); // Get the user's timezone
    var messageDateTime = moment.tz(message.timestamp, userTimezone); // Convert the timestamp to the user's timezone

    // Format the converted time and date
    var formattedTime = messageDateTime.format('YYYY-MM-DD hh:mm A');

            conversationHtml += '<p class="msgtext">' + message.message + '</p>';
            // conversationHtml += '<span class="message-time">' + message.date +'  '+ message.time + '</span>';
            conversationHtml += '<span class="message-time">' + formattedTime + '</span>';
            conversationHtml += '</div></div>';
        });

        // Show SweetAlert with conversation and reply form
        Swal.fire({
            title: 'Ticket Thread',
            html: `
                <div style="text-align:left;max-height:300px;overflow-y:auto;">
                    ${conversationHtml}
                </div>
                <form id="replyForm" action="/superadmin/sendemail" method="post">
                    <input type="hidden" id="ticket_number" name="ticket_number" value="${ticket_number}">
                    <div class="form-group" style="text-align: left;>
                        <label for="recipientEmail">Recipient Email:</label>
                        <input type="email" class="form-control" id="recipientEmail" name="recipientEmail" value="${recipientEmail}" readonly>
                    </div>
                    <div class="form-group" style="text-align: left;>
                        <label for="emailSubject">Subject:</label>
                        <input type="text" class="form-control" id="emailSubject" name="emailSubject" value="${uniqueSubject}" readonly>
                    </div>
                    <div class="form-group" style="text-align: left;>
                        <label for="emailMessage">Message:</label>
                        <textarea class="form-control" id="emailMessage" name="emailMessage" rows="4" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Reply</button>
                    <button type="button" class="btn btn-danger" onclick="Swal.close()">Close</button>
                </form>
            `,
            showConfirmButton: false // Hide default confirm button, because we have form submission buttons
        });

    } else {
        // Show a message if the ticket is closed
        Swal.fire({
            icon: 'warning',
            title: 'Ticket Closed',
            text: 'This ticket is closed and cannot be replied to.'
        });
    }

    // Function to format timestamp
    function formatTime(timestamp) {
        var time = new Date(timestamp);
        var hours = time.getHours();
        var minutes = time.getMinutes();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // Handle midnight (0 hours)
        minutes = minutes < 10 ? '0' + minutes : minutes; // Add leading zero to minutes if needed
        var formattedTime = hours + ':' + minutes + ' ' + ampm;
        return formattedTime;
    }
});




   $(document).on('click', 'button[data-target="#emailModal1"]', function () {
    var button = $(this); // Button that triggered the modal

    var recipientEmail = button.data('email');
    var ticket_number = button.data('ticket');
    var ticket_thread = button.data('thread');
    var customer_name = button.data('customer_name');
    var subject = button.data('subject');
    var status = button.data('status');
    var uniqueSubject = 'Ticket_' + ticket_number + '_' + subject;

    if (status == 'opened') {
        // Create conversation thread content
        var conversationHtml = '';
        ticket_thread.forEach(function (message) {
            conversationHtml += '<div class="message">';
            if (message.role === 'customer') {
                conversationHtml += '<div class="customer-message" style="text-align:left">';
                conversationHtml += '<span class="message-role">' + customer_name + ':</span>';
            } else {
                conversationHtml += '<div class="support-executive-message" style="text-align:right">';
                conversationHtml += '<span class="message-role">Support Executive:</span>';
            }
            conversationHtml += '<p class="msgtext">' + message.message + '</p>';
            conversationHtml += '<span class="message-time">' + formatTime(message.timestamp) + '</span>';
            conversationHtml += '</div></div>';
        });

        // Show SweetAlert with conversation and reply form
        Swal.fire({
            title: 'Ticket Thread',
            html: `
                <div style="text-align:left;max-height:300px;overflow-y:auto;">
                    ${conversationHtml}
                </div>
                <form id="replyForm">
                    <input type="hidden" id="ticket_number" name="ticket_number" value="${ticket_number}">
                    <div class="form-group">
                        <label for="emailMessage">Message:</label>
                        <textarea class="form-control" id="emailMessage" name="emailMessage" rows="4" required></textarea>
                    </div>
                </form>
            `,
            showCancelButton: true,
            confirmButtonText: 'Reply',
            preConfirm: () => {
                const message = Swal.getPopup().querySelector('#emailMessage').value; // Ensure correct selector within the popup
                if (!message) {
                    Swal.showValidationMessage('Message cannot be empty');
                }
                return { message }; // Return message to use it later
            }
        }).then((result) => {
            if (result.isConfirmed) {
                // Handle form submission via AJAX or form post
                var formData = {
                    recipientEmail: recipientEmail,
                    ticket_number: ticket_number,
                    emailSubject: uniqueSubject,
                    emailMessage: result.value.message // Ensure we're passing the correct message
                };
                $.post('/superadmin/sendemail', formData, function (response) {
                    Swal.fire('Success', 'Reply sent successfully', 'success');
                }).fail(function () {
                    Swal.fire('Error', 'Failed to send reply', 'error');
                });
            }
        });
    } else {
        // Show a message if the ticket is closed
        Swal.fire({
            icon: 'warning',
            title: 'Ticket Closed',
            text: 'This ticket is closed and cannot be replied to.'
        });
    }

    // Function to format timestamp
    function formatTime(timestamp) {
        var time = new Date(timestamp);
        var hours = time.getHours();
        var minutes = time.getMinutes();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // Handle midnight (0 hours)
        minutes = minutes < 10 ? '0' + minutes : minutes; // Add leading zero to minutes if needed
        var formattedTime = hours + ':' + minutes + ' ' + ampm;
        return formattedTime;
    }
});


   $('#emailModal1').on('show.bs.modal', function (event) {
       var button = $(event.relatedTarget); // Button that triggered the modal

    
 
       var recipientEmail = button.data('email'); 
       var ticket_number = button.data('ticket'); 
       var ticket_thread = button.data('thread')
       var customer_name = button.data('customer_name')
       var subject = button.data('subject')
       var status = button.data('status')
       
 
       var uniqueSubject = 'Ticket_'+ticket_number+'_'+subject
 
         console.log("Ticket Thread --> ",ticket_thread)
       var modal = $(this);
 
       if(status=='opened'){
         
           // Populate the recipient email field
       modal.find('#recipientEmail').val(recipientEmail);
       modal.find('#ticket_number').val(ticket_number);
       modal.find('#emailSubject').val(uniqueSubject);
 
        // Show the modal body
        modal.find('.modal-body').show();
         modal.find('.closed-message').hide();
 
 
       }else{
 
  
           modal.find('.modal-body').hide();
         modal.find('.closed-message').show().text('This Ticket is closed');
 
       }
   
     
 
 
       
       var conversationContainer = modal.find('.conversation-container');
         conversationContainer.empty();
 
       //  ticket_thread.reverse();
 
 // Display conversation messages
 ticket_thread.forEach(function(message) {
 
   
     var messageHtml = '<div class="message"  >';
     if (message.role === 'customer') {
         messageHtml += '<div class="customer-message" style="text-align:left" >';
           //messageHtml += '<span class="message-role"> Customer </span>'; 
           messageHtml += '<span class="message-role">' + customer_name +' :' + '</span>'; 
     } else {
         messageHtml += '<div class="support-executive-message" style="text-align:right">';
           // messageHtml += '<span class="message-role">' + message.role+' :' + '</span>'; 
           messageHtml += '<span class="message-role"> Support Executive </span>'; 
     }
 
     messageHtml += '<p class="msgtext">' + message.message + '</p>';
     messageHtml += '<span class="message-role">' + formatTime(message.timestamp) + '</span>';
     messageHtml += '</div>'; // Close message container   
     messageHtml += '</div>'; // Close message
     conversationContainer.append(messageHtml);
 });
 
 // Function to format timestamp
 function formatTime(timestamp) {
     var time = new Date(timestamp);
     var hours = time.getHours();
     var minutes = time.getMinutes();
     var ampm = hours >= 12 ? 'PM' : 'AM';
     hours = hours % 12;
     hours = hours ? hours : 12; // Handle midnight (0 hours)
     minutes = minutes < 10 ? '0' + minutes : minutes; // Add leading zero to minutes if needed
     var formattedTime = hours + ':' + minutes + ' ' + ampm;
     return formattedTime;
 }
 
 
     });
   
 
 
    
   function closeEmailModal() {
     window.location.href = '/superadmin/queries'; 
   }
 
 
   function validateInput(event) {
   // const validCharacters = /^[a-zA-Z0-9@._-]*$/; //  allowed char witout Space 
 
   // allowed char with space 
    const validCharacters = /^[a-zA-Z0-9@._\s-]*$/;  
 
    const inputField = event.target;
    const errorMessageDiv = document.getElementById('errmsg');
  
  
    if (inputField.type === 'file') {
      const file = inputField.files[0]; // Get the selected file
      //const validImageTypes = ['image/jpeg', 'image/png']; // Define allowed image file types
      const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml']; // Define allowed image file types
  
      if (!validImageTypes.includes(file.type)) {
        // Show error message and clear the input field
        errorMessageDiv.textContent = 'Please select a valid image file (JPEG or PNG)!';
        errorMessageDiv.style.color = 'red';
        inputField.value = ''; // Clear the input field
      } else {
        // Clear error message
        errorMessageDiv.textContent = '';
      }
    }else{
  
               if (event.type === 'keyup') {
                  if (!validCharacters.test(inputField.value)) {
                  // Show error message and highlight the field
                  errorMessageDiv.textContent = 'Invalid character entered!';
                  errorMessageDiv.style.color = 'red';
                  inputField.style.borderColor = 'red';
                  } else {
                  // Clear error message
                  errorMessageDiv.textContent = '';
                  inputField.style.borderColor = '';
                  }
               } else if (event.type === 'change') {
                  if (errorMessageDiv.textContent !== '') {
                  // Clear the input field and error message
                  inputField.value = '';
                  errorMessageDiv.textContent = '';
                  inputField.style.borderColor = '';
                  }
               }
  
   }
  
  
  }
  
 
   </script>