

<%- include ("superheader.ejs") %>
<%- include ("supersidebar.ejs") %>

<style>
   .card{
      border-top: 4px solid #39444e;
    border-bottom: 4px solid #39444e;
}
.icon-set {
    position: absolute;
    top: 25%;
    }
</style>



      <div class="content-wrapper">
         <!-- Container-fluid starts -->
         <!-- Main content starts -->
         <div class="container-fluid">
             <div class="row ">
                <div class="col-lg-12">
                    <div class="bread-boxes">
                        <ol class="breadcrumb">
                            <li><a href="#"> Home </a></li>
                               <li class="active"><a href="#"> / User Frequently Asked Question </a></li>
                            <!-- <li class="active"> / Add Video </li>         -->
                          </ol>
                    </div>
                </div>
                 <!--  <div class="col-lg-6">
               <div class="headings headings-boxess mt-4">
                  <div class="main-headers mt-0" style="margin-top: 0px !important;">
                    <h4> <i class="fa fa-arrow-circle-o-left yellow_color"></i>  User Withdrawl Report </h4>
                     </div>
                </div>
             </div> -->       
            </div>

            <!-- 1-3-block row start -->
            <div class="row pt-3">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
                <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                 <a href="#">  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left yellow_color"></i> Add User Frequently Asked Question </h6> </a>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="Owner_view_Owner.html"><i class="fa fa-user  mr-1"></i> View Owner   </a> -->
                  </div>
                  </div>

                  <form id="kilfrom" method="post" action="/superadmin/users_faqs" >
                  <div class="user-form">
                  <div class="form-group row users-foarms">
                      <div class="form-group col-md-12">
                      
                           <label for="exampleInputEmail" class="form-control-label">Question</label>
                           <input type="text" name="faq" class="form-control" id="exampleInputaddress" placeholder="Enter Question" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
                           
                        </div>
                         <div class="form-group col-md-12">
                         
                           <label for="exampleInputaddress" class="form-control-label">Answer</label>
                          <textarea type="text" name="answer" class="form-control" id="exampleInputaddress" placeholder="Enter Answer" style="height: 80px;" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required></textarea>
                          
                        </div>
                        <input type="hidden" name="faq_type" value="User">
                        <div class="form-group col-md-12">
                        <button type="submit" onclick="validateForm('#kilfrom')" class="btn btn-success waves-effect waves-light m-r-30">Submit</button>
                        </div>
                  </div>
                   </div>

                  </form>

                       <!-- alert msgs -->
                       <% if ( output.includes('successfully') ) { %>
                        <p class="success-text"><%= output %></p>
                  <% } else { %>
                        <p class="error-text"><%= output %></p>
                  <% } %>
            <!-- /alert msgs -->  


                 </div>
               </div>
            </div>
            <!-- 1-3-block row end -->


            <!-- 1-3-block row start -->
            <div class="row">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
               <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left"></i> View User Frequently Asked Question </h6>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="user_addUser.html"><i class="fa fa-user  mr-1"></i> Add User  </a> -->
                  </div>
                  </div>
                  <div class="user-form">
                     <div class="table-reponsive box">
                        <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                          <div class="row">
                          <table id="example" class="table table-striped table-bordered dataTable no-footer" role="grid" aria-describedby="example_info">
                        <thead>
                             <tr role="row">
                                <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 10.0101px;">S.no</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 60.0781px;"> FAQs </th>
                              
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending" style="width: 10.112px;">Action</th>
                            </tr>
                        </thead>
                           <div class="table-responsive">
                              </div>
                             

                              <tbody>

                                 <% for(var i=0; i < faqs.length; i++) { %>
                                   <tr class="odd">
                                     <td class="sorting_1"><%- i+1 %></td>
             
                                     <td>
                                       <strong>Q:  </strong> <span id="faqText_<%- faqs[i].faq_id %>"> <%= faqs[i].faq %></span><br>
                                         <strong>A:  </strong> <span id="ansText_<%- faqs[i].faq_id %>"><%= faqs[i].answer %> </span>
                                                   <!-- Edit Form (hidden by default) -->
                                                   <div id="successMessage<%- faqs[i].faq_id %>" class="alert alert-success d-none">
                                                       FAQ Updated successfully !!
                                                   </div>
                                                     
                                                     <div id="errorMessage<%- faqs[i].faq_id %>" class="alert alert-danger d-none">
                                                         Internal Server Error (Unable to Update FAQ)
                                                     </div>
             
             
             
                                                 <form id="editForm_<%- faqs[i].faq_id %>" class="edit-form" style="display: none; margin-top: 10px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                                                   <input type="hidden" name="faq_id" value="<%- faqs[i].faq_id %>">
                                                   <div class="form-group">
                                                     <label for="faq">Question</label>
                                                     <input type="text" class="form-control" name="faq" value="<%= faqs[i].faq %>" required>
                                                   </div>
                                                   <div class="form-group">
                                                     <label for="answer">Answer</label>
                                                     <textarea class="form-control" name="answer" required><%= faqs[i].answer %></textarea>
                                                   </div>
                                                   <div class="form-group">
                                                     <button type="submit" class="btn btn-primary">Save</button>
                                                     <button type="button" class="btn btn-secondary" onclick="cancelEdit('<%- faqs[i].faq_id %>')">Cancel</button>
                                                   </div>
                                                 </form>
             
             
             
                                     </td>
                                     <td>
                                       <div class="dropdown">
                                         <button class="btn mt-1 mb-1 btn-outline-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Action</button>
                                         <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                           <a class="dropdown-item" onclick="toggleEditForm('<%- faqs[i].faq_id %>')">Edit</a>
                                           <a class="dropdown-item" onclick="deleteFAQ('<%= faqs[i].faq_id  %>', '<%= faqs[i].faq  %>')"> Delete</a>
                                           
                                       </div>
                                     </td>
                                   </tr>
             
                                   <% } %>
             
                               </tbody>


                            </table>
                        </div>
                      </div>
                  </div>
                   </div>
                 </div> 
               </div>
            </div>
            <!-- 1-3-block row end -->

      
         </div>
         <!-- Main content ends -->
         <!-- Container-fluid ends -->
      </div>
   </div>

   <%- include ("superfooter.ejs") %>

   <script>


document.addEventListener("DOMContentLoaded", function() {
            document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
            document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            document.cookie = 'rental_type_id'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
       
    });



faqIDD = 0;


function toggleEditForm(faqId) {
  faqIDD = faqId
  $('.edit-form').hide();
  // Toggle the visibility of the clicked edit form
  $(`#editForm_${faqId}`).toggle();
}

function cancelEdit(faqId) {

  // Hide the edit form
  $(`#editForm_${faqId}`).hide();
}

$(document).ready(function () {
  // Handle Form Submission for Edit FAQ
  $('form.edit-form').submit(function (e) {
    e.preventDefault();

    // Your AJAX Code to Send Data to editFAQ API
    $.ajax({
      url: '/superadmin/editFAQ', // Replace with your actual API endpoint URL
      type: 'POST',
      data: $(this).serialize(),
      success: function (response) {
        const faqId = response.faq_id;
        $(`#faqText_${faqIDD}`).text(response.faq);
        $(`#ansText_${faqIDD}`).text(response.answer);
      //   $(`#answerText_${faqIDD}`).text(response.answer);
        $(`#editForm_${faqIDD}`).hide();
        $(`#successMessage${faqIDD}`).removeClass("d-none");
      $(`#errorMessage${faqIDD}`).addClass("d-none");
      },
      error: function (error) {    
        console.error(error);
        $(`#errorMessage${faqIDD}`).removeClass("d-none");
      $(`#successMessage${faqIDD}`).addClass("d-none");
      },
    });
  });
});


   </script>

   <script>




   //-------------- Comman Kilvish Function for input validation start ---------------------
   
   
   
   
   function validateRequiredFields(kil) {

const form = document.querySelector(`${kil}`); 
const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
let isValid = true;



// Remove previous error messages and borders
form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
inputs.forEach(input => {
    input.style.border = ''; // Reset borders
});

inputs.forEach(input => {
    if (!input.value.trim()) {  // If the required field is empty
        isValid = false;
        input.style.border = '1px solid red'; // Set border to red for empty required fields
        addErrorMessage(input.parentNode, "This Field is Required."); // Add error message
    }
});

return isValid;
}

// Add real-time validation for each required field
function addRealTimeValidation(kil) {
const form = document.querySelector(`${kil}`); 
const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');

inputs.forEach(input => {
 // Listen for 'input' and 'change' events on required fields
 input.addEventListener('input', function () {
     if (input.value.trim()) {
         // If the input is filled, remove red border and error message
         input.style.border = '';
         const errorMessage = input.parentNode.querySelector('.error-message');
         if (errorMessage) {
             errorMessage.remove();
         }
     }
 });
 input.addEventListener('change', function () {
     if (input.value.trim()) {
         // For select fields, check if an option is selected
         input.style.border = '';
         const errorMessage = input.parentNode.querySelector('.error-message');
         if (errorMessage) {
             errorMessage.remove();
         }
     }
 });
});
}




// Combined validation function
function validateForm(kil) {

if(!validateRequiredFields(kil)){
  event.preventDefault();
}
}

// Add real-time validation once the document is loaded
document.addEventListener('DOMContentLoaded', () => {
addRealTimeValidation('#kilfrom');  // Activate real-time validation
});


function validateKilvishInput(event) {
const inputField = event.target;

// General valid character sets
// let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;

let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 

// Define allowed image file types
const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];

// Use parentNode for regular inputs, container for checkboxes
const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
const inputParent = inputField.parentNode;

// Remove previous error message and border
let errorMessage = inputParent.querySelector('.error-message');
if (errorMessage) errorMessage.remove();
inputField.style.border = ''; // Reset border

// Custom validations based on input name
if (inputField.name === 'answer') {
   // validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;
   

   validCharacters = /^[a-zA-Z0-9@,._\s\-'"*():;•\[\]]*$/;



    // Check length limit
    if (inputField.value.length > 400) {
        addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
        inputField.style.border = '1px solid red';
        inputField.value = inputField.value.substring(0, 400); // Truncate the input
        return;
    }


} else if (inputField.name === 'faq') {
  
  validCharacters = /^[a-zA-Z\s\d\.\?]*$/; 
}else if (inputField.name === 'age') {
    // Only numbers allowed, between 7 and 10 digits
    validCharacters = /^\d{2,2}$/;
      // Custom validation: Ensure age is 18 or above
          if (inputField.value && parseInt(inputField.value) < 18 && event.type === 'change') {
              addErrorMessage(inputParent, 'Age must be 18 or above!');
              inputField.style.border = '1px solid red';
              inputField.value = ''; // Clear the input field if age is below 18
              return;
          }else if(inputField.value && parseInt(inputField.value) < 18 ){
            addErrorMessage(inputParent, 'Age must be 18 or above!');
              inputField.style.border = '1px solid red';                 

          }
        }else if (inputField.name === 'model_name' || inputField.name ==='models[]') {
           // Only numbers allowed, between 7 and 10 digits
           validCharacters = /^[a-zA-Z0-9]{4,20}$/;
        }else if(inputField.type ==='email'){
           validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
        }else if(inputField.type ==='password'){

                        const hasSequentialChars = (password) => {
                             console.log("passworddddddd -", password)
                             const length = password.length;
                             
                             // Check for ascending sequences (e.g., "123", "abc")
                             for (let i = 0; i < length - 3; i++) {
                                if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                      password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                      password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                      return true; // Ascending sequence found
                                }
                             }

                             // Check for descending sequences (e.g., "321", "cba")
                             for (let i = 0; i < length - 3; i++) {
                                if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                      password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                      password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                      return true; // Descending sequence found
                                }
                             }
                             
                             return false; // No sequential characters
                          };

           

           validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;


                                      // Check if password meets the required pattern
                       if (!validCharacters.test(inputField.value)) {
                          addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                          inputField.style.border = '1px solid red';
                          if (event.type === 'change') {   inputField.value = '';  }
                          return; // Stop further validation
                       }

                       // Check for sequential characters
                       if (hasSequentialChars(inputField.value)) {
                          addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                          inputField.style.border = '1px solid red';
                             if (event.type === 'change') {   inputField.value = '';  }
                          return; // Stop further validation
                       }


                       // Function to check for sequential characters in the password
             
                                               



        }
          

        



// Handle file input validation
if (inputField.type === 'file') {
    const file = inputField.files[0];
    if (file && !validImageTypes.includes(file.type)) {
        addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
        inputField.value = ''; // Clear the file input field
        inputField.style.border = '1px solid red';
        return;
    }
} else {
    // For normal text/number input validation
    if (event.type === 'keyup') {
        if (!validCharacters.test(inputField.value)) {
            addErrorMessage(inputParent, 'Invalid character entered!');
            inputField.style.border = '1px solid red';
            
        }
    }

    if (event.type === 'change') {
        if (!validCharacters.test(inputField.value)) {
            // On invalid input during change event, clear the field and show an error
            inputField.value = ''; // Clear invalid input
            addErrorMessage(inputParent, 'Invalid character or format!');
            inputField.style.border = '1px solid red';
        } else {
            // Clear error when value is corrected
            inputField.style.border = '';
            if (errorMessage) errorMessage.remove();
        }
    }
}
}

// Function to display error messages under the input field or container for checkboxes
function addErrorMessage(parent, message) {
if (!parent.querySelector('.error-message')) {
    const errorMessage = document.createElement('div');
    errorMessage.className = 'error-message';
    errorMessage.style.color = 'red';
    errorMessage.style.fontSize = '12px';
    errorMessage.innerText = message;
    parent.appendChild(errorMessage);
}
}





//-------------- Comman Kilvish Function for input validation End ---------------------



function deleteFAQ(faq_id,faq_name) {

// Use SweetAlert2 for a stylish confirmation
Swal.fire({
          title: 'Are you sure?',
          html: `<span style="color: red;">FAQ  : <span style="font-weight: bold; color: red; background-color: yellow;">${faq_name}</span> Will be Permanently Deleted for all Users.</span>`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, delete Vehicle Type'
      }).then((result) => {
          if (result.isConfirmed) {
              // Make an AJAX request to delete the user
                                  $.ajax({
                          url: '/superadmin/deleteFAQ',
                          type: 'POST',
                          data: { id: faq_id },
                          success: function(response) {
                            if (response.success == true) {
                              document.cookie = `rental_msg=${response.msg}`;
                              window.location.href = '/superadmin/users_faqs'
                            }else{
                             // alert(response.msg)
                               document.cookie = `rental_msg=${response.msg}`;
                            window.location.href = '/superadmin/users_faqs'
                            }
                          },
                          error: function(error) {
                              console.error('Error:', error);
                          }
                      });
          }
      });



}












   </script>

