
   
   
    <%- include ("header.ejs") %>

    <%- include ("sidebar.ejs") %>
        

    <style>

.tab-content {
    display: block !important;
 
}


    </style>
   
   
    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        
        <!-- Content Header (Page header) -->
        <section class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">
                    <div class="col-sm-6">
                        <h1>Profile</h1>
                    </div>
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a href="#">Home</a></li>
                            <li class="breadcrumb-item active">User Profile</li>
                        </ol>
                    </div>
                </div>
            </div>
        </section>

        <!-- Main content -->
        <section class="content">
            <div class="container-fluid">
                
                <div class="row">
                    <div class="col-md-3">

                    <!-- Profile Image -->
                    <div id="successMessage" class="alert alert-success d-none">
                        Profile picture updated successfully!
                      </div>
                        
                        <div id="errorMessage" class="alert alert-danger d-none">
                        Error updating profile picture. Please try again.
                        </div>
                        <div id="errmsg1"></div>   
              
                    <div class="card card-primary card-outline">
                        <div class="card-body box-profile">
                            <div class="profile-pic  mt-3">
                                <label class="-label" for="file">
                                  <span class="glyphicon glyphicon-camera"></span>
                                  <!-- <span>Change Image</span> -->
                                </label>
                                <input id="file" type="file"  onchange="loadFile(event)"/>
                                <img src="../images/profiles/<%- loggeduser.image %>" id="output" alt="Change" width="200" />
                              </div>
                
                            <h3 class="profile-username text-center"><%= loggeduser.first_name %> <%= loggeduser.last_name %></h3>
                            <p class="text-muted text-center">Adminstration</p>
                        </div>
                    </div>
                    <!-- Profile Image -->



                    
                      <!--   ------ Start  Kil profile pic  -------   -->
  
              
              
              
              
                          
                       
                
                
                       
                     
                          <p style="color: gray; text-align: left;">Choose a nice & professional picture to get more interviews! </p>
                          &nbsp;
                            
                      <!--   ------ END Kil profile pic  -------   -->

                </div>
                
                <div class="col-md-9">
                                     <!-- alert msgs -->
                                     <% if ( output.includes('successfully') ) { %>
                                        <p id="kilmessage" class="success-text"><%= output %></p>
                                     <% } else { %>
                                        <p id="kilmessage" class="error-text"><%= output %></p>
                                     <% } %>
                                       <!-- /alert msgs -->
                    <div class="card">
                        <div class="card-header p-2">
                            <ul class="nav nav-pills">
                                <li class="nav-item"><a class="nav-link active" href="#timeline" data-toggle="tab">Profile</a></li>
                                <li class="nav-item"><a class="nav-link" href="#settings" data-toggle="tab">Change Password</a></li>
                            </ul>
                        </div>
                        <div class="card-body">
                            <div class="tab-content">
                                
                                <!-- Tab 1 -->
                                <div class="active tab-pane" id="timeline">
                                    <form class="form-horizontal" id="kileditfrom" action="/superadmin/updateAdmin" action="" method="post" enctype="multipart/form-data">
                                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                                        
                                        <div class="form-group row">
                                            <label for="inputName" class="col-sm-2 col-form-label">First Name *</label>
                                            <div class="col-sm-10">
                                                <input maxlength="20"  onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" value="<%= loggeduser.first_name %>" type="text" class="form-control" placeholder="First Name" name="first_name" value="" autocomplete="off" required>
                                            </div>
                                        </div>

                                        <div class="form-group row">
                                            <label for="inputName" class="col-sm-2 col-form-label"> Last Name *</label>
                                            <div class="col-sm-10">
                                                <input maxlength="20" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" value="<%= loggeduser.last_name %>" type="text" class="form-control" placeholder="First Name" name="last_name" value="" autocomplete="off" required>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label for="inputUserName" class="col-sm-2 col-form-label">User Name *</label>
                                            <div class="col-sm-10">
                                                <input maxlength="20"  onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" value="<%= loggeduser.username %>"  type="text" class="form-control" placeholder="Username" name="username" value="" autocomplete="off" required>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label for="inputEmail" class="col-sm-2 col-form-label">Email *</label>
                                            <div class="col-sm-10">
                                                <input type="email"  onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" value="<%= loggeduser.email %>" class="form-control" placeholder="Email" name="email" value="" autocomplete="off" readonly required>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label for="inputMobileNumber" class="col-sm-2 col-form-label">Mobile Number</label>
                                            <div class="col-sm-10">
                                                <input type="tel"  name="contact" id="kilvishcontact" value="<%= loggeduser.contact %>" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)"   class="form-control" placeholder="Mobile Number" required>
                                            </div>
                                            <input type="hidden" id="fullkilvishcontact" name="fullkilvishcontact"  >
                                            <input type="hidden" value="<%= loggeduser.country_code %>" id="country_code" name="country_code" >
                        

                                        </div>
                                
                                        <div class="form-group row">
                                            <div class="offset-sm-2 col-sm-10">
                                                <input onclick="validateForm('#kileditfrom')" type="submit" class="btn btn-danger" value="Update Profile">
                                            </div>
                                        </div>

                                        
                                    </form>
                                </div>
                                <!-- Tab 1 -->
                                
                                <!-- Tab 2 -->
                                <div class="tab-pane" id="settings">
                                    <form class="form-horizontal" id="kilfrom" method="post" action="/superadmin/changepass">
                                        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                                        <div class="form-group row">
                                            <label for="inputCurrentPassword" class="col-sm-3 col-form-label">Current Password</label>
                                            <div class="col-sm-9">
                                                <input type="password" class="form-control" minlength="5" name="opass" placeholder="******" autocomplete="off" required autofocus>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label for="inputNewPassword" class="col-sm-3 col-form-label">New Password</label>
                                            <div class="col-sm-9">
                                                <input type="password" class="form-control" onkeyup="validateKilvishInput(event)"  onchange="validateKilvishInput(event)" id="txtPassword" minlength="5" name="npass" placeholder="******" autocomplete="off" required autofocus> 
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label for="inputConfirmPassword" class="col-sm-3 col-form-label">Re-type New Password</label>
                                            <div class="col-sm-9">
                                                <input type="password" class="form-control" onkeyup="validateKilvishInput(event)"  onchange="validateKilvishInput(event)" id="txtConfirmPassword" minlength="5" name="cpass" placeholder="******" autocomplete="off" required autofocus>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <div class="offset-sm-3 col-sm-9">
                                                <input  onclick="validateForm('#kilfrom')" type="submit" name="password" class="btn btn-danger" value="Change Password" onclick="return Validate()"/>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <!-- Tab 2 -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
  
  
    <%- include ("footer.ejs") %>

    <script>

let csrfToken = document.querySelector('input[name="_csrf"]').value;
document.addEventListener("DOMContentLoaded", function() {
            document.cookie = 'kwl_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
            document.cookie = 'kwl_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            document.cookie = 'kwl_booking_id'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
       
    });



        
var loadFile = function (event) { 
   const inputField = event.target;
   const errorMessageDiv = document.getElementById('errmsg1');
   const file1 = inputField.files[0]; 

   const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml']; // Define allowed image file types

if (!validImageTypes.includes(file1.type)) {
  // Show error message and clear the input field
  errorMessageDiv.textContent = 'Please select a valid image file (JPEG or PNG)!';
  errorMessageDiv.style.color = 'red';
  inputField.value = ''; // Clear the input field

} else {
  // Clear error message
  errorMessageDiv.textContent = '';




    var image = document.getElementById("output");
    var file = event.target.files[0];
  
    // Create a FormData object to send the file
    var formData = new FormData();
    formData.append("image", file); // Use the name "profileImage" to match your server's expectations

    // Send the AJAX request
    $.ajax({
      url: "/superadmin/updateUserPic", // Replace with your actual API endpoint URL
      type: "POST",
      headers: { 'CSRF-Token': csrfToken },
      data: formData,
      processData: false,
      contentType: false,
      success: function (response) {
      if(response.msg == 'success'){
        $("#successMessage").removeClass("d-none");
    $("#errorMessage").addClass("d-none");
      }else{
        $("#errorMessage").removeClass("d-none");
    $("#successMessage").addClass("d-none");
      }
  
      },
      error: function (error) {
         
          $("#errorMessage").removeClass("d-none");
    $("#successMessage").addClass("d-none");
      },
    });
  
    // Update the preview image
    image.src = URL.createObjectURL(file);

   }

//else end 

  };
  





  
  document.addEventListener("DOMContentLoaded", function () {
  var input = document.querySelector("#kilvishcontact");
  var savedCountryCode = document.getElementById("country_code").value;
  var savedPhoneNumber = document.getElementById("kilvishcontact").value;

  // Initialize intlTelInput
  var iti = window.intlTelInput(input, {
    preferredCountries: ["hk", "cn"], // Customize based on your needs
    separateDialCode: true,
    initialCountry: "jm",
    nationalMode: false, // Ensure the number is shown without spaces
        formatOnDisplay: false, // Disable auto-formatting on display
    utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
  });

  // Combine saved country code and phone number if available
  if (savedCountryCode && savedPhoneNumber) {
    var fullPhoneNumber = savedCountryCode + savedPhoneNumber;
    iti.setNumber(fullPhoneNumber); // Set both the country code and phone number
  }


  

  // Error message map
  const errorMap = [
    "Invalid number",
    "Invalid country code",
    "Too short",
    "Too long",
    "Invalid number",
  ];

  // Display error message
  const errorMsg = document.createElement("div");
  errorMsg.style.color = "red";
  errorMsg.style.marginTop = "5px";
  input.parentNode.appendChild(errorMsg);

  // Validation function
  const validateNumber = () => {
    var errorCode = iti.getValidationError();
    var valid = iti.isValidNumber();

    if (valid) {
      errorMsg.textContent = ""; // Clear error message
      input.style.borderColor = ""; // Reset border color
    } else {
      var msg = errorMap[errorCode] || "Invalid number";
      errorMsg.textContent = msg; // Show error message
      input.style.borderColor = "red"; // Highlight input box
    }

    // Update hidden fields even if invalid
    var fullPhoneNumber = iti.getNumber();
    var countryCode = "+" + iti.getSelectedCountryData().dialCode;
    document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
    document.querySelector("#country_code").value = countryCode;
  };

  // Event listeners to validate and update hidden fields
  input.addEventListener("input", validateNumber);
  input.addEventListener("countrychange", validateNumber);
  input.addEventListener("blur", validateNumber); // Optional: validate on blur

  // Initialize hidden fields on page load
  validateNumber();
});











   //==================== Comman Kilvalidation start =====================
   
      
   function validateRequiredFields(kil) {
   
   
   const form = document.querySelector(`${kil}`); 
   
   const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
   
   
   let isValid = true;
   let kilerror = 'This Field is Required.'
   
   
   
   // Remove previous error messages and borders
   form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
   inputs.forEach(input => {
    
       input.style.border = ''; // Reset borders
   });
   
   inputs.forEach(input => {
   
   
   
                    if(input.type == 'date'){
                        
                        kilerror = "Please Select Date"
                        input.style.border = '1px solid red';
                    }else if(input.name == 'comments'){
                    
                        kilerror = 'Please Enter Comments'
                    }else if(input.type == 'email'){
                    
                    kilerror = 'Please Enter Email'
                }else if(input.type == 'password'){
                    
                    kilerror = 'Please Enter Password'
                }else{
                    kilerror = 'This Field is Required.'
                }
     
   
       if (!input.value.trim()) {  // If the required field is empty      
           isValid = false;
           input.style.border = '1px solid red'; // Set border to red for empty required fields
           addErrorMessage(input.parentNode, kilerror); // Add error message
       }
   });
   
   return isValid;
   }
   
   
   // Add real-time validation for each required field
   function addRealTimeValidation(kil) {
       const form = document.querySelector(`${kil}`); 
       const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
   
       inputs.forEach(input => {
           input.addEventListener('input', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
   
           input.addEventListener('change', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the select input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
       });
   }
   
   
   // Combined validation function
   function validateForm(kil) {
   
   
   if(!validateRequiredFields(kil)){
     event.preventDefault();
   }
   }
   
   // Add real-time validation once the document is loaded
   document.addEventListener('DOMContentLoaded', () => {
   addRealTimeValidation('#kilform');  // Activate real-time validation
   });
   
   
   function validateKilvishInput(event) {
  
          const inputField = event.target;
      
          // General valid character sets
          // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;
      
          let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 
      
          // Define allowed image file types
          const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];
      
          // Use parentNode for regular inputs, container for checkboxes
          const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
          const inputParent = inputField.parentNode;
      
          // Remove previous error message and border
          let errorMessage = inputParent.querySelector('.error-message');
          if (errorMessage) errorMessage.remove();
          inputField.style.border = ''; // Reset border
      
          // Custom validations based on input name
          if (inputField.name === 'description' || inputField.name ===  'address') {
              validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;
      
              // Check length limit
              if (inputField.value.length > 400) {
                  addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
                  inputField.style.border = '1px solid red';
                  inputField.value = inputField.value.substring(0, 400); // Truncate the input
                  return;
              }
          }  else if (inputField.name === 'firstname' ||  inputField.name === 'lastname' ) {
   
                         validCharacters = /^[a-zA-Z\s]*$/; 
                   
                       // const allowedChars = /^[a-zA-Z0-9._@-]+$/;  //for kilMiddle Conditon 
                        const allowedChars = /^[a-zA-Z0-9._@-\s]+$/; // For any additional validations
                        
                        const inputValue = inputField.value; 

                          

                                    if (!allowedChars.test(inputField.value)) {
                                        // Allow common validation to handle non-numeric characters
                                    } else if (inputValue.length > 20 || inputValue.length < 2  ) {                        
                                        addErrorMessage(inputParent, 'This Field Must Be Between 2 And 20 Characters.');
                                        inputField.style.border = '1px solid red'; 

                                        if (event.type === 'change') {
                                            inputField.value = ''; 
                                        }    
                                        return;
                                        } 


                                        inputField.style.border = '';



                        } else if (inputField.name === 'otp') {
   
   
   
              validCharacters = /^\d{6,6}$/;
              const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
            const inputValue = inputField.value; 
   
                        const numericValue = parseInt(inputValue, 10);
   
                        if (!numericOnlyPattern.test(inputField.value)) {
                           // Allow common validation to handle non-numeric characters
                       } else if (inputValue.length > 6 || inputValue.length < 6  ) {                        
                              addErrorMessage(inputParent, 'OTP must be exactly 6 digits');
                              inputField.style.border = '1px solid red'; 
   
                              if (event.type === 'change') {
                                 inputField.value = ''; 
                              }    
                              return;
                           } 
   
   
                           inputField.style.border = '';
   
   
   
          }else if (inputField.name === 'trn') { 
   
          
   
   
                             validCharacters = /^\d{0,20}$/;
                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                            const inputValue = inputField.value; 
                      
                                        const numericValue = parseInt(inputValue, 10);

                                        if (!numericOnlyPattern.test(inputField.value)) {
                                            // Allow common validation to handle non-numeric characters
                                        } else if (inputValue.length > 20 || inputValue == 0  ) {                        
                                            addErrorMessage(inputParent, 'TRN Cannot Be 0 Or Exceed 20 Digits');
                                            inputField.style.border = '2px solid red'; 

                                            if (event.type === 'change') {
                                                inputField.value = ''; 
                                            }    
                                            return;
                                            } 


                                            inputField.style.border = '';



                            }else if (inputField.name === 'number_of_items') { 
   
          
   
   
                            // validCharacters = /^\d{0,6}$/;  // without decimal 
                            validCharacters = /^\d{0,6}(\.\d{0,2})?$/;   //with decimal 2 place
                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                            const inputValue = inputField.value; 

                                        const numericValue = parseInt(inputValue, 10);

                                        if (!numericOnlyPattern.test(inputField.value)) {
                                            // Allow common validation to handle non-numeric characters
                                        } else if (inputValue.length > 3 || inputValue == 0  ) {                        
                                            addErrorMessage(inputParent, 'Pacakge Number Cannot Be 0 Or Exceed 3 Digits');
                                            inputField.style.border = '2px solid red'; 

                                            if (event.type === 'change') {
                                                inputField.value = ''; 
                                            }    
                                            return;
                                            } 


                                            inputField.style.border = '';



   }else if (inputField.name === 'contact' || inputField.id =='agent_contact') {
   
   
                                            
                                           // validCharacters = /^\d{7,15}$/;

                                            validCharacters = /^[\d\-\s]{0,20}$/; // alllow dash(-) and space 

                                            // const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                                            // const inputValue = inputField.value; 

                                            //             const numericValue = parseInt(inputValue, 10);

                                            //             if (!numericOnlyPattern.test(inputField.value)) {
                                            //                 // Allow common validation to handle non-numeric characters
                                            //             } else if (inputValue.length > 10 || inputValue.length < 7  ) {                        
                                            //                 addErrorMessage(inputParent, 'Mobile Number Must Be Between 7 And 10 Digits.');
                                            //                 inputField.style.border = '2px solid red'; 

                                            //                 if (event.type === 'change') {
                                            //                     inputField.value = ''; 
                                            //                 }    
                                            //                 return;
                                            //                 } 


                                            //                 inputField.style.border = '';



   }else if (inputField.name === 'bol_number' || inputField.name =='chassis_number' || inputField.name =='declaration_number' || inputField.name =='container_number' ) {
   
   
                                            
       validCharacters = /^\d{0,20}$/;
   const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
   const inputValue = inputField.value; 

               const numericValue = parseInt(inputValue, 10);

               if (!numericOnlyPattern.test(inputField.value)) {
                   // Allow common validation to handle non-numeric characters
               } else if (inputValue.length > 20 || inputValue.length < 1  ) {                        
                   addErrorMessage(inputParent, 'This Must Be Between 1 And 20 Digits.');
                   inputField.style.border = '2px solid red'; 

                   if (event.type === 'change') {
                       inputField.value = ''; 
                   }    
                   return;
                   } 


                   inputField.style.border = '';



}else if (inputField.type === 'date') {
         
                                validCharacters = /^(?:\d{4}[-\/]\d{2}[-\/]\d{2})$/; 
                                
                                const inputValue = inputField.value.trim();
   
   
                                const inputDate = new Date(inputValue.replace(/[-\/]/g, '/'));
                          const today = new Date();
                          today.setHours(0, 0, 0, 0); // Set to midnight for comparison
   
                                         // Check if the date is in the past
                          if (inputDate < today) {
                             addErrorMessage(inputParent, 'The date cannot be in the past.');
                             inputField.style.border = '2px solid red';
                             
                             if (event.type === 'change') {
                                   inputField.value = ''; // Clear the input field on change
                             }
                             
                             return; // Exit the function after handling the error
                          }
   
   
                 inputField.style.border = '';
                  }else if (inputField.name === 'model_name' || inputField.name ==='models[]') {
                     // Only numbers allowed, between 7 and 10 digits
                     validCharacters = /^[a-zA-Z0-9]{4,20}$/;
                  }else if(inputField.type =='email'){
                     validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
                     const allowedEmailChars = /^[a-zA-Z0-9._@-]+$/; 
                    
                     const inputValue = inputField.value; 
   
                     // If input contains invalid characters, skip email validation and let common validation handle it
                               if (!allowedEmailChars.test(inputValue)) {
                                   // Skip email validation, allowing common validation to catch unwanted characters
                               } else if (!validCharacters.test(inputValue)) {                        
                                 addErrorMessage(inputParent, 'Invalid Email Format.');
                                 inputField.style.border = '1px solid red'; 
   
                                 if (event.type === 'change') {
                                   inputField.value = ''; 
                                 }    
                                 return;
                             } 
   
   
                             inputField.style.border = '';
   
                  }else if(inputField.type ==='password'){
      
                                  const hasSequentialChars = (password) => {
                                       console.log("passworddddddd -", password)
                                       const length = password.length;
                                       
                                       // Check for ascending sequences (e.g., "123", "abc")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                                return true; // Ascending sequence found
                                          }
                                       }
      
                                       // Check for descending sequences (e.g., "321", "cba")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                                return true; // Descending sequence found
                                          }
                                       }
                                       
                                       return false; // No sequential characters
                                    };
      
                     
      
                     validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;
      
      
                                                // Check if password meets the required pattern
                                 if (!validCharacters.test(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                                    inputField.style.border = '1px solid red';
                                    if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
                                 // Check for sequential characters
                                 if (hasSequentialChars(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                                    inputField.style.border = '1px solid red';
                                       if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
      
                                 // Function to check for sequential characters in the password
                       
                                                         
      
      
      
                  }
                    
      
                  
      
      
      
          // Handle file input validation
          if (inputField.type === 'file') {
              const file = inputField.files[0];
              if (file && !validImageTypes.includes(file.type)) {
                  addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
                  inputField.value = ''; // Clear the file input field
                  inputField.style.border = '1px solid red';
                  return;
              }
          } else {
              // For normal text/number input validation
              if (event.type === 'keyup') {
                  if (!validCharacters.test(inputField.value)) {
                      addErrorMessage(inputParent, 'Invalid character entered!');
                      inputField.style.border = '1px solid red';
                      
                  }
              }
      
              if (event.type === 'change') {
                  if (!validCharacters.test(inputField.value)) {
                      // On invalid input during change event, clear the field and show an error
                      inputField.value = ''; // Clear invalid input
                      addErrorMessage(inputParent, 'Invalid character or format!');
                      inputField.style.border = '1px solid red';
                  } else {
                      // Clear error when value is corrected
                      inputField.style.border = '';
                      if (errorMessage) errorMessage.remove();
                  }
              }
          }
      }
      
   
   
   
   
   
      // Function to display error messages under the input field or container for checkboxes
      function addErrorMessage(parent, message) {
          if (!parent.querySelector('.error-message')) {
              const errorMessage = document.createElement('div');
              errorMessage.className = 'error-message';
              errorMessage.style.color = 'red';
              errorMessage.style.fontSize = '12px';
              errorMessage.innerText = message;
              parent.appendChild(errorMessage);
          }
      }
      
      
   
   
      document.addEventListener('DOMContentLoaded', () => {    
       addRealTimeValidation('#kilform');  // Activate real-time validation

       const form = document.querySelector(`#kilform`); 
      // const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
      const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
   
            requiredFields.forEach(field => {
    
       const label = document.querySelector(`label[for='${field.name}']`); // Use name instead of id
      // Check if the field is empty
                     if (label && !label.innerHTML.includes('*') && field.value.trim() === '') { 
                                          // Append asterisk only if the field is empty
                            label.innerHTML += ' <span style="color:red;">*</span>'; 
                        }

   
   });
   
   
   });



   //============= Clear Kilalert msg after 5 sec =========== 
    // Wait for the DOM to fully load
    document.addEventListener("DOMContentLoaded", function() {
        // Set a timeout to clear the message after 5 seconds
        setTimeout(function() {
            const messageElement = document.getElementById("kilmessage");
            if (messageElement) {
                messageElement.innerHTML = ""; // Clear the message
            }
        }, 5000); // 5000 milliseconds = 5 seconds
    });
   




   
   
   //====================== Command Kilvish validation End ===============================



    </script>
  