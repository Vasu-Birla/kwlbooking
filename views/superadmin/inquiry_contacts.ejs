
<%- include ("superheader.ejs") %>
<%- include ("supersidebar.ejs") %>


      <!-- Sidebar chat end-->
      <div class="content-wrapper">
         <!-- Container-fluid starts -->
         <!-- Main content starts -->
         <div class="container-fluid">
             <div class="row ">
                <div class="col-lg-12">
                    <div class="bread-boxes">
                        <ol class="breadcrumb">
                            <li><a href="/superadmin"> Home </a></li>
                               <li class="active"><a href="#"> / Support</a></li>
                               <li class="active"> / Support Inquiry </li> 
                          </ol>
                    </div>
                </div>
                 <!--  <div class="col-lg-6">
               <div class="headings headings-boxess mt-4">
                  <div class="main-headers mt-0" style="margin-top: 0px !important;">
                    <h4> <i class="fa fa-arrow-circle-o-left yellow_color"></i>  User Withdrawl Report </h4>
                     </div>
                </div>
             </div> -->       
            </div>

            <!-- 1-3-block row start -->
            <div class="row pt-3">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
                <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                 <a href="#">  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left yellow_color"></i> Add Support Inquiry  </h6> </a>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="Owner_view_Owner.html"><i class="fa fa-user  mr-1"></i> View Owner   </a> -->
                  </div>
                  </div>
                 
               <form id="kilfrom" method="post" action="/superadmin/inquiry_contacts"> 
                  <div class="user-form">
                  <div class="form-group row users-foarms">
                     <div class="form-group col-md-4">
                              <i class="fa fa-envelope icon-set"></i>
                           <label for="exampleInputEmail" class="form-control-label"> Email </label>
                           <input type="email" name="support_email" class="form-control" id="exampleInputfirst" placeholder="Enter Email " onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
                        </div>

                             <div class="form-group col-md-4">
                                  <i class="fa fa-phone icon-set"></i>

                                    <label for="exampleInputPassword" class="form-control-label">Mobile Number</label>             
                                

                                 <input type="tel" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" name="contact" id="kilvishcontact"   class="form-control cc text-left prof-boxes" placeholder="Contact Number" required>

    
                                 <input type="hidden" id="fullkilvishcontact" name="fullkilvishcontact"  >
                                 <input type="hidden" id="country_code" name="country_code" >
                                 <div id="errorText1" style="color: red;"></div>

                                 </div>

                        <div class="form-group col-md-12">
                        <button type="submit" onclick="validateForm()"  class="btn btn-success waves-effect waves-light m-r-30">Submit</button>
                        </div>
                  </div>
                  
                   </div>
                   </form>

                 </div>
               </div>
            </div>
            <!-- 1-3-block row end -->


            <!-- 1-3-block row start -->
            <div class="row">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
               <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left"></i> View Support Inquiry  </h6>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="user_addUser.html"><i class="fa fa-user  mr-1"></i> Add User  </a> -->
                  </div>
                  </div>
                  <div class="user-form">
                     <div class="table-reponsive box">
                        <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                          <div class="row">
                          <table id="example" class="table table-striped table-bordered dataTable no-footer" role="grid" aria-describedby="example_info">
                        <thead>
                             <tr role="row">
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 15.0781px;">S.no</th>
                              <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 50.0781px;">Email </th>
                                <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 50.0781px;">Conatact No</th>
                              <!-- <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending" style="width: 80.156px;">Action</th> -->
                            </tr>
                        </thead>
                           <div class="table-responsive">
                              </div>
                              <tbody>
                                 <tr role="row" class="odd">
                                    <td>1</td>
                                   <% if(support) { %>
                                      <td><p style="margin-bottom: 0rem;"><%- support.support_email %></p></td>
                                      <td><p style="margin-bottom: 0rem;"><%- support.country_code %>  <%- support.support_contact %></p></td>
           
                                  <% } %> 
                                 </tr>
           
                         
           
                               </tbody>
                            </table>
                        </div>
                      </div>
                  </div>
                   </div>
                 </div> 
               </div>
            </div>
            <!-- 1-3-block row end -->

     
         </div>
         <!-- Main content ends -->
         <!-- Container-fluid ends -->
      </div>
   </div>

   <%- include ("superfooter.ejs") %>

   <script>
      


//-------------- Comman Kilvish Function for input validation start ---------------------



function validateRequiredFields() {
    const form = document.querySelector('#kilfrom'); 
    const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
    let isValid = true;

    

    // Remove previous error messages and borders
    form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
    inputs.forEach(input => {
        input.style.border = ''; // Reset borders
    });

    inputs.forEach(input => {
        if (!input.value.trim()) {  // If the required field is empty
            isValid = false;
            input.style.border = '1px solid red'; // Set border to red for empty required fields
            addErrorMessage(input.parentNode, "This Field is Required."); // Add error message
        }
    });

    return isValid;
}



// Combined validation function
function validateForm() {

   if(!validateRequiredFields()){
      event.preventDefault();
   }
}





function validateKilvishInput(event) {
    const inputField = event.target;

    // General valid character sets
    // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;

    let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 

    // Define allowed image file types
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];

    // Use parentNode for regular inputs, container for checkboxes
    const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
    const inputParent = inputField.parentNode;

    // Remove previous error message and border
    let errorMessage = inputParent.querySelector('.error-message');
    if (errorMessage) errorMessage.remove();
    inputField.style.border = ''; // Reset border

    // Custom validations based on input name
    if (inputField.name === 'description') {
        validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;

        // Check length limit
        if (inputField.value.length > 400) {
            addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
            inputField.style.border = '1px solid red';
            inputField.value = inputField.value.substring(0, 400); // Truncate the input
            return;
        }
    } else if (inputField.name === 'contact' || inputField.name === 'contact') {
        // Only numbers allowed, between 7 and 10 digits
        validCharacters = /^\d{7,10}$/;
        const inputValue = inputField.value; 

                  if (inputValue.length < 7 || inputValue.length > 10 ) {                        
                           addErrorMessage(inputParent, 'Invalid Contact Length');
                           inputField.style.border = '1px solid red'; 

                           if (event.type === 'change' || event.type == 'blur') {
                              inputField.value = ''; 
                             // addErrorMessage(inputParent, 'Invalid Contact Length ( Contact Number Must be of minimum 7 digits and max 15 )');
                           }    
                           return;
                        } 


                        inputField.style.border = '';


    }else if (inputField.name === 'age') {
        // Only numbers allowed, between 7 and 10 digits
        validCharacters = /^\d{2,2}$/;
          // Custom validation: Ensure age is 18 or above
              if (inputField.value && parseInt(inputField.value) < 18 && event.type === 'change') {
                  addErrorMessage(inputParent, 'Age must be 18 or above!');
                  inputField.style.border = '1px solid red';
                  inputField.value = ''; // Clear the input field if age is below 18
                  return;
              }else if(inputField.value && parseInt(inputField.value) < 18 ){
                addErrorMessage(inputParent, 'Age must be 18 or above!');
                  inputField.style.border = '1px solid red';                 

              }
            }else if (inputField.name === 'job_exp') {
               // Only numbers allowed, between 7 and 10 digits
               validCharacters = /^\d{1,2}$/;
            }else if(inputField.type ==='email'){
               validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
            }else if(inputField.type ==='password'){

                            const hasSequentialChars = (password) => {
                                 console.log("passworddddddd -", password)
                                 const length = password.length;
                                 
                                 // Check for ascending sequences (e.g., "123", "abc")
                                 for (let i = 0; i < length - 3; i++) {
                                    if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                          password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                          password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                          return true; // Ascending sequence found
                                    }
                                 }

                                 // Check for descending sequences (e.g., "321", "cba")
                                 for (let i = 0; i < length - 3; i++) {
                                    if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                          password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                          password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                          return true; // Descending sequence found
                                    }
                                 }
                                 
                                 return false; // No sequential characters
                              };

               

               validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;


                                          // Check if password meets the required pattern
                           if (!validCharacters.test(inputField.value)) {
                              addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                              inputField.style.border = '1px solid red';
                              if (event.type === 'change') {   inputField.value = '';  }
                              return; // Stop further validation
                           }

                           // Check for sequential characters
                           if (hasSequentialChars(inputField.value)) {
                              addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                              inputField.style.border = '1px solid red';
                                 if (event.type === 'change') {   inputField.value = '';  }
                              return; // Stop further validation
                           }


                           // Function to check for sequential characters in the password
                 
                                                   



            }
              

            



    // Handle file input validation
    if (inputField.type === 'file') {
        const file = inputField.files[0];
        if (file && !validImageTypes.includes(file.type)) {
            addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
            inputField.value = ''; // Clear the file input field
            inputField.style.border = '1px solid red';
            return;
        }
    } else {
        // For normal text/number input validation
        if (event.type === 'keyup') {
            if (!validCharacters.test(inputField.value)) {
                addErrorMessage(inputParent, 'Invalid character entered!');
                inputField.style.border = '1px solid red';
                
            }
        }

        if (event.type === 'change') {
            if (!validCharacters.test(inputField.value)) {
                // On invalid input during change event, clear the field and show an error
                inputField.value = ''; // Clear invalid input
                addErrorMessage(inputParent, 'Invalid character or format!');
                inputField.style.border = '1px solid red';
            } else {
                // Clear error when value is corrected
                inputField.style.border = '';
                if (errorMessage) errorMessage.remove();
            }
        }
    }
}

// Function to display error messages under the input field or container for checkboxes
function addErrorMessage(parent, message) {
    if (!parent.querySelector('.error-message')) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.style.color = 'red';
        errorMessage.style.fontSize = '11px';
        errorMessage.innerText = message;
        parent.appendChild(errorMessage);
    }
}





//-------------- Comman Kilvish Function for input validation End ---------------------



//----------------

document.addEventListener("DOMContentLoaded", function() {
        var input = document.querySelector("#kilvishcontact");

        var iti = window.intlTelInput(input, {
          preferredCountries: ["hk", "cn"], // Customize based on your needs
          separateDialCode: true,
          initialCountry: "hk",
          utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
        });



    // Update hidden input field with full phone number
    input.addEventListener("input", function() {
      var fullPhoneNumber = iti.getNumber();
      var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
      document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
      document.querySelector("#country_code").value = countryCode;

    });


    input.addEventListener("countrychange", function() {
    var fullPhoneNumber = iti.getNumber();  // Get the full number
    var countryCode = '+' + iti.getSelectedCountryData().dialCode;  // Get the new country code
    // Update hidden fields
    document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
    document.querySelector("#country_code").value = countryCode;
  });




    // Initialize hidden field with the current value on page load
    var fullPhoneNumber = iti.getNumber();
    var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
    document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
    document.querySelector("#country_code").value = countryCode;

  });


   </script>