

<%- include ("header.ejs") %>
<%- include ("sidebar.ejs") %>



<style>
    span{
    color: #133590;
}


.col-md-6 {
    padding-top: 10px !important;
}

</style>

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
        
    <!-- Content Header (Page header) -->
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">Dashboard</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="#">Dashboard</a></li>
                        <li class="breadcrumb-item active">Dashboard</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
    <!-- // content-header -->

    
    <!-- calendar Section -->
    <section class="appointment section">
        <div class="container">
            <div class="row">
            
                <div class="col-md-12 colcontainer">

                    <!-- Tab Headers -->
                    <div class="tabs">
                        <div class="tab active" onclick="showTab(0)">1. CHOOSE APPOINTMENT</div> &nbsp;
                        <div class="tab">2. CONTACT INFORMATION</div>&nbsp;
                        <div class="tab">3. APPOINTMENT PREVIEW</div>
                    </div>

                    <!-- Tab Contents -->
                    <div id="tabContents">
                        <!-- Choose Appointment Tab -->
                        <div class="tab-content active">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>* Appointment Type</label>
                   
                                    <!-- <select name="option1" id="appointmentType" class="form-control select2" required>
                                        <option value="">Select Service</option>
                                    </select> -->

                                    <select name="option1" id="appointmentType" class="form-control select2" required aria-readonly="">
                                        <option value="">Select Service</option>
                                        <% if (booking) { %>
                                          <option value="<%= booking.appointmentTypeID %>" data-calendar-id="<%= booking.calendarID %>" selected readonly>
                                            Your Click N Collect Appointment
                                          </option>
                                        <% } %>
                                      </select>

                                    <br>
                                    <label>Select Date</label>
                                    <!-- Calendar Section -->
                          
                                    <div class="calendar">
                                        <div class="calendar-header">
                                            <span onclick="prevMonth()" class="calendaricon">&#706;</span>
                                            <div id="monthYear">October 2024</div>
                                            <span onclick="nextMonth()" class="calendaricon">&#707;</span>
                                        </div>
                                        <div class="calendar-days" id="calendarDays">
                                            <!-- Calendar days will be generated by JavaScript -->
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-6">
                                    <div class="time-slots" id="timeSlotsSection" style="display:none;">
                                        <label>Select time</label>
                                        <div id="timeSlots">
                                            <!-- Time slots will be dynamically generated by JavaScript -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="button-container">
                                <center><button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button></center>
                            </div>
                        </div>

                        <!-- Contact Information Tab -->
                        <div class="tab-content">
                            <form id="kilform">
                                <div class="row gy-4">
                                    <input type="hidden" id="calendarId" name="calendarId" value="<%= booking.calendarID %>">

                                    <input type="hidden" id="booking_datetime" name="booking_datetime" value="<%= booking.booking_times %>">
                                    
                                    <input type="hidden" name="booking_id" id="booking_id" value="<%= booking.booking_id %>">
                                    <div class="col-md-6">
                                        <label>* TRN</label>
                                        <input type="text" id="trn" name="trn" class="form-control" value="<%= booking.trn %>" readonly>
                                    </div>
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <label>* First Name</label>
                                        <input type="text" id="fname" class="form-control" name="firstname" value="<%= booking.firstname %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>Last Name</label>
                                        <input type="text" id="lname" class="form-control" name="lastname" value="<%= booking.lastname %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Mobile Number</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <select id="countrycode" class="form-control" name="country_code" readonly>
                                                    <option value="+1" <%= booking.country_code === '+1' ? 'selected' : '' %>>+1 (USA)</option>
                                                    <option value="+44" <%= booking.country_code === '+44' ? 'selected' : '' %>>+44 (UK)</option>
                                                    <option value="+91" <%= booking.country_code === '+91' ? 'selected' : '' %>>+91 (India)</option>
                                                </select>
                                            </div>
                                            <input type="number" id="phone4" class="form-control" name="contact" value="<%= booking.contact %>" readonly>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Email Address</label>
                                       <input type="email" id="email" class="form-control" name="user_email" value="<%= booking.user_email %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Agent/Freight Forwarder</label>
                                        <input type="text" id="agent" class="form-control" name="agent_forwarder" value="<%= booking.agent_forwarder %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Name of Individual Making Appointment</label>
                                        <input type="text" id="appname" class="form-control" name="appointment_by" value="<%= booking.appointment_by %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Appointment Type (Personal/Commercial)</label>
                                        <input type="text" id="apppersonal" class="form-control" name="appointment_type" value="<%= booking.appointment_type %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Bill of Lading Number</label>
                                        <input type="text" id="blnumber" class="form-control" name="bol_number" value="<%= booking.bol_number %>" readonly>
                                    </div>
                                    <div class="col-md-12">
                                        <label>* Vessel Name</label>
                                        <input type="text" id="vname" class="form-control" name="vessel_name" value="<%= booking.vessel_name %>" readonly>
                                    </div>
                                    <div class="col-md-12">
                                        <label>* Vessel Reported Date</label>
                                        <input type="date" id="vreport" class="form-control" name="vessel_reported_date" value="<%= booking.vessel_reported_date %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Chassis No (in the case of Motor Unit Appointments)</label>
                                        <input type="text" id="chassis" class="form-control" name="chassis_number" value="<%= booking.chassis_number %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Customs Release/IMS4 Declaration Number</label>
                                        <input type="text" id="ims" class="form-control" name="declaration_number" value="<%= booking.declaration_number %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>Container Number</label>
                                        <input type="text" id="cnumber" class="form-control" name="container_number" value="<%= booking.container_number %>" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Number of Pieces/Packages</label>
                                        <input type="number" id="ppnumber" class="form-control" name="number_of_items" value="<%= booking.number_of_items %>" readonly>
                                    </div>
                                </div>
                            </form>
                            
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-1)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button>
                                </center>
                            </div>
                        </div>

                        <!-- Confirmation Tab -->
                        <div class="tab-content">
                            <h3>Appointment Details</h3>
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>Date</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmDate"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Time</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmTime"></span>
                                </div>
                            </div>
                        
                            <h3>Contact Information</h3>
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>TRN</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmTRN"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>First Name</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmFirstName"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Last Name</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmLastName"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Mobile Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmPhone"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Email Address</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmEmail"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Agent/Freight Forwarder</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmAgent"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Name of Individual Making Appointment</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmAppName"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Appointment Type</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmAppointmentType"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Bill of Lading Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmBLNumber"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Vessel Name</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmVesselName"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Vessel Reported Date</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmVesselReportedDate"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Chassis No</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmChassis"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Customs Release/IMS4 Declaration Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmIMS"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Container Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmContainerNumber"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Number of Pieces/Packages</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmPPNumber"></span>
                                </div>
                            </div>
                        
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-2)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="confirmBooking()">Submit</button>
                                </center>
                            </div>
                        </div>


                    </div>

                </div>
    
            </div>
        </div>
    </section>
    <!-- calendar Section -->
    <input type="hidden" id="loggeduserData" value="<%= JSON.stringify(loggeduser) %>">
    <input type="hidden" id="bookingDate" value="<%= booking.booking_date %>">
<input type="hidden" id="bookingTimes" value="<%= booking.booking_times %>">


    
<%- include ("footer.ejs") %>




<script>
    let currentTab = 0;
    let tabs = document.querySelectorAll('.tab-content');
    let selectedDate = null;
    let selectedTimes = [];
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    let currentMonth = moment().month();
    let currentYear = 2024;
    let availableDates = []; // Array to store available dates
    let calendarId =document.getElementById('calendarId').value
    let appointmentTypeID =document.getElementById("appointmentType").value

    let selectedDateTimes=[]
    let booking = {
    booking_date: document.getElementById('bookingDate').value,
    booking_times: document.getElementById('bookingTimes').value
};



// Fetch the select element by ID
const appointmentTypeSelect = document.getElementById('appointmentType');

// Add an event listener to handle changes in the select element
appointmentTypeSelect.addEventListener('change', function() {
    // Get the selected option
    const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];

    appointmentTypeID = document.getElementById("appointmentType").value,

    // Fetch the data-calendar-id using getAttribute
     calendarId = selectedOption.getAttribute('data-calendar-id');

     document.getElementById('calendarId').value = calendarId;

    console.log('Selected Calendar ID:', calendarId);
});


    document.addEventListener('DOMContentLoaded', function() {
        showTab(currentTab);
        generateCalendar();
        generateTimeSlots();
        fetchAvailableDates();
        loadAppointmentTypes();
        setupEventListeners();
    });

    function showTab(n) {
        const tabs = document.querySelectorAll('.tab-content');
        const tabHeaders = document.querySelectorAll('.tab');

        if (n < 0 || n >= tabs.length) return;
        currentTab = n;

        tabs.forEach((tab, index) => {
            tab.classList.toggle('active', index === currentTab);
            tabHeaders[index].classList.toggle('active', index === currentTab);
        });

        if (n === 2) populateConfirmation();
    }

    function changeTab(step) {
        const newTabIndex = currentTab + step;
        if (newTabIndex >= 0 && newTabIndex < tabs.length) showTab(newTabIndex);
    }

    function nextStep() {
        if (!validateCurrentTab()) return;

        if (currentTab === 0 && (!selectedDate || selectedTimes.length === 0)) {
            alert("Please select a date and at least one time slot.");
            return;
        } else if (currentTab === 1 && !validateInfo()) {
            alert("Please fill out all fields.");
            return;
        }

        if (currentTab === 1) populateConfirmation();
        changeTab(1);
    }

    function prevStep() {
        changeTab(currentTab === 2 ? -2 : -1);
    }





    function populateConfirmation() {
        const selectedDateText = selectedDate || "Not selected";
        const selectedTimesText = selectedTimes.length > 0 ? selectedTimes.join(", ") : "Not selected";
        const appointmentType = document.getElementById("appointmentType").value || "N/A";

        // Retrieve values from all the required input fields
        const trn = document.getElementById("trn").value || "N/A";
        const firstName = document.getElementById("fname").value || "N/A";
        const lastName = document.getElementById("lname").value || "N/A";
        const countrycode = document.getElementById("countrycode").value || "N/A";
        const mobileNumber = document.getElementById("phone4").value || "N/A";
        const email = document.getElementById("email").value || "N/A";
        const agent = document.getElementById("agent").value || "N/A";
        const appname = document.getElementById("appname").value || "N/A";
        const blNumber = document.getElementById("blnumber").value || "N/A";
        const vname = document.getElementById("vname").value || "N/A";
        const vreport = document.getElementById("vreport").value || "N/A";
        const chassis = document.getElementById("chassis").value || "N/A";
        const ims = document.getElementById("ims").value || "N/A";
        const cnumber = document.getElementById("cnumber").value || "N/A";
        const ppnumber = document.getElementById("ppnumber").value || "N/A";

        // Set the retrieved values in the confirmation fields
        document.getElementById("confirmDate").textContent = `${selectedDateText} (${appointmentType})`;
        document.getElementById("confirmTime").textContent = selectedTimesText;
        document.getElementById("confirmTRN").textContent = trn;
        document.getElementById("confirmFirstName").textContent = firstName;
        document.getElementById("confirmLastName").textContent = lastName;
        document.getElementById("confirmEmail").textContent = email;
        document.getElementById("confirmPhone").textContent = `${countrycode} ${mobileNumber}`;
        document.getElementById("confirmAgent").textContent = agent;
        document.getElementById("confirmAppName").textContent = appname;
        document.getElementById("confirmAppointmentType").textContent = appointmentType;
        document.getElementById("confirmBLNumber").textContent = blNumber;
        document.getElementById("confirmVesselName").textContent = vname;
        document.getElementById("confirmVesselReportedDate").textContent = vreport;
        document.getElementById("confirmChassis").textContent = chassis;
        document.getElementById("confirmIMS").textContent = ims;
        document.getElementById("confirmContainerNumber").textContent = cnumber;
        document.getElementById("confirmPPNumber").textContent = ppnumber;
    }



    function validateInfo() {
        return ["fname", "lname", "email", "phone4"].every(id => document.getElementById(id).value.trim());
    }

    async function loadAppointmentTypes() {
        try {
            const { data } = await axios.get('/appointment_types');
            const appointmentTypeSelect = document.getElementById('appointmentType');
            data.forEach(type => {                
                const option = document.createElement('option');
                option.value = type.id;
                option.text = type.name;
                option.setAttribute('data-calendar-id', type.calendarIDs[0]);
                appointmentTypeSelect.add(option);

                
                // document.getElementById('calendarID').value = type.calendarIDs[0]
                

            });
        } catch (error) {
            console.error('Error loading appointment types:', error);
        }
    }



    async function loadAppointmentTypes() {
    try {
  

        storedAppointmentTypeID = document.getElementById("appointmentType").value,
storedCalendarID = selectedOption.getAttribute('data-calendar-id');

        const { data } = await axios.get('/appointment_types');
        const appointmentTypeSelect = document.getElementById('appointmentType');

        // Filter and add only the matching stored appointment type
        data.forEach(type => {
            if (type.id === storedAppointmentTypeID && type.calendarIDs.includes(storedCalendarID)) {
                const option = document.createElement('option');
                option.value = type.id;
                option.text = type.name;
                option.setAttribute('data-calendar-id', storedCalendarID);
                option.selected = true; // Pre-select the option
                appointmentTypeSelect.add(option);
                
                // Optionally, disable the select to prevent changes
                appointmentTypeSelect.disabled = true;
            }
        });
    } catch (error) {
        console.error('Error loading appointment types:', error);
    }
}


    // Add this function to define renderAvailableDates
function renderAvailableDates(data) {
    availableDates = data.map(item => item.date); // Extract dates from the response and store in availableDates array
    generateCalendar(); // Re-render the calendar with updated available dates
}


    async function fetchAvailableDates() {
        const appointmentTypeID = document.getElementById('appointmentType').value;
        const month = monthNames[currentMonth];
        if (!appointmentTypeID) return;

        try {
            const { data } = await axios.get(`/dates_availability`, { params: { appointmentTypeID, month } });
            renderAvailableDates(data);
        } catch (error) {
            console.error('Error fetching available dates:', error);
        }
    }

        // Function to fetch available times based on the selected date
        async function fetchAvailableTimes(date, appointmentTypeID) {
        try {
            const response = await axios.get(`/time_availability`, {
                params: { appointmentTypeID, date }
            });

            renderAvailableTimes(response.data);
        } catch (error) {
            console.error("Error fetching available times:", error.message);
        }
    }

        //============================ Function to render available times on the page

        function renderAvailableTimes(times) {
    console.log("available Timeslots -> ", times);
    const timeContainer = document.getElementById("timeSlots");
    timeContainer.innerHTML = "";

    if (times.length === 0) {
        timeContainer.textContent = "No available times for this date.";
        return;
    }

    times.forEach(async (timeObj) => {
        // Use timeObj.time (which includes both date and time) for comparison
        const formattedTime = new Date(timeObj.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        console.log("formatted time ", formattedTime);

        const timeSlotDiv = document.createElement("div");
        timeSlotDiv.classList.add("time-slot");
        document.getElementById('timeSlotsSection').style.display = 'block';
        timeSlotDiv.textContent = formattedTime;

        // Check availability for this time slot
        const availabilityResponse = await checkAvailability(selectedDate, formattedTime, timeObj.time);

        if (availabilityResponse) {
            // Now compare the full datetime (date + time)
            const timeSlot = availabilityResponse.find(slot => {
                const slotDate = new Date(slot.datetime);
                const formattedSlotTime = slotDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                return formattedSlotTime === formattedTime && slot.datetime === timeObj.time; // Compare both time and full datetime
            });

            if (timeSlot && timeSlot.valid) {
                // Available time slot
                timeSlotDiv.style.border = "2px solid green";
                timeSlotDiv.onclick = function() {
                    toggleTimeSelection(formattedTime, timeObj.time);
                };

                // Check if this time matches the booking time and pre-select it
                if (timeObj.time === booking.booking_times) {
                    timeSlotDiv.classList.add("selected-time");
                    selectedTimes.push(formattedTime);
                    selectedDateTimes.push(timeObj.time);
                }

            } else {
                // Unavailable time slot
                timeSlotDiv.style.border = "2px solid red";
                timeSlotDiv.style.pointerEvents = 'none'; // Disable click
                const unavailableText = document.createElement('div');
                unavailableText.textContent = timeSlot ? timeSlot.message : "Unavailable";
                unavailableText.style.color = 'red';
                timeSlotDiv.appendChild(unavailableText);
            }
        }

        timeContainer.appendChild(timeSlotDiv);
    });
}


        function renderAvailableTimesold(times) {


            console.log("available Timeslots -> ",times)
                        const timeContainer = document.getElementById("timeSlots");                     
                        timeContainer.innerHTML = "";

                        if (times.length === 0) {
                            
                            timeContainer.textContent = "No available times for this date.";
                            return;
                        }        
                 


                      
      
                       

                         times.forEach(async (timeObj) => {
    // Use timeObj.time (which includes both date and time) for comparison
    const formattedTime = new Date(timeObj.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    console.log("formatted time ", formattedTime);

    const timeSlotDiv = document.createElement("div");
    timeSlotDiv.classList.add("time-slot");
    document.getElementById('timeSlotsSection').style.display = 'block';
    timeSlotDiv.textContent = formattedTime;

    // Check availability for this time slot
    const availabilityResponse = await checkAvailability(selectedDate, formattedTime, timeObj.time);

    if (availabilityResponse) {
        // Now compare the full datetime (date + time)
        const timeSlot = availabilityResponse.find(slot => {
            const slotDate = new Date(slot.datetime);
            const formattedSlotTime = slotDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            return formattedSlotTime === formattedTime && slot.datetime === timeObj.time; // Compare both time and full datetime
        });

        if (timeSlot && timeSlot.valid) {
            // Available time slot
            timeSlotDiv.style.border = "2px solid green";
            timeSlotDiv.onclick = function() {
                toggleTimeSelection(formattedTime,timeObj.time);
            };
        } else {
            // Unavailable time slot
            timeSlotDiv.style.border = "2px solid red";
            timeSlotDiv.style.pointerEvents = 'none'; // Disable click
            const unavailableText = document.createElement('div');
            unavailableText.textContent = timeSlot ? timeSlot.message : "Unavailable";
            unavailableText.style.color = 'red';
            timeSlotDiv.appendChild(unavailableText);
        }
    }

    timeContainer.appendChild(timeSlotDiv);
});


                         


    }


    async function checkAvailability(selectedDate, formattedTime , datetime) {
    try {
        // Make a POST request to check availability
        const response = await fetch('/check_times', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                date: selectedDate,
                time: formattedTime,
                appointmentTypeID: appointmentTypeID,
                calendarID: calendarId,
                datetime:datetime
            })
        });

        const data = await response.json();
        if (response.ok) {
            return data;
        } else {
            console.error("Error checking time:", data);
            return null;
        }
    } catch (error) {
        console.error("Error with the request:", error);
        return null;
    }
}



function generateCalendar() {
    const daysContainer = document.getElementById("calendarDays");
    const monthYearLabel = document.getElementById("monthYear");
    monthYearLabel.textContent = `${monthNames[currentMonth]} ${currentYear}`;

    const date = new Date(currentYear, currentMonth, 1);
    const firstDay = date.getDay();
    const lastDate = new Date(currentYear, currentMonth + 1, 0).getDate();
    let daysHTML = "";

    for (let i = 0; i < firstDay; i++) daysHTML += `<div class="calendar-day"></div>`;
    for (let i = 1; i <= lastDate; i++) {
        const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
        const isAvailable = availableDates.includes(formattedDate);
        const isSelected = formattedDate === booking.booking_date;

        daysHTML += `<div class="calendar-day ${isAvailable ? 'available' : 'disabled'} ${isSelected ? 'selected-day' : ''}" 
                      onclick="${isAvailable ? `selectDate(${i})` : ''}">
                      ${i}</div>`;
    }
    daysContainer.innerHTML = daysHTML;

    // Automatically load times if the booking date matches the current month/year
    if (currentYear === new Date(booking.booking_date).getFullYear() && currentMonth === new Date(booking.booking_date).getMonth()) {
        selectedDate = booking.booking_date;
        fetchAvailableTimes(selectedDate, document.getElementById('appointmentType').value);
    }
}


    function setupEventListeners() {
        document.getElementById('appointmentType').addEventListener('change', fetchAvailableDates);
        document.getElementById('prevMonthBtn').addEventListener('click', prevMonth);
        document.getElementById('nextMonthBtn').addEventListener('click', nextMonth);
    }


    function selectDate(day) {
    // Format the selected date to "YYYY-MM-DD" (e.g., "2024-11-11") for consistency with the server request
    const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    selectedDate = formattedDate;

    // Deselect all days and highlight the selected day
    document.querySelectorAll(".calendar-day").forEach(dayEl => dayEl.classList.remove("selected-day"));
    document.querySelectorAll(".calendar-day")[new Date(currentYear, currentMonth, 1).getDay() + day - 1].classList.add("selected-day");

    const appointmentTypeID = document.getElementById('appointmentType').value;
    fetchAvailableTimes(selectedDate, appointmentTypeID);
}


    function generateTimeSlots() {
        return;
        const timeSlotsContainer = document.getElementById("timeSlots");
        ["09:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "01:00 PM", "02:00 PM", "03:00 PM"].forEach(slot => {
            const timeSlotDiv = document.createElement("div");
            timeSlotDiv.classList.add("time-slot");
            timeSlotDiv.textContent = slot;
            timeSlotDiv.onclick = () => toggleTimeSelection(slot);
            timeSlotsContainer.appendChild(timeSlotDiv);
        });
    }

    function toggleTimeSelection(slot, datetime) {
    // If the slot is already selected, do nothing
    if (selectedTimes.length > 0) {
        // Deselect previously selected slot and datetime
        selectedTimes = [];
        selectedDateTimes = [];
    }

    // Add the new slot and datetime
    selectedTimes.push(slot);
    selectedDateTimes.push(datetime);

    // Update the selected-time class for each time slot element
    document.querySelectorAll(".time-slot").forEach(el => {
        // Use trim() to remove spaces that may affect matching
        if (selectedTimes.includes(el.textContent.trim())) {
            el.classList.add("selected-time");
        } else {
            el.classList.remove("selected-time");
        }
    });
}




                    function toggleTimeSelectionformultiple(slot,datetime) {
                            
                                // Check if the slot is selected or not
                                const index = selectedTimes.indexOf(slot);
                                const index1 = selectedDateTimes.indexOf(datetime);
                                
                            
                                if (index > -1) {
                                    // If it is selected, remove it
                                    selectedTimes.splice(index, 1);
                                    selectedDateTimes.splice(index1,1);
                                } else {
                                    // If it is not selected, add it
                                    selectedTimes.push(slot);
                                    selectedDateTimes.push(datetime);
                                }

                                // Update the selected-time class for each time slot element
                                document.querySelectorAll(".time-slot").forEach(el => {
                                    // Use trim() to remove spaces that may affect matching
                                    if (selectedTimes.includes(el.textContent.trim())) {
                                        el.classList.add("selected-time");
                                    } else {
                                        el.classList.remove("selected-time");
                                    }
                                });
                }






    function prevMonth() {
        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;
        currentYear -= (currentMonth === 11) ? 1 : 0;
        fetchAvailableDates();
    }

    function nextMonth() {
        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;
        currentYear += (currentMonth === 0) ? 1 : 0;
        fetchAvailableDates();
    }







    //--------------- Validation Start =======================================


    

    function validateCurrentTab() {  
    const inputs = tabs[currentTab].querySelectorAll('input, select, textarea');
    let isValid = true;

    // Remove previous error messages and borders
    tabs[currentTab].querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
    inputs.forEach(input => {
        input.style.border = ''; // Reset borders
    });

    const processedGroups = [];

    inputs.forEach(input => {


          //-----------start Remove Red border and error on enter something ------------
        // Remove error message and border immediately on valid input change
        input.addEventListener('input', () => {
            if (input.value.trim() || input.checked) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });

        if (input.type === 'text' || input.type === 'textarea' || input.tagName.toLowerCase() === 'select') {
        input.addEventListener('input', () => {
            if (input.value.trim()) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });
    }

    if (input.type === 'checkbox' || input.type === 'radio') {
        input.addEventListener('change', () => {
            if (input.checked) {
                input.style.border = ''; // Remove red border
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');
                const error = container.querySelector('.error-message');
                if (error) error.remove(); // Remove error message for the group
            }
        });
    }

    //-----------End Remove Red border and error on enter something ------------
    

        // Only validate fields that have the "required" attribute
        // if (input.required) {
            // For checkboxes and radio buttons, validate the group as a whole
            if ((input.type === 'checkbox' || input.type === 'radio') &&  input.id !== 'select-all' && input.id !== 'notloc' ){
                const name = input.name;
                console.log("checkbox names ",name)

                // Skip if this group has already been validated
                if (processedGroups.includes(name)) return;
                processedGroups.push(name);

                const group = tabs[currentTab].querySelectorAll(`input[name="${name}"]`);
                const checked = [...group].some(el => el.checked);
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');

                // Show a single error message if none are selected
                if (!checked) {
                    isValid = false;
                    group.forEach(input => {
                        input.style.border = '2px solid red'; // Highlight each checkbox/radio in the group
                    });
                    addErrorMessage(container, "Please select at least one option.");
                }
            } else {
                // Check for required fields that are empty (normal inputs)
                if (input.required && !input.value.trim()) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for required fields
                    addErrorMessage(input.parentNode, "This Field is Required"); // Add error message under normal inputs
                }
            }

            // Check if file input has a file selected (excluding specific cases)
            if (input.type === 'file' && input.required) {
                if (!input.files.length) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for invalid file input
                    addErrorMessage(input.parentNode, "Please upload a file.");
                }
            }

            // Special case: Validate hidden input storing job location data
            if (input.name === 'job_preferred_location' && input.required) {
                const selectedLocations = input.value.trim(); // Hidden field value
                const container = input.closest('.form-group');
                if (!selectedLocations) {
                    isValid = false;
                    addErrorMessage(container, "Please select at least one job location.");
                    input.style.border = '2px solid red';
                }
            }
        // }
    });

    return isValid;
}

function addErrorMessage(container, message) {
    // Check if error message already exists to avoid duplicate
    if (!container.querySelector('.error-message')) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.style.color = 'red';
        errorMessage.style.fontSize = '12px';
        errorMessage.innerText = message;
        container.appendChild(errorMessage);
    }
}






    //---------------- Validation End ========================================== 





// Function to handle the booking confirmation with OTP verification and final confirmation
async function confirmBooking() {
    const email = document.getElementById("email").value;


    const loggeduserData = document.getElementById('loggeduserData').value;
const loggeduser = loggeduserData ? JSON.parse(loggeduserData) : null;

        if (typeof loggeduser !== 'undefined' && loggeduser) {
        // If logged in, directly confirm booking without OTP
        await directConfirmBooking(email);
        return;
    }

    // Initial SweetAlert OTP input screen with loader
    Swal.fire({
        title: "Kingston Booking",
        html: `
            <p style="color: green;">Sending OTP to ${email}...</p>
            <div class="spinner-border text-success" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        `,
        showConfirmButton: false,
        allowOutsideClick: false,
        allowEscapeKey: false,
        showCloseButton: true
    });

    try {
        // Send OTP request to the server
        const response = await fetch('/getBookingOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
        });
        const result = await response.json();

        if (!result.exists) {
            Swal.update({
                html: `<p style="color: red;">Failed to send OTP. <button id="resendBtn" class="btn btn-link">Resend OTP</button></p>`
            });
            document.getElementById('resendBtn').onclick = confirmBooking; // Resend OTP
            return;
        }

        // Show OTP input form with message
        Swal.update({
            html: `
                <p style="color: green;">OTP sent to ${email}</p>
                <input type="text" id="otpInput" class="swal2-input" placeholder="Enter OTP">
                <div id="otpErrorMsg" style="color: red; display: none;">Invalid OTP! Enter correct OTP or try resending.</div>
                <button id="verifyBtn" class="swal2-confirm swal2-styled" style="margin-right:10px;">Verify OTP</button>
                <button id="resendOtpBtn" class="swal2-cancel swal2-styled">Resend OTP</button>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
        });

        document.getElementById('otpInput').value = result.otp; // For testing purposes only
        document.getElementById('verifyBtn').onclick = verifyOTP;
        document.getElementById('resendOtpBtn').onclick = confirmBooking;

    } catch (error) {
        Swal.fire('Error', 'Failed to send OTP. Please try again later.', 'error');
    }
}



// Function to verify the OTP
async function verifyOTP() {
    const email = document.getElementById("email").value;
    const otp = document.getElementById("otpInput").value;

    try {
        const response = await fetch('/verifyOTP', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, otp })
        });
        const result = await response.json();

        if (!result.success) {
            // Show error in red on the same SweetAlert modal
            document.getElementById('otpErrorMsg').style.display = 'block';
            return;
        }

        // OTP verified, show booking confirmation loader
        Swal.update({
            html: `
                <p style="color: green;">OTP Verified! Confirming your booking...</p>
                <div class="spinner-border text-success" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
        });

        await directConfirmBooking(email);  // Proceed to direct booking after OTP verification

    } catch (error) {
        Swal.fire('Error', 'Failed to Verify OTP Please try again later.', 'error');
    }
}

// Function to handle direct booking confirmation
async function directConfirmBooking(email) {
    try {


        const formData = {
                trn: document.getElementById("trn").value,
                firstname: document.getElementById("fname").value,
                lastname: document.getElementById("lname").value,
                contact: document.getElementById("phone4").value,
                country_code: document.getElementById("countrycode").value,
                user_email: document.getElementById("email").value,
                agent_forwarder: document.getElementById("agent").value,
                appointment_by: document.getElementById("appname").value,
                appointment_type: document.getElementById("apppersonal").value,
                bol_number: document.getElementById("blnumber").value,
                vessel_name: document.getElementById("vname").value,
                vessel_reported_date: document.getElementById("vreport").value,
                chassis_number: document.getElementById("chassis").value,
                declaration_number: document.getElementById("ims").value,
                container_number: document.getElementById("cnumber").value,
                number_of_items: document.getElementById("ppnumber").value,
                booking_date: selectedDate,  // Add the selected date
                booking_times: selectedTimes, // Add the selected times
                appointmentTypeID: document.getElementById("appointmentType").value,
                calendarID: document.getElementById("calendarId").value,
                selectedDateTimes :selectedDateTimes,
                booking_id:document.getElementById("booking_id").value,
                booking_datetime:document.getElementById("booking_datetime").value
            };




        const bookingResponse = await fetch('/superadmin/rescheduleBooking', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

        const bookingResult = await bookingResponse.json();

            if (bookingResult.success) {
                Swal.fire({
                    title: "Kingston Booking",
                    text: "Your appointment has been rescheduled successfully.",
                    icon: "success",
                    confirmButtonText: "View Booking"
                }).then(() => {
                    window.location.href = '/superadmin/appointments';
                });
            } else {
                
                // Handle error if not successful
                Swal.fire({
                    title: "Booking Error",
                    text: bookingResult.message || 'Failed to confirm booking. Please try again later.',
                    icon: "error",
                    confirmButtonText: "Retry"
                });
            }



    } catch (error) {
        console.log("ajax error ",error)
        Swal.fire('Error', 'Internal Server Error, Please try again later.', 'error');
    }
}





</script>










