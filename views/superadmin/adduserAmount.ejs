


<%- include ("superheader.ejs") %>
<%- include ("supersidebar.ejs") %>

      <!-- Sidebar chat end-->
      <div class="content-wrapper">
         <!-- Container-fluid starts -->
         <!-- Main content starts -->
         <div class="container-fluid">
             <div class="row ">
                <div class="col-lg-12">
                    <div class="bread-boxes">
                        <ol class="breadcrumb">
                            <li><a href="/superadmin"> Home </a></li>
                               <li class="active"><a href="#"> /  Add  User Amount  </a></li>
                            <!-- <li class="active"> / Add Video </li>         -->
                          </ol>
                    </div>
                </div>
        
            </div>

            <!-- 1-3-block row start -->
            <div class="row">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
                    <div class="credit-form">
                         <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                 <a href="#">  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left yellow_color"></i> Add  User Amount </h6> </a>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="Owner_view_Owner.html"><i class="fa fa-user  mr-1"></i> View Owner   </a> -->
                  </div>
                  </div>


                  <form id="kilfrom" method="post" action="/superadmin/adduserAmount">


                     <div class="user-form text-center">
                        <div class="fully-credits">

                           <div class="credit-card">
                               <h3><%= user.first_name %> <%= user.last_name %>'s Wallet </h3>
                               <span><%= user.user_wallet %> <%= currency %></span>
                           </div>

                           <input type="hidden" name="user_id" value="<%= user.user_id %>">
                           <div class="card-detail">
                               <label>Add Wallet Amount</label>
                               <input type="text" name="new_credit_amount" class="form-control" id="exampleInputfirst" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" placeholder="Enter Amount" required >
                           </div>

                           <div class="credit-btns">
                              <button type="submit" onclick="validateForm('#kilfrom')" class="btn btn-success waves-effect waves-light m-r-30">Add Credit </button>
                           </div>

                           </div>
                       </div> 



                  </form>
        

       <!-- alert msgs -->
       <% if ( output.includes('successfully') ) { %>
         <p class="success-text"><%= output %></p>
   <% } else { %>
         <p class="error-text"><%= output %></p>
   <% } %>
<!-- /alert msgs -->  


                    </div>
                    <!--  -->
             <div class="card-tables">
               <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left"></i> View   User Amount </h6>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="user_addUser.html"><i class="fa fa-user  mr-1"></i> Add User  </a> -->
                  </div>
                  </div>
                  <div class="user-form">



                     <div class="table-responsive box">
                        <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                            <div class="row">
                                <table id="example" class="table table-striped table-bordered dataTable no-footer" role="grid" aria-describedby="example_info">
                                    <thead>
                                        <tr role="row">
                                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="S.no: activate to sort column ascending" style="width: 10.0781px;">S.no</th>
                                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Closing Balance: activate to sort column ascending" style="width: 50.0781px;">User's Name</th>
                                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Amount: activate to sort column ascending" style="width: 50.0781px;">Amount (Credit/Debit)</th>
                                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Closing Balance: activate to sort column ascending" style="width: 50.0781px;">Closing Balance</th>
                                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Payment Description: activate to sort column ascending" style="width: 90.0781px;">Payment Description</th>
                                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Date / Time: activate to sort column ascending" style="width: 80.0781px;">Date / Time</th>
                                            <!-- <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending" style="width: 80.156px;">Action</th> -->
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% transactions.forEach(function(transaction, index) { %>
                                        <tr>
                                            <td><%= index + 1 %></td>
                                         

                                          <td> <%= user.first_name %> <%= user.last_name %> </td>
                                            <td>
                                             <% if (transaction.transaction_type === 'Deposite') { %>
                                                 <span style="color: #377300; padding: 5px 10px; border-radius: 12px;">
                                                     + <%= transaction.deposit_amount %> <%= currency %> 
                                                 </span>
                                             <% } else { %>
                                                 <span style="color: red; padding: 5px 10px; border-radius: 12px;">
                                                     - <%= transaction.withdrawal_amount %> <%= currency %>
                                                 </span>
                                             <% } %>
                                         </td>
                                         

                                            <td> 
                                       
                                              <%= transaction.current_wallet_amount %> <%= currency %>
                                       
                                          </td>
                                            <td>
                                                <% if (transaction.transaction_type === 'Deposite') { %>
                                                    Amount Added From <%= transaction.transaction_mode %>
                                                <% } else { %>
                                                    Amount Withdrawn to <%= transaction.transaction_mode %>
                                                <% } %>
                                            </td>
                                            <td><%= new Date(transaction.created_at).toLocaleDateString() %> <span><%= new Date(transaction.created_at).toLocaleTimeString() %></span></td>
                                            <!-- <td>
                                                <a href="#"><i class="fa fa-edit icon-2"></i></a>
                                                <a href="#"><i class="fa fa-trash icon-5"></i></a>
                                            </td> -->
                                        </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    
                  
                   </div>
                     </div>
                 </div> 
               </div>
            </div>
            <!-- 1-3-block row end -->

             <!-- row start  -->
             <div class="row">
               <div class="col-lg-12">
                 <div class="card footers">
                     <div class="card-header footer text-center">
                         Â© Copyright 2024 <strong><span>Car Rental </span></strong>.
                          All Rights Reserved   Designed & Developed by 
                          <a href="https://cyberimpulses.com/" target="_blank">CISS</a>
                       </div>
                  </div>
               </div>
            </div>
                <!-- ROW END -->
         </div>
         <!-- Main content ends -->
         <!-- Container-fluid ends -->
      </div>
   </div>

   <%- include ("superfooter.ejs") %>


   <script>






   //-------------- Comman Kilvish Function for input validation start ---------------------
   
   
   
   
   function validateRequiredFields(kil) {

const form = document.querySelector(`${kil}`); 
const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
let isValid = true;



// Remove previous error messages and borders
form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
inputs.forEach(input => {
    input.style.border = ''; // Reset borders
});

inputs.forEach(input => {
    if (!input.value.trim()) {  // If the required field is empty
        isValid = false;
        input.style.border = '2px solid red'; // Set border to red for empty required fields
        addErrorMessage(input.parentNode, "This Field is Required."); // Add error message
    }
});

return isValid;
}

// Add real-time validation for each required field
function addRealTimeValidation(kil) {
const form = document.querySelector(`${kil}`); 
const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');

inputs.forEach(input => {
 // Listen for 'input' and 'change' events on required fields
 input.addEventListener('input', function () {
     if (input.value.trim()) {
         // If the input is filled, remove red border and error message
         input.style.border = '';
         const errorMessage = input.parentNode.querySelector('.error-message');
         if (errorMessage) {
             errorMessage.remove();
         }
     }
 });
 input.addEventListener('change', function () {
     if (input.value.trim()) {
         // For select fields, check if an option is selected
         input.style.border = '';
         const errorMessage = input.parentNode.querySelector('.error-message');
         if (errorMessage) {
             errorMessage.remove();
         }
     }
 });
});
}




// Combined validation function
function validateForm(kil) {

if(!validateRequiredFields(kil)){
  event.preventDefault();
}
}

// Add real-time validation once the document is loaded
document.addEventListener('DOMContentLoaded', () => {
addRealTimeValidation('#kilfrom');  // Activate real-time validation
});


function validateKilvishInput(event) {
const inputField = event.target;

// General valid character sets
// let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;

let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 

// Define allowed image file types
const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];

// Use parentNode for regular inputs, container for checkboxes
const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
const inputParent = inputField.parentNode;

// Remove previous error message and border
let errorMessage = inputParent.querySelector('.error-message');
if (errorMessage) errorMessage.remove();
inputField.style.border = ''; // Reset border

// Custom validations based on input name
if (inputField.name === 'description') {
    validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;

    // Check length limit
    if (inputField.value.length > 400) {
        addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
        inputField.style.border = '2px solid red';
        inputField.value = inputField.value.substring(0, 400); // Truncate the input
        return;
    }
} else if (inputField.name === 'new_credit_amount' || inputField.name === 'type_insurance_price') {
    // maximum 4 digit before decimal and 2 after decimal

    validCharacters = /^\d{0,4}(\.\d{0,2})?$/;

    
                                    // Validate input characters
                        const inputValue = inputField.value; // Store the input value for reuse

                        if (!validCharacters.test(inputValue)) {
                            // Check if the input has more than 4 digits before the decimal
                            if (inputValue.split('.')[0].length > 4) {
                                addErrorMessage(inputParent, 'Maximum 4 digits before the decimal allowed!');
                                inputField.style.border = '2px solid red';
                                inputField.value = ''; 
                                return; // Exit the function after handling the error
                            }

                            // Check if the input has more than 2 digits after the decimal
                            if (inputValue.includes('.') && inputValue.split('.')[1].length > 2) {
                                addErrorMessage(inputParent, 'Only 2 decimal places are allowed!');
                                inputField.style.border = '2px solid red';
                                inputField.value = ''; 
                                return; // Exit the function after handling the error
                            }

                            // If it reaches here, it means there's an invalid character
                            addErrorMessage(inputParent, 'Invalid character entered!');
                            inputField.style.border = '2px solid red';
                            // inputField.value = ''; // Uncomment if you want to clear the input field
                            return; // Exit the function after handling the error
                        } else {
                            // Check if the number exceeds 4 digits before the decimal
                            if (inputValue.includes('.') && inputValue.split('.')[0].length > 4 && event.type === 'change') {
                                addErrorMessage(inputParent, 'Maximum 4 digits before the decimal allowed!');
                                inputField.style.border = '2px solid red';
                                inputField.value = ''; 
                                return; // Exit the function after handling the error
                            }
                        }




}else if (inputField.name === 'age') {
    // Only numbers allowed, between 7 and 10 digits
    validCharacters = /^\d{2,2}$/;
      // Custom validation: Ensure age is 18 or above
          if (inputField.value && parseInt(inputField.value) < 18 && event.type === 'change') {
              addErrorMessage(inputParent, 'Age must be 18 or above!');
              inputField.style.border = '2px solid red';
              inputField.value = ''; // Clear the input field if age is below 18
              return;
          }else if(inputField.value && parseInt(inputField.value) < 18 ){
            addErrorMessage(inputParent, 'Age must be 18 or above!');
              inputField.style.border = '2px solid red';                 

          }
        }else if (inputField.name === 'model_name' || inputField.name ==='models[]') {
           // Only numbers allowed, between 7 and 10 digits
           validCharacters = /^[a-zA-Z0-9]{4,20}$/;
        }else if(inputField.type ==='email'){
           validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
        }else if(inputField.type ==='password'){

                        const hasSequentialChars = (password) => {
                             console.log("passworddddddd -", password)
                             const length = password.length;
                             
                             // Check for ascending sequences (e.g., "123", "abc")
                             for (let i = 0; i < length - 3; i++) {
                                if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                      password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                      password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                      return true; // Ascending sequence found
                                }
                             }

                             // Check for descending sequences (e.g., "321", "cba")
                             for (let i = 0; i < length - 3; i++) {
                                if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                      password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                      password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                      return true; // Descending sequence found
                                }
                             }
                             
                             return false; // No sequential characters
                          };

           

           validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;


                                      // Check if password meets the required pattern
                       if (!validCharacters.test(inputField.value)) {
                          addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                          inputField.style.border = '2px solid red';
                          if (event.type === 'change') {   inputField.value = '';  }
                          return; // Stop further validation
                       }

                       // Check for sequential characters
                       if (hasSequentialChars(inputField.value)) {
                          addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                          inputField.style.border = '2px solid red';
                             if (event.type === 'change') {   inputField.value = '';  }
                          return; // Stop further validation
                       }


                       // Function to check for sequential characters in the password
             
                                               



        }
          

        



// Handle file input validation
if (inputField.type === 'file') {
    const file = inputField.files[0];
    if (file && !validImageTypes.includes(file.type)) {
        addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
        inputField.value = ''; // Clear the file input field
        inputField.style.border = '2px solid red';
        return;
    }
} else {
    // For normal text/number input validation
    if (event.type === 'keyup') {
        if (!validCharacters.test(inputField.value)) {
            addErrorMessage(inputParent, 'Invalid character entered!');
            inputField.style.border = '2px solid red';
            
        }
    }

    if (event.type === 'change') {
        if (!validCharacters.test(inputField.value)) {
            // On invalid input during change event, clear the field and show an error
            inputField.value = ''; // Clear invalid input
            addErrorMessage(inputParent, 'Invalid character or format!');
            inputField.style.border = '2px solid red';
        } else {
            // Clear error when value is corrected
            inputField.style.border = '';
            if (errorMessage) errorMessage.remove();
        }
    }
}
}

// Function to display error messages under the input field or container for checkboxes
function addErrorMessage(parent, message) {
if (!parent.querySelector('.error-message')) {
    const errorMessage = document.createElement('div');
    errorMessage.className = 'error-message';
    errorMessage.style.color = 'red';
    errorMessage.style.fontSize = '12px';
    errorMessage.innerText = message;
    parent.appendChild(errorMessage);
}
}





//-------------- Comman Kilvish Function for input validation End ---------------------




   </script>
