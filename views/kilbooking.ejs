

<%- include ("header.ejs") %>



<style>

div#error-msg {
    padding: 10p;
    margin-left: 15px !important;
}


.calendar-day-name {
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    text-transform: uppercase;
    font-size: 16px;
    height: 50px;
    width: 50px;
    border: 1px solid #ddd;
    background-color: #f0f0f0;
}
 


.col-md-6 {
    padding-top: 10px !important;
}


div:where(.swal2-container) .swal2-html-container {
    font-size: 1.3em !important;

}




.time-info {
    font-family: Arial, sans-serif;
    background: #f8f9fa; /* Light gray background for a professional look */
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px 20px;
    max-width: 400px;
    margin: 20px auto;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.info-block {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.info-block:last-child {
    margin-bottom: 0; /* No margin on the last block */
}

.label {
    font-weight: bold;
    color: #333; /* Dark text for readability */
    font-size: 14px;
}

.value {
    color: #007bff; /* Blue for emphasis */
    font-size: 14px;
}




.select2-container--default .select2-selection--single .select2-selection__rendered {
    width: 430px !important;
}




.form-divider {
  background-color: #f1f1f1;
  padding: 20px;
  text-align: center;
  margin-bottom: 20px;
  border-radius: 8px;
}

.form-divider h1 {
  font-size: 24px;
  color: #333;
}


</style>

<main class="main">
    <!-- Stats Section -->
    <section id="stats" class="section light-background" style="background-image: url('assets/img/kwl-bg.jpg'); background-size: inherit; background-position: inherit;">
        <div class="container section-title" data-aos="fade-up" style="padding-bottom: 0px;">
            <h2>Schedule Your Appointment</h2>
            <p>Effortlessly book your cargo pickup appointments and ensure a smooth collection process.</p>
        </div>
    </section>
    <!-- /Stats Section -->

    
    <!-- calendar Section -->
    <section class="appointment section">
        <div class="container">
            <div class="row">
                <div class="col-md-1"></div>
                <div class="col-md-10 colcontainer">

                    <!-- Tab Headers -->
                    <div class="tabs">
                        <div class="tab active" onclick="showTab(0)">1. CHOOSE APPOINTMENT</div> &nbsp;
                        <div class="tab">2. CONTACT INFORMATION</div>&nbsp;
                        <div class="tab">3. APPOINTMENT PREVIEW</div>
                    </div>

                    <!-- Tab Contents -->
                    <div id="tabContents">
                        <!-- Choose Appointment Tab -->
                        <div class="tab-content active">
                            <div class="row">
                                <div class="col-md-6">



                                    <label>* Appointment Category</label>
                                        <select id="appointmentCategory" class="form-control" required style="appearance: auto;">
                                            <option value="">Select Category</option>
                                            <option value="warehouse">Warehouse/Personal Effects Appointment</option>
                                            <option value="motor">Motor Vehicle Appointment</option>
                                        </select>
                                        <br>

                                    <label>* Appointment Type</label>
                   
                                    <select name="option1" id="appointmentType" class="form-control select2" required style="appearance: auto;">
                                        <option value="">Select Service</option>
                                    </select>
                                    <br>
                                    <label>Select Date</label>
                                    <!-- Calendar Section -->
                          
                                    <div class="calendar">
                                        <div class="calendar-header">
                                            <span onclick="prevMonth()" class="calendaricon">&#706;</span>
                                            <div id="monthYear">October 2024</div>
                                            <span onclick="nextMonth()" class="calendaricon">&#707;</span>
                                        </div>
                                        <div class="calendar-days" id="calendarDays">
                                            <!-- Calendar days will be generated by JavaScript -->
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-6">
                                    <div class="time-info">
                                        <div class="info-block">
                                            <span class="label">Selected Date:</span>
                                            <span id="cal_date" class="value"></span>
                                        </div>
                                        <div class="info-block">
                                            <span class="label">Time Zone:</span>
                                            <span id="timeZone" class="value">America/Jamaica</span>
                                        </div>
                                    </div>

                                    <div class="time-slots" id="timeSlotsSection" style="display:none;">

                                        <label>* Number of Slots</label>
                                        <input type="number" id="slotUnit" class="form-control" value="0" placeholder="Enter number of slots" min="1" required>
                                        <br>
                                        


                                   <label>Select time</label>
                                        <div id="timeSlots">
                                            <!-- Time slots will be dynamically generated by JavaScript -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="button-container">
                                <center><button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button></center>
                            </div>
                        </div>

                        <!-- Contact Information Tab -->
                        <div class="tab-content">


                            <div id="formsContainer">
                                <!-- Multiple forms will be inserted here dynamically -->
                            </div>
                       
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-1)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button>
                                </center>
                            </div>
                        </div>

                        <!-- Confirmation Tab -->
                        <div class="tab-content">
                          
                            <div id="previewContainer"></div>

                        
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-1)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="confirmBooking()">Submit</button>
                                </center>
                            </div>
                        </div>


                    </div>

                </div>
                <div class="col-md-1"></div>
            </div>
        </div>
    </section>
    <!-- calendar Section -->
    <input type="hidden" id="loggeduserData" value="<%= JSON.stringify(loggeduser) %>">

</main>
    
<%- include ("footer.ejs") %>




<script>

    //=============================== start Globle Vriables ===============================
    let currentTab = 0;
    let tabs = document.querySelectorAll('.tab-content');
    let selectedDate = null;
    let selectedTimes = [];
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    let currentMonth = moment().month();
    let currentYear = moment().year();
    let availableDates = []; // Array to store available dates
    let calendarId =0
    let appointmentTypeID =0
    let typename = ''
    let selectedDateTimes=[]
    let selectedTimezone = 'America/Jamaica';
    let globaltimes = [];
    let type_cat;


    const agentList = [
        "AEROMARINE JAMAICA/GOOD N LOGISTICS LTD", "A.E.PARNELL & CO. LTD", "AJ'S LOGISTICS", 
        "ARNOLD L.MALABRE & CO.LTD.", "A.N.I. CARGO SERVICES LIMITED", "A C GEE INVESTMENTS LTD",
        "ARCTIC FREIGHT FORWARDING LTD", "ATC FREIGHT & SHIPPING", "CARIBBEAN FREIGHT HANDLERS", 
        "CARIB STAR SHIPPING", "CONFIDENTIAL SHIPPING", "CMA CGM JAMAICA LIMITED", 
        "CFL SHIPPING AGENCY LTD", "CARGO INNOVATORS GROUP LTD", "QUALITY ASSURANCE", 
        "FUTURE SHIPPING SERVICE", "FIRST CHOICE SHIPPING CO.", "FREIGHTPLUS SERVICES", 
        "GLOBAL LINK SHIPPING", "GATEWAY SHIPPING INTERNATIONAL", "GOLD STAR SHIPPING SERVICES LTD", 
        "HI-END LUXURY AUTO SALES", "INTERSHIP", "JACAN FREIGHT FORWARDERS", 
        "JAMAICA FREIGHT & SHIPPING COMPANY", "J & W CARGO SHIPPING LIMITED", 
        "KRIS-ALEX FREIGHT FORWARDING & SHIPPING", "KINGSLEY SHIPPING JAMAICA", 
        "KINGSLEY SHIPPING CNC", "KESTREL LINER AGENCIES  LTD", "KAY-CON CARGO SHIPPING SERVICES LTD", 
        "LANNAMAN & MORRIS SHPG LIMITED", "LTN LOGISTICS INTERNATIONAL COMPANY", 
        "LUDFORD TRANSFER JAMAICA CO. LTD", "MARITIME & TRANSPORT SERVICES", 
        "MARITIME SOLUTION", "MASTERFREIGHT JAMAICA LTD", "MSC MEDITERRANEAN SHIPPING CO. JAM.", 
        "MEDITERRANEAN SHIPPING CO. JA. LTD.", "NASHWA'S GROUP OF COMPANIES", "PAS CARGO JAMAICA", 
        "PIER17 JAMAICA LTD", "PEREZ Y CIA (JA)LTD.", "PRIMROSE SHIPPING AND LOGISTICS CENTER", 
        "R.S. GAMBLE (1998) LIMITED", "SMALL BROTHERS LTD", "SHIPPING CONCEPTS LIMITED", 
        "SUNSURE JAMAICA FREIGHT FORWARDERS", "STANMAN SHIPPING LTD", 
        "SEABOARD FREIGHT & SHIPPING", "SHORE TO SHORE VAN LINES LIMITED", 
        "SHIPCO TRANSPORT JAMAICA LTD", "TRANSWORLD SHIPPING SERVICES", "TRANSOCEAN SHIPPING", 
        "TRANS-JAM CONSULTING AGENCY", "TKR SHIPPING AND LOGISTICS", "UNITED FREIGHT FORWARDERS", 
        "UNI-LOG SERVICES", "VIKING CARGO LOGISTICS LIMITED", "ZNOIYAZ FREIGHT AND TRANSPORTATION", "Other"
    ];

//=============================== END Globle Vriables ===============================

// Fetch the select element by ID

const appointmentCategorySelect = document.getElementById('appointmentCategory');
const appointmentTypeSelect = document.getElementById('appointmentType');
const chassisContainer = document.getElementById('chassisContainer');

const chassisInput = document.getElementById('chassis');




appointmentCategorySelect.addEventListener('change', function() {

const timeContainer = document.getElementById("timeSlots");                     
timeContainer.innerHTML = "";


 selectedTimes = [];
 selectedDate=null;   
 globaltimes=[]
 selectedDateTimes=[]

})



// Add an event listener to handle changes in the select element
appointmentTypeSelect.addEventListener('change', function() {
    // Get the selected option
    const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];

  
    const defaultOption = appointmentTypeSelect.options[0];
    defaultOption.disabled = true;


    appointmentTypeID = document.getElementById("appointmentType").value,

    // Fetch the data-calendar-id using getAttribute
     calendarId = selectedOption.getAttribute('data-calendar-id');
     typename = selectedOption.getAttribute('data-type-name');

     document.getElementById('calendarId').value = calendarId;
     document.getElementById('typename').value = typename;

    console.log('Selected Calendar ID:', calendarId);

 
    const timeContainer = document.getElementById("timeSlots");                     
    timeContainer.innerHTML = "";


     selectedTimes = [];
     selectedDate=null;   
     globaltimes=[]
     selectedDateTimes=[]

    //   // Check if the appointmentTypeID matches the required IDs
    //   const validIDs = ['70702351', '13801622', '16120840', '16581501'];
    //     if (validIDs.includes(appointmentTypeID)) {
    //         chassisContainer.style.display = 'block'; // Show the Chassis No field
    //         chassisInput.setAttribute('required', '');
    //     } else {
    //         chassisContainer.style.display = 'none'; // Hide the Chassis No field
    //         chassisInput.removeAttribute('required'); // Remove required attribute
    //     }




// Loop through all dynamically generated forms and update the chassis container visibility
const forms = document.querySelectorAll('.form-container');
    forms.forEach((form, index) => {
        const chassisContainer = document.getElementById(`chassisContainer_${index}`);
        const chassisInput = document.getElementById(`chassis_${index}`);

        // Check if the appointmentTypeID matches any of the valid IDs
        if (validIDs.includes(appointmentTypeID)) {
            chassisContainer.style.display = 'block'; // Show chassis container
            chassisInput.setAttribute('required', ''); // Set required attribute
        } else {
            chassisContainer.style.display = 'none'; // Hide chassis container
            chassisInput.removeAttribute('required'); // Remove required attribute
        }
    });





});


    document.addEventListener('DOMContentLoaded', function() {
        showTab(currentTab);
        generateCalendar();        
        fetchAvailableDates();
        loadAppointmentTypes();
        setupEventListeners();
    });



    //========================== Agent List Section Start ===============================================
    
    $(document).ready(function() {
    // Initialize Select2 for the agent dropdown
    $('#agent').select2();
  });

  document.addEventListener('DOMContentLoaded', function () {
    const agentSelect = $('#agent');  // Using jQuery to target the select2 element
    const otherAgentInput = document.getElementById('otherAgent');

    // Dynamically populate the dropdown with agents
    agentList.forEach(agent => {
        const option = document.createElement('option');
        option.value = agent;
        option.textContent = agent;
        agentSelect.append(option);
    });

    // Initialize Select2 for the agent dropdown
    agentSelect.select2();

    // Event listener for when the agent is selected
    agentSelect.on('change', function () {
        if (agentSelect.val() === "Other") {
            otherAgentInput.style.display = 'block';  // Show the manual input field
            otherAgentInput.required = true;  // Make it required
        } else {
            otherAgentInput.style.display = 'none';  // Hide the manual input field
            otherAgentInput.required = false;  // No longer required
        }
    });
});


 // Function to initialize a dropdown
 function initializeAgentDropdown(agentSelectId, otherAgentInputId) {
        const agentSelect = $(`#${agentSelectId}`); // Using jQuery for Select2
        const otherAgentInput = document.getElementById(otherAgentInputId);

        if (!agentSelect.length || !otherAgentInput) return; // Ensure elements exist

        // Populate the dropdown
        agentList.forEach(agent => {
            const option = document.createElement('option');
            option.value = agent;
            option.textContent = agent;
            agentSelect.append(option);
        });

        // // Add "Other" option
        // agentSelect.append(new Option("Other", "Other"));

        // Initialize Select2
        agentSelect.select2();

        // Attach change event
        agentSelect.on('change', function () {
            if (agentSelect.val() === "Other") {
                otherAgentInput.style.display = 'block'; // Show the manual input field
                otherAgentInput.required = true; // Make it required
            } else {
                otherAgentInput.style.display = 'none'; // Hide the manual input field
                otherAgentInput.required = false; // No longer required
            }
        });
    }




  //========================== Agent List Section End ===============================================


    function showTab(n) {
        const tabs = document.querySelectorAll('.tab-content');
        const tabHeaders = document.querySelectorAll('.tab');

        if (n < 0 || n >= tabs.length) return;
        currentTab = n;

        tabs.forEach((tab, index) => {
            tab.classList.toggle('active', index === currentTab);
            tabHeaders[index].classList.toggle('active', index === currentTab);
        });

        //if (n === 2) populateConfirmation();
    }

    function changeTab(step) {
        
        // if(currentTab==1){
        //     selectedTimes = [];
        // }
        const newTabIndex = currentTab + step;
        if (newTabIndex >= 0 && newTabIndex < tabs.length) showTab(newTabIndex);
    }

    function nextStep() { 
        if (!validateCurrentTab()) return;

     

                    if (currentTab === 0 && (!selectedDate || selectedTimes.length == 0)) {
                        alert("Please select a date and at least one time slot.");
                        return;
                    } else if (currentTab === 1 && !validateInfo()) {
                        alert("Please fill out all fields.");
                        return;
                    }

                        // Generate the forms dynamically
                    if (currentTab === 0) {
                        generateMultipleForms();
                    }

                        if (currentTab === 1) populateConfirmation();
                        changeTab(1);
    }

    function prevStep() {
        changeTab(currentTab === 2 ? -2 : -1);
    }



    //============ dynamic forms start ======================//


   // let generatedForms = {}; // Track forms by slot and unit indices

function generateMultipleForms() {

    console.log("generting    Selected Timess===========>>>>>>>>>>>>>>> ", selectedDateTimes)

    const formsContainer = document.getElementById('formsContainer');
    const slotUnit = document.getElementById('slotUnit').value; // Get the number of slots
   // const selectedTimes = selectedDateTimes; // Use the selected times array
    const selectedTimes = [...selectedDateTimes]; // Assume this is up-to-date

    if (slotUnit <= 0 || selectedTimes.length === 0) {
        alert("Please select valid slots and number of slots.");
        return;
    }

     // Initialize tracking object if not already done
     if (!window.generatedForms) window.generatedForms = {};

    //  Object.keys(window.generatedForms).forEach(formId => {
    //     const [index, slotIndex] = formId.split('_').slice(1, 3);
    //     const selectedTime = selectedTimes[index];
    //     const formTime = selectedDateTimes[index];
        
    //     if (!selectedTimes.includes(formTime)) {
    //         // If the time is no longer selected, remove the form
    //         const formContainer = document.getElementById(`formContainer_${formId}`);
    //         if (formContainer) {
    //             formContainer.remove();
    //         }
    //         delete window.generatedForms[formId]; // Remove tracking of the form
    //     }
    // });

    // Remove forms whose time is no longer in selectedTimes
    const formContainers = formsContainer.querySelectorAll('.form-container');
    formContainers.forEach((formContainer) => {
        const formTime = formContainer.getAttribute('data-time');
        if (!selectedTimes.includes(formTime)) {
            formContainer.remove(); // Remove the form container
            delete window.generatedForms[formTime]; // Remove tracking of the form
        }
    });

    selectedTimes.forEach((time, index) => {
        const formattedTime = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: timezone, // Use the selected timezone
        }).format(new Date(time));

          // Check how many forms already exist for this time
          const existingFormContainers = formsContainer.querySelectorAll(`[data-time='${time}']`);
        const existingFormCount = existingFormContainers.length;

        for (let i = existingFormCount ; i < slotUnit; i++) {
            const formId = `kilform_${index}_${i}`;

      
            const formTime = selectedTimes[index];

            // Check if this form already exists
           // const existingFormContainer = document.querySelector(`[data-time='${formTime}']`);

            // Check if this form already exists
            // if (!existingFormContainer) {
           

                const formHTML = `
               
                    <div class="form-container" id="formContainer_${formId}" data-time="${time}">
                         <br>
                <hr>
                        <div class="form-divider">
                            <h1>${selectedDate} ${formattedTime}</h1>
                        </div>
                        <form id="kilform_${index}_${i}">
                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                            <input type="hidden" id="calendarId_${index}_${i}" name="calendarId" value="${calendarId}">
                            <input type="hidden" name="typename" id="typename_${index}_${i}" value="${typename}">
                            <input type="hidden" name="selectedTime" value="${time}">
                            <input type="hidden" name="appointment_type" value="${type_cat}" id="apppersonal_${index}_${i}">

                            

                            <div class="row gy-4">
                                <div class="col-md-6">
                                    <label>* TRN</label>
                                    <input maxlength="20" type="text" id="trn_${index}_${i}" name="trn" class="form-control" placeholder="Enter the number" oninput="formatTRN(this)" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <label>* First Name</label>
                                    <input maxlength="20" type="text" id="fname_${index}_${i}" class="form-control" name="firstname" placeholder="Enter the name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Last Name</label>
                                    <input maxlength="20" type="text" id="lname_${index}_${i}" class="form-control" name="lastname" placeholder="Last Name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Mobile Number</label>
                                    <div class="input-group">
                                        <input type="tel" name="contact" id="kilvishcontact_${index}_${i}" class="form-control" placeholder="Mobile Number" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
                                        <input type="hidden" id="fullkilvishcontact_${index}_${i}" name="fullkilvishcontact">
                                        <input type="hidden" id="country_code_${index}_${i}" name="country_code">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label>* Email Address</label>
                                    <% if (typeof loggeduser !== 'undefined' && loggeduser.user_email) { %>
                                        <input type="email" id="email_${index}_${i}" class="form-control" name="user_email" placeholder="Enter the email" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" >
                                    <% } else { %>
                                        <input type="email" id="email_${index}_${i}" class="form-control" name="user_email" placeholder="Enter the email" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
                                    <% } %>
                                </div>

                            

                                <div class="col-md-6">
                                    <label>* Agent/Freight Forwarder</label>
                                    <select id="agent_${index}_${i}" class="form-control select2" name="agent_forwarder" required>
                                        <option value="">Select Agent</option>
                                        <option value="Other">Other</option>
                                    </select>
                                    <input type="text" id="otherAgent_${index}_${i}" name="agent_forwarder" class="form-control" placeholder="Enter your agent's name" style="display:none;" />
                                </div>


                                <div class="col-md-6">
                                    <label>Name of Individual Making Appointment (If not consignee)</label>
                                    <input maxlength="20" type="text" id="appname_${index}_${i}" class="form-control" name="appointment_by" placeholder="Enter the name">
                                </div>

                                <div class="col-md-6">
                                    <label>* Bill of Lading Number</label>
                                    <input maxlength="25" type="text" id="blnumber_${index}_${i}" class="form-control" name="bol_number" placeholder="Enter the number" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Vessel Name</label>
                                    <input maxlength="20" type="text" id="vname_${index}_${i}" class="form-control" name="vessel_name" placeholder="Enter the vessel name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Expected Vessel Reported Date</label>
                                    <input type="date" id="vreport_${index}_${i}" class="form-control" name="vessel_reported_date" required>
                                </div>
                                <div class="col-md-6" id="chassisContainer_${index}_${i}" style="display: none;">
                                    <label>* Chassis No</label>
                                    <input maxlength="20" type="text" id="chassis_${index}_${i}" class="form-control" name="chassis_number" placeholder="Enter the number" >
                                </div>
                                <div class="col-md-6">
                                    <label>Customs Release/IMS4 Declaration Number</label>
                                    <input maxlength="20" type="text" id="ims_${index}_${i}" class="form-control" name="declaration_number" placeholder="Customs Release/IMS4 Declaration Number">
                                </div>
                                <div class="col-md-6">
                                    <label>Container Number</label>
                                    <input maxlength="20" type="text" id="cnumber_${index}_${i}" class="form-control" name="container_number" placeholder="Enter the data">
                                </div>
                                <div class="col-md-6">
                                    <label>* Number of Pieces/Packages/Units</label>
                                    <input type="number" min="0" id="ppnumber_${index}_${i}" class="form-control" name="number_of_items" placeholder="Enter the packages" required="">
                                </div>
                            </div>
                        </form>
                          <br>
                    </div>
                    
                `;


                // Append the new form to the container
                formsContainer.insertAdjacentHTML('beforeend', formHTML);

              

                   // Track this form as generated
                        if (!window.generatedForms[formTime]) {
                            window.generatedForms[formTime] = [];
                        }
                        window.generatedForms[formTime].push(formId);

                   // Track this form as generated this is also working
                  // window.generatedForms[formTime] = true;

                // Initialize the newly added dropdown or any plugins
                initializeAgentDropdown(`agent_${index}_${i}`, `otherAgent_${index}_${i}`);
                initializeIntlTelInput(index, i);

            // }
        }
    });

}



    function generateMultipleForms_workingfine() {
    const formsContainer = document.getElementById('formsContainer');
    formsContainer.innerHTML = ''; // Clear previous forms if any

    const slotUnit = document.getElementById('slotUnit').value;  // Get the number of slots
    const selectedTimes = selectedDateTimes;  // Use the selected times array

    // Ensure that there are valid selected times and slotUnit value
    if (slotUnit > 0 && selectedTimes.length > 0) {
        selectedTimes.forEach((time, index) => {

            const formattedTime = new Intl.DateTimeFormat('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                timeZone: timezone, // Use the selected timezone
            }).format(new Date(time));

            for (let i = 0; i < slotUnit; i++) {
                const formHTML = `
                <br>
                <hr>
                    <div class="form-container">
                        <div class="form-divider">
                            <h1>${selectedDate} ${formattedTime}</h1>
                        </div>
                        <form id="kilform_${index}_${i}">
                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                            <input type="hidden" id="calendarId_${index}_${i}" name="calendarId" value="${calendarId}">
                            <input type="hidden" name="typename" id="typename_${index}_${i}" value="${typename}">
                            <input type="hidden" name="selectedTime" value="${time}">
                            <input type="hidden" name="appointment_type" value="${type_cat}" id="apppersonal_${index}_${i}">

                            

                            <div class="row gy-4">
                                <div class="col-md-6">
                                    <label>* TRN</label>
                                    <input maxlength="20" type="text" id="trn_${index}_${i}" name="trn" class="form-control" placeholder="Enter the number" oninput="formatTRN(this)" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <label>* First Name</label>
                                    <input maxlength="20" type="text" id="fname_${index}_${i}" class="form-control" name="firstname" placeholder="Enter the name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Last Name</label>
                                    <input maxlength="20" type="text" id="lname_${index}_${i}" class="form-control" name="lastname" placeholder="Last Name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Mobile Number</label>
                                    <div class="input-group">
                                        <input type="tel" name="contact" id="kilvishcontact_${index}_${i}" class="form-control" placeholder="Mobile Number" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
                                        <input type="hidden" id="fullkilvishcontact_${index}_${i}" name="fullkilvishcontact">
                                        <input type="hidden" id="country_code_${index}_${i}" name="country_code">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label>* Email Address</label>
                                    <% if (typeof loggeduser !== 'undefined' && loggeduser.user_email) { %>
                                        <input type="email" id="email_${index}_${i}" class="form-control" name="user_email" placeholder="Enter the email" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" >
                                    <% } else { %>
                                        <input type="email" id="email_${index}_${i}" class="form-control" name="user_email" placeholder="Enter the email" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
                                    <% } %>
                                </div>

                            

                                <div class="col-md-6">
                                    <label>* Agent/Freight Forwarder</label>
                                    <select id="agent_${index}_${i}" class="form-control select2" name="agent_forwarder" required>
                                        <option value="">Select Agent</option>
                                        <option value="Other">Other</option>
                                    </select>
                                    <input type="text" id="otherAgent_${index}_${i}" name="agent_forwarder" class="form-control" placeholder="Enter your agent's name" style="display:none;" />
                                </div>


                                <div class="col-md-6">
                                    <label>Name of Individual Making Appointment (If not consignee)</label>
                                    <input maxlength="20" type="text" id="appname_${index}_${i}" class="form-control" name="appointment_by" placeholder="Enter the name">
                                </div>

                                <div class="col-md-6">
                                    <label>* Bill of Lading Number</label>
                                    <input maxlength="25" type="text" id="blnumber_${index}_${i}" class="form-control" name="bol_number" placeholder="Enter the number" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Vessel Name</label>
                                    <input maxlength="20" type="text" id="vname_${index}_${i}" class="form-control" name="vessel_name" placeholder="Enter the vessel name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                </div>
                                <div class="col-md-6">
                                    <label>* Expected Vessel Reported Date</label>
                                    <input type="date" id="vreport_${index}_${i}" class="form-control" name="vessel_reported_date" required>
                                </div>
                                <div class="col-md-6" id="chassisContainer_${index}_${i}" style="display: none;">
                                    <label>* Chassis No</label>
                                    <input maxlength="20" type="text" id="chassis_${index}_${i}" class="form-control" name="chassis_number" placeholder="Enter the number" >
                                </div>
                                <div class="col-md-6">
                                    <label>Customs Release/IMS4 Declaration Number</label>
                                    <input maxlength="20" type="text" id="ims_${index}_${i}" class="form-control" name="declaration_number" placeholder="Customs Release/IMS4 Declaration Number">
                                </div>
                                <div class="col-md-6">
                                    <label>Container Number</label>
                                    <input maxlength="20" type="text" id="cnumber_${index}_${i}" class="form-control" name="container_number" placeholder="Enter the data">
                                </div>
                                <div class="col-md-6">
                                    <label>* Number of Pieces/Packages/Units</label>
                                    <input type="number" min="0" id="ppnumber_${index}_${i}" class="form-control" name="number_of_items" placeholder="Enter the packages" required="">
                                </div>
                            </div>
                        </form>
                    </div>
                      <br>
                `;

                // Append the generated form to the container
                formsContainer.insertAdjacentHTML('beforeend', formHTML);
                    // Initialize the newly added dropdown
        initializeAgentDropdown(`agent_${index}_${i}`, `otherAgent_${index}_${i}`);
        initializeIntlTelInput(index, i);
            }

         
        });
    } else {
        alert("Please select valid slots and number of slots.");
    }


       
}



    //=========== dynamic forms end=============================


    function populateConfirmation() {
    const formsContainer = document.getElementById('formsContainer');
  

    const previewContainer = document.getElementById('previewContainer');
    previewContainer.innerHTML = ''; // Clear previous previews if any

    const slotUnit = document.getElementById('slotUnit').value;  // Get the number of slots
    const selectedTimes = selectedDateTimes;  // Use the selected times array

    // Ensure that there are valid selected times and slotUnit value
    if (slotUnit > 0 && selectedTimes.length > 0) {
        selectedTimes.forEach((time, index) => {

            

           
         
            for (let i = 0; i < slotUnit; i++) {

                const form = document.getElementById(`kilform_${index}_${i}`); 
        const selectedDateText = selectedDate || "Not selected";

 const selectedTimesText = new Intl.DateTimeFormat('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                timeZone: timezone, // Use the selected timezone
            }).format(new Date(time));



  
        // Collect form values, defaulting to "N/A" if not provided
        const appointmentType = form.querySelector(`#apppersonal_${index}_${i}`)?.value || "N/A";
        const trn = form.querySelector(`#trn_${index}_${i}`)?.value || "N/A";
        const firstName = form.querySelector(`#fname_${index}_${i}`)?.value || "N/A";
        const lastName = form.querySelector(`#lname_${index}_${i}`)?.value || "N/A";
        const country_code = form.querySelector(`#country_code_${index}_${i}`)?.value || "N/A";
        const mobileNumber = form.querySelector(`#kilvishcontact_${index}_${i}`)?.value || "N/A";
        const email = form.querySelector(`#email_${index}_${i}`)?.value || "N/A";
     
        
        const agent =  form.querySelector(`#agent_${index}_${i}`)?.value === "Other" ? form.querySelector(`#otherAgent_${index}_${i}`)?.value : form.querySelector(`#agent_${index}_${i}`)?.value
        const appname = form.querySelector(`#appname_${index}_${i}`)?.value || "N/A";
        const blNumber = form.querySelector(`#blnumber_${index}_${i}`)?.value || "N/A";
        const vname = form.querySelector(`#vname_${index}_${i}`)?.value || "N/A";
        const vreport = form.querySelector(`#vreport_${index}_${i}`)?.value || "N/A";
        const chassis = form.querySelector(`#chassis_${index}_${i}`)?.value || "N/A";
        const ims = form.querySelector(`#ims_${index}_${i}`)?.value || "N/A";
        const cnumber = form.querySelector(`#cnumber_${index}_${i}`)?.value || "N/A";
        const ppnumber = form.querySelector(`#ppnumber_${index}_${i}`)?.value || "N/A";
        const typename = form.querySelector(`#typename_${index}_${i}`)?.value || "N/A";


        const previewHTML = `
            <br>
            <hr style="border: 1px solid green;">
            
             <center>  <h4> ${selectedDateText} ${selectedTimesText}</h4></center>
             <hr style="border: 1px solid green;">
            <div class="preview-section">
                <h5>Appointment ${index + 1} Details </h5>
                <div class="row" id="confirmDateRow_${index}_${i}">
                    <div class="col-md-6"><strong>Date</strong></div>
                    <div class="col-md-6">${selectedDateText}</div>
                    <div class="col-md-6"><strong>Time</strong></div>
                    <div class="col-md-6">${selectedTimesText}</div>
                </div>
                <br>
                <h5>Contact Information</h5>
                <div class="row" id="confirmTrnRow_${index}_${i}">
                    <div class="col-md-6"><strong>TRN</strong></div>
                    <div class="col-md-6">${trn}</div>
                </div>
                <div class="row" id="confirmFirstNameRow_${index}_${i}">
                    <div class="col-md-6"><strong>First Name</strong></div>
                    <div class="col-md-6">${firstName}</div>
                </div>
                <div class="row" id="confirmLastNameRow_${index}_${i}">
                    <div class="col-md-6"><strong>Last Name</strong></div>
                    <div class="col-md-6">${lastName}</div>
                </div>
                <div class="row" id="confirmMobileNumberRow_${index}_${i}">
                    <div class="col-md-6"><strong>Mobile Number</strong></div>
                    <div class="col-md-6">${country_code} ${mobileNumber}</div>
                </div>
                <div class="row" id="confirmEmailRow_${index}_${i}">
                    <div class="col-md-6"><strong>Email Address</strong></div>
                    <div class="col-md-6">${email}</div>
                </div>
                <div class="row" id="confirmAgentRow_${index}_${i}">
                    <div class="col-md-6"><strong>Agent/Freight Forwarder</strong></div>
                    <div class="col-md-6">${agent}</div>
                </div>
                <div class="row" id="confirmAppointmentTypeRow_${index}_${i}">
                    <div class="col-md-6"><strong>Appointment Category</strong></div>
                    <div class="col-md-6">${appointmentType}</div>
                </div>
                 <div class="row" id="confirmTypeNameRow_${index}_${i}">
                    <div class="col-md-6"><strong>Appointment Type Name</strong></div>
                    <div class="col-md-6">${typename}</div>
                </div>
<br>
                <h5>Additional Information</h5>
                <div class="row" id="confirmAppNameRow_${index}_${i}">
                    <div class="col-md-6"><strong>Name of Individual Making Appointment (If not consignee)</strong></div>
                    <div class="col-md-6">${appname}</div>
                </div>
                <div class="row" id="confirmBlNumberRow_${index}_${i}">
                    <div class="col-md-6"><strong>Bill of Lading Number</strong></div>
                    <div class="col-md-6">${blNumber}</div>
                </div>
                <div class="row" id="confirmVesselNameRow_${index}_${i}">
                    <div class="col-md-6"><strong>Vessel Name</strong></div>
                    <div class="col-md-6">${vname}</div>
                </div>
                <div class="row" id="confirmVesselReportRow_${index}_${i}">
                    <div class="col-md-6"><strong>Expected Vessel Reported Date</strong></div>
                    <div class="col-md-6">${vreport}</div>
                </div>
                <div class="row" id="confirmChassisRow_${index}_${i}">
                    <div class="col-md-6"><strong>Chassis Number</strong></div>
                    <div class="col-md-6">${chassis}</div>
                </div>
                <div class="row" id="confirmImsRow_${index}_${i}">
                    <div class="col-md-6"><strong>Customs Release/IMS4 Declaration Number</strong></div>
                    <div class="col-md-6">${ims}</div>
                </div>
                <div class="row" id="confirmContainerNumberRow_${index}_${i}">
                    <div class="col-md-6"><strong>Container Number</strong></div>
                    <div class="col-md-6">${cnumber}</div>
                </div>
                <div class="row" id="confirmPpNumberRow_${index}_${i}">
                    <div class="col-md-6"><strong>Number of Pieces/Packages/Units</strong></div>
                    <div class="col-md-6">${ppnumber}</div>
                </div>
              
               
            </div>
            <br>
        `;
   
                    // Append the preview section to the preview container
                    previewContainer.innerHTML += previewHTML;

                    function toggleRowVisibility(fieldId, value) {
                            const row = document.getElementById(fieldId);
                            if (value === "N/A" || value.trim() === "") {
                                row.style.display = "none";  // Hide the entire row
                            } else {
                                row.style.display = "flex";  // Show the row
                            }
                        }

                        toggleRowVisibility(`confirmAppNameRow_${index}_${i}`, appname);
                    toggleRowVisibility(`confirmChassisRow_${index}_${i}`, chassis);
                    toggleRowVisibility(`confirmImsRow_${index}_${i}`, ims);
                    toggleRowVisibility(`confirmContainerNumberRow_${index}_${i}`, cnumber);



             
            }

         
        });
    } else {
        alert("Please select valid slots and number of slots.");
    }


       
}



    function populateConfirmation45455() { 
    console.log("confirm selectedDate ", selectedDate);
    console.log("confirm selectedTimes ", selectedTimes);

    const formsContainer = document.getElementById('formsContainer');
    const previewContainer = document.getElementById('previewContainer');
    previewContainer.innerHTML = ''; // Clear previous previews if any

    // Get all form elements within the container
    const forms = formsContainer.querySelectorAll('.form-container');

    forms.forEach((form, index) => {

        console.log("=============== form ===========", form)
        console.log("=============== index ===========", index)
        console.log("=============== ================== ======================== ======================== ===========")
       
        const selectedDateText = selectedDate || "Not selected";
       // const selectedTimesText = selectedTimes.length > 0 ? selectedTimes.join(", ") : "Not selected";
 // Get the selected time for the current form
 const selectedTimesText = selectedTimes[index] || "Not selected"; // Display the time corresponding to the current form

         
        // Collect form values, defaulting to "N/A" if not provided
        const appointmentType = form.querySelector(`#apppersonal_${index}_0`)?.value || "N/A";
        const trn = form.querySelector(`#trn_${index}_0`)?.value || "N/A";
        const firstName = form.querySelector(`#fname_${index}_0`)?.value || "N/A";
        const lastName = form.querySelector(`#lname_${index}_0`)?.value || "N/A";
        const country_code = form.querySelector(`#country_code_${index}_0`)?.value || "N/A";
        const mobileNumber = form.querySelector(`#kilvishcontact_${index}_0`)?.value || "N/A";
        const email = form.querySelector(`#email_${index}_0`)?.value || "N/A";
     
        
        const agent =  form.querySelector(`#agent_${index}_0`)?.value === "Other" ? form.querySelector(`#otherAgent_${index}_0`)?.value : form.querySelector(`#agent_${index}_0`)?.value
        const appname = form.querySelector(`#appname_${index}_0`)?.value || "N/A";
        const blNumber = form.querySelector(`#blnumber_${index}_0`)?.value || "N/A";
        const vname = form.querySelector(`#vname_${index}_0`)?.value || "N/A";
        const vreport = form.querySelector(`#vreport_${index}_0`)?.value || "N/A";
        const chassis = form.querySelector(`#chassis_${index}_0`)?.value || "N/A";
        const ims = form.querySelector(`#ims_${index}_0`)?.value || "N/A";
        const cnumber = form.querySelector(`#cnumber_${index}_0`)?.value || "N/A";
        const ppnumber = form.querySelector(`#ppnumber_${index}_0`)?.value || "N/A";
        const typename = form.querySelector(`#typename_${index}_0`)?.value || "N/A";

        // Generate a preview section for this form
        const previewHTML = `
            <br>
            <hr style="border: 1px solid green;">
            
             <center>  <h4> ${selectedDateText} ${selectedTimesText}</h4></center>
             <hr style="border: 1px solid green;">
            <div class="preview-section">
                <h5>Appointment ${index + 1} Details </h5>
                <div class="row" id="confirmDateRow_${index}">
                    <div class="col-md-6"><strong>Date</strong></div>
                    <div class="col-md-6">${selectedDateText}</div>
                    <div class="col-md-6"><strong>Time</strong></div>
                    <div class="col-md-6">${selectedTimesText}</div>
                </div>
                <br>
                <h5>Contact Information</h5>
                <div class="row" id="confirmTrnRow_${index}">
                    <div class="col-md-6"><strong>TRN</strong></div>
                    <div class="col-md-6">${trn}</div>
                </div>
                <div class="row" id="confirmFirstNameRow_${index}">
                    <div class="col-md-6"><strong>First Name</strong></div>
                    <div class="col-md-6">${firstName}</div>
                </div>
                <div class="row" id="confirmLastNameRow_${index}">
                    <div class="col-md-6"><strong>Last Name</strong></div>
                    <div class="col-md-6">${lastName}</div>
                </div>
                <div class="row" id="confirmMobileNumberRow_${index}">
                    <div class="col-md-6"><strong>Mobile Number</strong></div>
                    <div class="col-md-6">${country_code} ${mobileNumber}</div>
                </div>
                <div class="row" id="confirmEmailRow_${index}">
                    <div class="col-md-6"><strong>Email Address</strong></div>
                    <div class="col-md-6">${email}</div>
                </div>
                <div class="row" id="confirmAgentRow_${index}">
                    <div class="col-md-6"><strong>Agent/Freight Forwarder</strong></div>
                    <div class="col-md-6">${agent}</div>
                </div>
                <div class="row" id="confirmAppointmentTypeRow_${index}">
                    <div class="col-md-6"><strong>Appointment Type</strong></div>
                    <div class="col-md-6">${appointmentType}</div>
                </div>
<br>
                <h5>Additional Information</h5>
                <div class="row" id="confirmAppNameRow_${index}">
                    <div class="col-md-6"><strong>Application Name</strong></div>
                    <div class="col-md-6">${appname}</div>
                </div>
                <div class="row" id="confirmBlNumberRow_${index}">
                    <div class="col-md-6"><strong>BL Number</strong></div>
                    <div class="col-md-6">${blNumber}</div>
                </div>
                <div class="row" id="confirmVesselNameRow_${index}">
                    <div class="col-md-6"><strong>Vessel Name</strong></div>
                    <div class="col-md-6">${vname}</div>
                </div>
                <div class="row" id="confirmVesselReportRow_${index}">
                    <div class="col-md-6"><strong>Vessel Report Date</strong></div>
                    <div class="col-md-6">${vreport}</div>
                </div>
                <div class="row" id="confirmChassisRow_${index}">
                    <div class="col-md-6"><strong>Chassis Number</strong></div>
                    <div class="col-md-6">${chassis}</div>
                </div>
                <div class="row" id="confirmImsRow_${index}">
                    <div class="col-md-6"><strong>IMS Number</strong></div>
                    <div class="col-md-6">${ims}</div>
                </div>
                <div class="row" id="confirmContainerNumberRow_${index}">
                    <div class="col-md-6"><strong>Container Number</strong></div>
                    <div class="col-md-6">${cnumber}</div>
                </div>
                <div class="row" id="confirmPpNumberRow_${index}">
                    <div class="col-md-6"><strong>PP Number</strong></div>
                    <div class="col-md-6">${ppnumber}</div>
                </div>
              
                <div class="row" id="confirmTypeNameRow_${index}">
                    <div class="col-md-6"><strong>Type Name</strong></div>
                    <div class="col-md-6">${typename}</div>
                </div>
            </div>
            <br>
        `;

        // Append the preview section to the preview container
        previewContainer.innerHTML += previewHTML;

        // Function to toggle visibility of rows based on the value
        function toggleRowVisibility(fieldId, value) {
            const row = document.getElementById(fieldId);
            if (value === "N/A" || value.trim() === "") {
                row.style.display = "none";  // Hide the entire row
            } else {
                row.style.display = "flex";  // Show the row
            }
        }

        // Toggle visibility for rows based on values
        // toggleRowVisibility(`confirmTrnRow_${index}`, trn);
        // toggleRowVisibility(`confirmFirstNameRow_${index}`, firstName);
        // toggleRowVisibility(`confirmLastNameRow_${index}`, lastName);
        // toggleRowVisibility(`confirmMobileNumberRow_${index}`, mobileNumber);
        // toggleRowVisibility(`confirmEmailRow_${index}`, email);
        // toggleRowVisibility(`confirmAgentRow_${index}`, agent);
        // toggleRowVisibility(`confirmAppointmentTypeRow_${index}`, appointmentType);
        
        // toggleRowVisibility(`confirmBlNumberRow_${index}`, blNumber);
        // toggleRowVisibility(`confirmVesselNameRow_${index}`, vname);
        // toggleRowVisibility(`confirmVesselReportRow_${index}`, vreport);
    
        // toggleRowVisibility(`confirmPpNumberRow_${index}`, ppnumber);
        // toggleRowVisibility(`confirmTypeNameRow_${index}`, typename);


        toggleRowVisibility(`confirmAppNameRow_${index}`, appname);
        toggleRowVisibility(`confirmChassisRow_${index}`, chassis);
        toggleRowVisibility(`confirmImsRow_${index}`, ims);
        toggleRowVisibility(`confirmContainerNumberRow_${index}`, cnumber);



    });
}



    function validateInfo() { return true;
        // return ["fname", "lname", "email", "kilvishcontact"].every(id => document.getElementById(id).value.trim());
    }

//     async function loadAppointmentTypes() {
//     const category = document.getElementById('appointmentCategory').value;

//     // If no category is selected, skip the loading
//     if (!category) {    
//         return;
//     }

    

    

//     try {
//         const { data } = await axios.get('/appointment_types');
//         const appointmentTypeSelect = document.getElementById('appointmentType');
        
//         // Clear the current options
//         appointmentTypeSelect.innerHTML = '<option value="">Select Service</option>';
        
//         // Define the appointment IDs based on the category selected
//         let allowedAppointmentIDs = [];

//         if (category === 'warehouse') {
//             allowedAppointmentIDs = [
//                 18478069, 31449943, 13808117, 13808100, 18608838, 
//                 18608857, 13807845, 13807780, 18608460, 18608635
//             ];
//          //   document.getElementById('apppersonal').value = 'Warehouse/Personal Effects Appointment'
//          type_cat = 'Warehouse/Personal Effects Appointment'
//         } else if (category === 'motor') {
//             allowedAppointmentIDs = [
//                 70702351, 13801622, 16120840, 16581501
//             ];
//            // document.getElementById('apppersonal').value = 'Motor Vehicle Appointment'
//           type_cat  = 'Motor Vehicle Appointment'
//         }

//         // Filter appointment types based on allowed IDs for the selected category
//         const filteredTypes = data.filter(type => allowedAppointmentIDs.includes(type.id));

//         // Add filtered options to the select element
//         filteredTypes.forEach(type => {
//             const option = document.createElement('option');
//             option.value = type.id;
//             option.text = type.name;
//             option.setAttribute('data-calendar-id', type.calendarIDs[0]);
//             option.setAttribute('data-type-name', type.name);
//             option.setAttribute('data-timezone', type.timezone);
//             option.setAttribute('data-location', type.location);

//             appointmentTypeSelect.add(option);
//         });
//     } catch (error) {
//         console.error('Error loading appointment types:', error);
//     }
// }

// // Add an event listener for when the category is selected
// document.getElementById('appointmentCategory').addEventListener('change', loadAppointmentTypes);


async function loadAppointmentTypes() {
    const category = document.getElementById('appointmentCategory').value;
    const appointmentTypeSelect = document.getElementById('appointmentType');

    // Disable the second dropdown and show the loader
    appointmentTypeSelect.disabled = true;
    appointmentTypeSelect.innerHTML = `<option value="">Loading...</option>`;
    appointmentTypeSelect.style.background = `url('/images/icons/schedule.gif') no-repeat center center`;
    appointmentTypeSelect.style.backgroundSize = "20px 20px";

    // If no category is selected, reset and skip the loading
    if (!category) {
        appointmentTypeSelect.innerHTML = '<option value="">Select Service</option>';
        appointmentTypeSelect.disabled = false;
        appointmentTypeSelect.style.background = '';
        return;
    }

    try {
        // Fetch appointment types
        const { data } = await axios.get('/appointment_types');

        // Clear the current options
        appointmentTypeSelect.innerHTML = '<option value="">Select Service</option>';

        // Define the appointment IDs based on the category selected
        let allowedAppointmentIDs = [];

        if (category === 'warehouse') {
            allowedAppointmentIDs = [
                18478069, 31449943, 13808117, 13808100, 18608838,
                18608857, 13807845, 13807780, 18608460, 18608635
            ];
            type_cat = 'Warehouse/Personal Effects Appointment';
        } else if (category === 'motor') {
            allowedAppointmentIDs = [
                70702351, 13801622, 16120840, 16581501
            ];
            type_cat = 'Motor Vehicle Appointment';
        }

        // Filter appointment types based on allowed IDs for the selected category
        const filteredTypes = data.filter(type => allowedAppointmentIDs.includes(type.id));

        // Add filtered options to the select element
        filteredTypes.forEach(type => {
            const option = document.createElement('option');
            option.value = type.id;
            option.text = type.name;
            option.setAttribute('data-calendar-id', type.calendarIDs[0]);
            option.setAttribute('data-type-name', type.name);
            option.setAttribute('data-timezone', type.timezone);
            option.setAttribute('data-location', type.location);

            appointmentTypeSelect.add(option);
        });
    } catch (error) {
        console.error('Error loading appointment types:', error);
        alert('Failed to load appointment types. Please try again.');
    } finally {
        // Re-enable the second dropdown and remove the loader
        appointmentTypeSelect.disabled = false;
        appointmentTypeSelect.style.background = '';
    }
}

// Add an event listener for when the category is selected
document.getElementById('appointmentCategory').addEventListener('change', () => {
    // Disable the second dropdown while loading
    const appointmentTypeSelect = document.getElementById('appointmentType');
    appointmentTypeSelect.disabled = true;
    appointmentTypeSelect.innerHTML = '<option value="">Loading...</option>';
    appointmentTypeSelect.style.background = `url('/images/icons/schedule.gif') no-repeat center center`;
    appointmentTypeSelect.style.backgroundSize = "20px 20px";

    // Load appointment types
    loadAppointmentTypes();
});



    // Add this function to define renderAvailableDates
function renderAvailableDates(data,timezone) {
    availableDates = data.map(item => item.date); // Extract dates from the response and store in availableDates array
    generateCalendar(); // Re-render the calendar with updated available dates
}


    async function fetchAvailableDates() {
        const appointmentTypeID = document.getElementById('appointmentType').value;

        const appointmentTypeSelect = document.getElementById('appointmentType');
        const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];
        calendarId = selectedOption.getAttribute('data-calendar-id');
        timezone = selectedOption.getAttribute('data-timezone');

        document.getElementById('timeZone').innerHTML = timezone;

        selectedTimezone = timezone;
        
        
        const month = monthNames[currentMonth];
        if (!appointmentTypeID) return;

        try {
            const { data } = await axios.get(`/dates_availability`, { params: { appointmentTypeID, month ,calendarId ,timezone } });
            renderAvailableDates(data,timezone);
        } catch (error) {
            console.error('Error fetching available dates:', error);
        }
    }

        // Function to fetch available times based on the selected date
        async function fetchAvailableTimes(date, appointmentTypeID) {
        try {
            const response = await axios.get(`/time_availability`, {
                params: { appointmentTypeID, date }
            });

            globaltimes = response.data;
            renderAvailableTimes(response.data);
           
        } catch (error) {
            console.error("Error fetching available times:", error.message);
        }
    }

        //============================ Function to render available times on the page

        document.getElementById('slotUnit').addEventListener('input', function() {
            selectedTimes = [];      
    
        selectedDateTimes=[]
   


    // Clear generated forms tracking
    if (window.generatedForms) {
        window.generatedForms = {};
    }

    // Clear the forms container
    const formsContainer = document.getElementById('formsContainer');
    while (formsContainer.firstChild) {
        formsContainer.removeChild(formsContainer.firstChild);
    }

     // Re-render available times based on the updated slot unit value
    
    renderAvailableTimes(globaltimes);  // Assuming `times` is your available time slots array
});

function renderAvailableTimes(times) {
    console.log("Available Timeslots -> ", times);

    const appointmentTypeSelect = document.getElementById('appointmentType');
    const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];
    calendarId = selectedOption.getAttribute('data-calendar-id');
    timezone = selectedOption.getAttribute('data-timezone');

    const timeContainer = document.getElementById("timeSlots");
    timeContainer.innerHTML = ""; // Clear existing timeslots

    const slotUnit = parseInt(document.getElementById('slotUnit').value); // Get the value of slot input

    if (!times || times.length === 0) {
        timeContainer.textContent = "No available times for this date.";
        return;
    }

    times.forEach(timeObj => {
        const formattedTime = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: timezone,
        }).format(new Date(timeObj.time));

        const timeSlotDiv = document.createElement("div");
        timeSlotDiv.classList.add("time-slot");
        timeSlotDiv.dataset.time = formattedTime;
        timeSlotDiv.dataset.datetime = timeObj.time;

        document.getElementById('timeSlotsSection').style.display = 'block';

        const timeTextSpan = document.createElement("span");
        timeTextSpan.textContent = formattedTime;

        const slotsLeftText = document.createElement("span");
        slotsLeftText.style.marginLeft = "10px";

        // If the available slots are greater than or equal to the required number of slots, allow selection
        if (timeObj.slotsAvailable >= slotUnit) {
            timeSlotDiv.style.border = "2px solid green";  // Green border for available slots
            slotsLeftText.innerHTML = `<br> ${timeObj.slotsAvailable} Slot${timeObj.slotsAvailable > 1 ? 's' : ''} left`;

            // Enable click for available slots
            timeSlotDiv.onclick = function () {
                toggleTimeSelection(formattedTime, timeObj.time);
            };
        } else {
            timeSlotDiv.style.border = "2px solid red";  // Red border for unavailable slots
            slotsLeftText.innerHTML = `<br> ${timeObj.slotsAvailable} Slot${timeObj.slotsAvailable > 1 ? 's' : ''} left`;
            timeSlotDiv.style.pointerEvents = 'none';  // Disable click for unavailable slots
        }

        timeSlotDiv.appendChild(timeTextSpan);
        timeSlotDiv.appendChild(slotsLeftText);

        timeContainer.appendChild(timeSlotDiv);
    });
}




        function renderAvailableTimesworkingold(times) {
    console.log("Available Timeslots -> ", times);

    const appointmentTypeSelect = document.getElementById('appointmentType');
    const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];
    calendarId = selectedOption.getAttribute('data-calendar-id');
    timezone = selectedOption.getAttribute('data-timezone');

    const timeContainer = document.getElementById("timeSlots");
    timeContainer.innerHTML = ""; // Clear existing timeslots

    const slotUnit = document.getElementById('slotUnit').value; // Get the value of slot input

    if (!times || times.length === 0) {
        timeContainer.textContent = "No available times for this date.";
        return;
    }

    // Filter times based on slot availability
    const filteredTimes = times.filter(timeObj => timeObj.slotsAvailable >= slotUnit);

    if (filteredTimes.length === 0) {
        timeContainer.textContent = "No available times with the required number of slots.";
        return;
    }

    filteredTimes.forEach(timeObj => {
        const formattedTime = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: timezone,
        }).format(new Date(timeObj.time));

        const timeSlotDiv = document.createElement("div");
        timeSlotDiv.classList.add("time-slot");
        timeSlotDiv.dataset.time = formattedTime;
        timeSlotDiv.dataset.datetime = timeObj.time;

        document.getElementById('timeSlotsSection').style.display = 'block';

        const timeTextSpan = document.createElement("span");
        timeTextSpan.textContent = formattedTime;

        const slotsLeftText = document.createElement("span");
        slotsLeftText.style.marginLeft = "10px";

        if (timeObj.slotsAvailable >= slotUnit) {
            timeSlotDiv.style.border = "2px solid green";
            slotsLeftText.innerHTML = `<br> ${timeObj.slotsAvailable} Slot${timeObj.slotsAvailable > 1 ? 's' : ''} left`;

            // Enable click for available slots
            timeSlotDiv.onclick = function () {
                toggleTimeSelection(formattedTime, timeObj.time);
            };
        } else {
            timeSlotDiv.style.border = "2px solid red";
            slotsLeftText.innerHTML = "<br> 0 Slots left";
            timeSlotDiv.style.pointerEvents = 'none';
        }

        timeSlotDiv.appendChild(timeTextSpan);
        timeSlotDiv.appendChild(slotsLeftText);

        timeContainer.appendChild(timeSlotDiv);
    });
}




    
    async function checkAvailability(selectedDate, formattedTime , datetime) {
    try {
        const csrfToken = document.querySelector('input[name="_csrf"]').value;
        // Make a POST request to check availability
        const response = await fetch('/check_times', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'CSRF-Token': csrfToken },
            body: JSON.stringify({
                date: selectedDate,
                time: formattedTime,
                appointmentTypeID: appointmentTypeID,
                calendarID: calendarId,
                datetime:datetime
            })
        });

        const data = await response.json();
        if (response.ok) {
            return data;
        } else {
            console.error("Error checking time:", data);
            return null;
        }
    } catch (error) {
        console.error("Error with the request:", error);
        return null;
    }
}



 function generateCalendar() {
        const daysContainer = document.getElementById("calendarDays");
        const monthYearLabel = document.getElementById("monthYear");

        // Define the names of the months and days
        const monthNames = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

        // Update the month and year label
        monthYearLabel.textContent = `${monthNames[currentMonth]} ${currentYear}`;

        // Create the weekday header with only the first letter
        let daysHTML = "";
        dayNames.forEach(day => {
            daysHTML += `<div class="calendar-day-name">${day.charAt(0)}</div>`;
        });

        // Get the first day and last date of the current month
        const date = new Date(currentYear, currentMonth, 1);
        const firstDay = (date.getDay() + 7) % 7; // Adjust to start the week on Monday
        const lastDate = new Date(currentYear, currentMonth + 1, 0).getDate();

        // Add empty slots for days before the first day of the month
        for (let i = 0; i < firstDay; i++) {
            daysHTML += `<div class="calendar-day empty"></div>`;
        }

        // Add days of the current month
        for (let i = 1; i <= lastDate; i++) {
            const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
            const isAvailable = availableDates.includes(formattedDate);
            daysHTML += `<div class="calendar-day ${isAvailable ? 'available' : 'disabled'}" onclick="${isAvailable ? `selectDate(${i})` : ''}">${i}</div>`;
        }

        // Render the calendar
        daysContainer.innerHTML = daysHTML;
    } 

    function setupEventListeners() {
        document.getElementById('appointmentType').addEventListener('change', fetchAvailableDates);
        document.getElementById('prevMonthBtn').addEventListener('click', prevMonth);
        document.getElementById('nextMonthBtn').addEventListener('click', nextMonth);
    }


    function selectDate(day) {
      
    // Format the selected date to "YYYY-MM-DD" (e.g., "2024-11-11") for consistency with the server request
    const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    selectedDate = formattedDate;
    
    // document.getElementById('cal_date').innerHTML = moment(selectedDate).format('MMMM DD, YYYY');

    document.getElementById('cal_date').innerHTML = moment(selectedDate).format('dddd, MMMM DD, YYYY');


    // Deselect all days and highlight the selected day
    document.querySelectorAll(".calendar-day").forEach(dayEl => dayEl.classList.remove("selected-day"));
    document.querySelectorAll(".calendar-day")[new Date(currentYear, currentMonth, 1).getDay() + day - 1].classList.add("selected-day");

    const appointmentTypeID = document.getElementById('appointmentType').value;
    fetchAvailableTimes(selectedDate, appointmentTypeID);
}




function toggleTimeSelection(slot, datetime) { 

   
    const selectedSlot = [...document.querySelectorAll(".time-slot")].find(
        el => el.dataset.time === slot && el.dataset.datetime === datetime
    );

    if (selectedSlot) {
        // Toggle the 'selected-time' class for the clicked slot
        selectedSlot.classList.toggle("selected-time");

        // If the slot is selected, add it to the selected arrays, otherwise remove it
        if (selectedSlot.classList.contains("selected-time")) {
            console.log(`Selected time: ${slot}, datetime: ${datetime}`);
            selectedTimes.push(slot);         // Add the time to the array
            selectedDateTimes.push(datetime); // Add the datetime to the array
        } else {
            // If deselected, remove it from the selected arrays
            selectedTimes = selectedTimes.filter(time => time !== slot);
            selectedDateTimes = selectedDateTimes.filter(time => time !== datetime);
        }
    }


   
}





    function prevMonth() {
        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;
        currentYear -= (currentMonth === 11) ? 1 : 0;
        fetchAvailableDates();
    }

    function nextMonth() {
        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;
        currentYear += (currentMonth === 0) ? 1 : 0;
        fetchAvailableDates();
    }







    //--------------- Validation Start =======================================


    

    function validateCurrentTab() {  
    const inputs = tabs[currentTab].querySelectorAll('input, select, textarea');
    let isValid = true;

    // Remove previous error messages and borders
    tabs[currentTab].querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
    inputs.forEach(input => {
        input.style.border = ''; // Reset borders
    });

    const processedGroups = [];

    inputs.forEach(input => {


          //-----------start Remove Red border and error on enter something ------------
        // Remove error message and border immediately on valid input change
        input.addEventListener('input', () => {
            if (input.value.trim() || input.checked) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });

        if (input.type === 'text' || input.type === 'textarea' || input.tagName.toLowerCase() === 'select') {
        input.addEventListener('input', () => {
            if (input.value.trim()) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });
    }

    if (input.type === 'checkbox' || input.type === 'radio') {
        input.addEventListener('change', () => {
            if (input.checked) {
                input.style.border = ''; // Remove red border
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');
                const error = container.querySelector('.error-message');
                if (error) error.remove(); // Remove error message for the group
            }
        });
    }

    //-----------End Remove Red border and error on enter something ------------
    


            if ((input.type === 'checkbox' || input.type === 'radio') &&  input.id !== 'select-all' && input.id !== 'notloc' ){
                const name = input.name;
                console.log("checkbox names ",name)

                // Skip if this group has already been validated
                if (processedGroups.includes(name)) return;
                processedGroups.push(name);

                const group = tabs[currentTab].querySelectorAll(`input[name="${name}"]`);
                const checked = [...group].some(el => el.checked);
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');

                // Show a single error message if none are selected
                if (!checked) {
                    isValid = false;
                    group.forEach(input => {
                        input.style.border = '2px solid red'; // Highlight each checkbox/radio in the group
                    });
                    addErrorMessage(container, "Please select at least one option.");
                }
            } else {
                // Check for required fields that are empty (normal inputs)
                if (input.required && !input.value.trim()) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for required fields
                    addErrorMessage(input.parentNode, "This Field is Required"); // Add error message under normal inputs
                }
            }

            // Check if file input has a file selected (excluding specific cases)
            if (input.type === 'file' && input.required) {
                if (!input.files.length) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for invalid file input
                    addErrorMessage(input.parentNode, "Please upload a file.");
                }
            }

            // Special case: Validate hidden input storing job location data
            if (input.name === 'job_preferred_location' && input.required) {
                const selectedLocations = input.value.trim(); // Hidden field value
                const container = input.closest('.form-group');
                if (!selectedLocations) {
                    isValid = false;
                    addErrorMessage(container, "Please select at least one job location.");
                    input.style.border = '2px solid red';
                }
            }
   
    });

    return isValid;
}

function addErrorMessage(container, message) {
    // Check if error message already exists to avoid duplicate
    if (!container.querySelector('.error-message')) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.style.color = 'red';
        errorMessage.style.fontSize = '12px';
        errorMessage.innerText = message;
        container.appendChild(errorMessage);
    }
}






    //---------------- Validation End ========================================== 



    async function confirmBooking() {
    const loggeduserData = document.getElementById('loggeduserData').value;
    const loggeduser = loggeduserData ? JSON.parse(loggeduserData) : null;

    // If logged in, directly confirm booking without OTP
    if (typeof loggeduser !== 'undefined' && loggeduser) {
        await directConfirmBooking(loggeduser.primary_email);
        return;
    }

    // Ask for the user's email if not logged in
    let email = null;

    await Swal.fire({
        title: "Enter Your Email",
        input: "email",
        inputLabel: "We need your email to send an OTP for booking confirmation.",
        inputPlaceholder: "Enter your email address",
        inputAttributes: {
            autocapitalize: "off",
            autocomplete: "email",
        },
        confirmButtonText: "Submit",
        showCancelButton: true,
        allowOutsideClick: false,
        allowEscapeKey: false,
        inputValidator: (value) => {
            if (!value || !/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/.test(value)) {
                return "Please enter a valid email address.";
            }
        },
    }).then((result) => {
        if (result.isConfirmed) {
            email = result.value;
        }
    });

    if (!email) {
        // User canceled the email input
        Swal.fire("Canceled", "Email is required to send an OTP.", "error");
        return;
    }

    const csrfToken = document.querySelector('input[name="_csrf"]').value;

    // Initial SweetAlert OTP input screen with loader
    Swal.fire({
        title: "Sending OTP",
        html: `
            <p style="color: green;">Sending OTP to ${email}...</p>
            <div class="spinner-border text-success" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        `,
        showConfirmButton: false,
        allowOutsideClick: false,
        allowEscapeKey: false,
        showCloseButton: true,
    });

    try {
        // Send OTP request to the server
        const response = await fetch('/getBookingOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'CSRF-Token': csrfToken },
            body: JSON.stringify({ email }),
        });
        const result = await response.json();

        if (!result.exists) {
            Swal.update({
                html: `<p style="color: red;">Failed to send OTP. <button id="resendBtn" class="btn btn-link">Resend OTP</button></p>`
            });
            document.getElementById('resendBtn').onclick = confirmBooking; // Resend OTP
            return;
        }

        // Show OTP input form with message
        Swal.update({
            html: `
                <p style="color: green;">OTP sent to ${email}</p>
                <input type="text" id="otpInput" class="swal2-input" placeholder="Enter OTP">
                <div id="otpErrorMsg" style="color: red; display: none;">Invalid OTP! Enter correct OTP or try resending.</div>
                <button id="verifyBtn" class="swal2-confirm swal2-styled" style="margin-right:10px;">Verify OTP</button>
                <button id="resendOtpBtn" class="swal2-cancel swal2-styled">Resend OTP</button>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false,
        });

        document.getElementById('otpInput').value = result.otp; // For testing purposes only
        document.getElementById('verifyBtn').onclick = () => verifyOTP(email);
        document.getElementById('resendOtpBtn').onclick = confirmBooking;

    } catch (error) {
        Swal.fire('Error', 'Failed to send OTP. Please try again later.', 'error');
    }
}



// Function to handle the booking confirmation with OTP verification and final confirmation
async function confirmBooking_working() {
  

    const loggeduserData = document.getElementById('loggeduserData').value;
const loggeduser = loggeduserData ? JSON.parse(loggeduserData) : null;

        if (typeof loggeduser !== 'undefined' && loggeduser) {
        // If logged in, directly confirm booking without OTP
        await directConfirmBooking(loggeduser.user_email);
        return;
    }


    const email = document.getElementById("email").value;
    const csrfToken = document.querySelector('input[name="_csrf"]').value;

    // Initial SweetAlert OTP input screen with loader
    Swal.fire({
        title: "Kingston Booking",
        html: `
            <p style="color: green;">Sending OTP to ${email}...</p>
            <div class="spinner-border text-success" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        `,
        showConfirmButton: false,
        allowOutsideClick: false,
        allowEscapeKey: false,
        showCloseButton: true
    });


    try {
        // Send OTP request to the server
        const response = await fetch('/getBookingOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json','CSRF-Token': csrfToken },
            body: JSON.stringify({ email })
        });
        const result = await response.json();

        if (!result.exists) {
            Swal.update({
                html: `<p style="color: red;">Failed to send OTP. <button id="resendBtn" class="btn btn-link">Resend OTP</button></p>`
            });
            document.getElementById('resendBtn').onclick = confirmBooking; // Resend OTP
            return;
        }

        // Show OTP input form with message
        Swal.update({
            html: `
                <p style="color: green;">OTP sent to ${email}</p>
                <input type="text" id="otpInput" class="swal2-input" placeholder="Enter OTP">
                <div id="otpErrorMsg" style="color: red; display: none;">Invalid OTP! Enter correct OTP or try resending.</div>
                <button id="verifyBtn" class="swal2-confirm swal2-styled" style="margin-right:10px;">Verify OTP</button>
                <button id="resendOtpBtn" class="swal2-cancel swal2-styled">Resend OTP</button>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
        });

        document.getElementById('otpInput').value = result.otp; // For testing purposes only
        document.getElementById('verifyBtn').onclick = verifyOTP;
        document.getElementById('resendOtpBtn').onclick = confirmBooking;

    } catch (error) {
        Swal.fire('Error', 'Failed to send OTP. Please try again later.', 'error');
    }
}



// Function to verify the OTP
async function verifyOTP(email) {
  
    const otp = document.getElementById("otpInput").value;
    const csrfToken = document.querySelector('input[name="_csrf"]').value;

    try {
        const response = await fetch('/verifyOTP', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' ,'CSRF-Token': csrfToken },
            body: JSON.stringify({ email, otp })
        });
        const result = await response.json();

        if (!result.success) {
            // Show error in red on the same SweetAlert modal
            document.getElementById('otpErrorMsg').style.display = 'block';
            return;
        }

        // OTP verified, show booking confirmation loader
        Swal.update({
            html: `
                <p style="color: green;">OTP Verified! Confirming your booking...</p>
                <div class="spinner-border text-success" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
        });

        await directConfirmBooking(email);  // Proceed to direct booking after OTP verification

    } catch (error) {
        Swal.fire('Error', 'Failed to Verify OTP Please try again later.', 'error');
    }
}


const directConfirmBooking = async (email) => {
  const forms = getBookingForms(email); // Assume this retrieves all form data as an array
  const totalForms = forms.length;

  // Initialize SweetAlert modal with booking details and placeholders for booking status icons
  Swal.fire({
    title: 'Booking Progress',
    html: forms
      .map((form, index) => {
        const formattedDateTime = moment
          .tz(form.selectedTime, form.timezone)
          .format('dddd, MMMM DD, YYYY, h:mm A'); // Format the selectedTime with timezone

        return `
          <hr style="border: 1px solid green;">
          <div id="form-${index}" class="form-progress" style="text-align: center;">
            <p><strong>Booking ${index + 1}: ${formattedDateTime}</strong></p>
            <div id="status-icon-${index}" class="status-icon">
              <img src="/images/icons/booking.gif" alt="Booking in Progress" style="width: 50px; height: 50px;" />
            </div>
            <p id="status-text-${index}" style="margin-top: 10px; font-weight: bold; color: #000;">Starting Booking</p>
          </div>
          <br>
        `;
      })
      .join(''),
    showConfirmButton: false,
    allowOutsideClick: false,
  });

  // Function to update status icons and result text
  const updateStatus = (index, success, message) => {
    const statusIcon = document.getElementById(`status-icon-${index}`);
    const statusText = document.getElementById(`status-text-${index}`);

    // Update icon
    statusIcon.innerHTML = `
      <img src="/images/icons/${success ? 'calendar_success.png' : 'calendar_failed.png'}" 
           alt="${success ? 'Booking Successful' : 'Booking Failed'}" 
           style="width: 50px; height: 50px;" />
    `;

    // Update message
    statusText.style.color = success ? 'green' : 'red';
    statusText.textContent = message;
  };

  // Function to process a single booking
  const processBooking = async (form, index) => {
    try {
      const response = await axios.post('/multibooking', form, {
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': form._csrf, // Sending the CSRF token
        },
      });

      if (response.data.success) {
        updateStatus(index, true, 'Booking Successfully');
      } else {
        updateStatus(index, false, response.data.message || 'Booking Failed');
      }
    } catch (error) {
      updateStatus(index, false, error.response?.data?.message || error.message || 'Error occurred while booking');
    }
  };

  // Sequentially process bookings
  for (let i = 0; i < totalForms; i++) {
    await processBooking(forms[i], i); // Process each form one by one
  }

  // After processing all bookings, allow closing the modal
//   Swal.fire({
//     title: 'All Bookings Processed',
//     html: document.querySelector('.swal2-html-container').innerHTML, // Retain all icons and messages
//     showConfirmButton: true,
//     confirmButtonText: 'Close',
//     allowOutsideClick: true,
//   });

  // After processing all bookings, redirect or show the "View Bookings" button
  Swal.fire({
    title: 'All Bookings Processed',
    html: document.querySelector('.swal2-html-container').innerHTML, // Retain all icons and messages
    showConfirmButton: true,
    confirmButtonText: 'View Bookings',
    allowOutsideClick: false, // Ensure no outside click can close the modal
  }).then(() => {
    // Redirect to /viewBookings after confirmation
    window.location.href = '/viewBookings';
  });




};




const directConfirmBooking_progressbar = async () => {
  const forms = getBookingForms(); // Assume this retrieves all form data as an array
  const totalForms = forms.length;

  // Initialize SweetAlert modal with booking details and placeholders for progress bars
  Swal.fire({
    title: 'Booking Progress',
    html: forms
      .map((form, index) => {
        const formattedDateTime = moment
          .tz(form.selectedTime, form.timezone)
          .format('dddd, MMMM DD, YYYY, h:mm A'); // Format the selectedTime with timezone

        return `
          <hr style="border: 1px solid green;">
          <div id="form-${index}" class="form-progress">
            <p><strong>Booking ${index + 1}: ${formattedDateTime}</strong></p>
            <div class="progress-bar-container" style="position: relative; width: 100%; height: 25px; background: #f0f0f0; border-radius: 5px; overflow: hidden; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);">
              <div id="progress-bar-fill-${index}" 
                   style="position: absolute; left: 0; top: 0; height: 100%; width: 0%; background: yellow; color: black; font-weight: bold; display: flex; align-items: center; justify-content: center;">
              </div>
            </div>
            <p id="form-result-${index}" class="form-result" style="margin-top: 10px; font-size: 14px; text-align: center;"></p>
          </div>
          <br>
        `;
      })
      .join(''),
    showConfirmButton: false,
    allowOutsideClick: false,
  });

  // Add CSS animation for yellow progress bar
  const styleSheet = document.createElement('style');
  styleSheet.type = 'text/css';
  styleSheet.innerHTML = `
    @keyframes loadingAnimation {
      0% { width: 0%; }
      100% { width: 100%; }
    }
    .yellow-animation {
      animation: loadingAnimation 3s linear forwards;
    }
    .success-animation {
      background-color: green !important;
    }
    .failure-animation {
      background-color: red !important;
    }
  `;
  document.head.appendChild(styleSheet);

  // Function to update progress bar and result text
  const updateProgress = (index, success, message) => {
    const progressFill = document.getElementById(`progress-bar-fill-${index}`);
    const resultText = document.getElementById(`form-result-${index}`);

    // Stop yellow animation and update to green or red
    progressFill.classList.remove('yellow-animation');
    progressFill.style.width = '100%';
    progressFill.classList.add(success ? 'success-animation' : 'failure-animation');
    progressFill.textContent = success ? '✔ Booking Successfully' : '✖ Booking Failed';

    // Update result text below the progress bar
    resultText.innerHTML = `
      <span style="color: ${success ? 'green' : 'red'}; font-weight: bold;">
        ${message}
      </span>
    `;
  };

  // Function to process a single booking
  const processBooking = async (form, index) => {
    const progressFill = document.getElementById(`progress-bar-fill-${index}`);
    progressFill.textContent = 'Starting Booking';
    progressFill.classList.add('yellow-animation'); // Start yellow animation

    try {
      const response = await axios.post('/multibooking', form, {
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': form._csrf, // Sending the CSRF token
        },
      });

      if (response.data.success) {
        updateProgress(index, true, 'Booking Successfully');
      } else {
        updateProgress(index, false, response.data.message || 'Booking Failed');
      }
    } catch (error) {
      updateProgress(index, false, error.response?.data?.message || error.message || 'Error occurred while booking');
    }
  };

  // Sequentially process bookings
  for (let i = 0; i < totalForms; i++) {
    await processBooking(forms[i], i); // Process each form one by one
  }

  // After processing all bookings, allow closing the modal
  Swal.fire({
    title: 'All Bookings Processed',
    html: document.querySelector('.swal2-html-container').innerHTML, // Retain all progress bars and messages
    showConfirmButton: true,
    confirmButtonText: 'Close',
    allowOutsideClick: true,
  });
};





const getBookingForms = (email) => {
  const forms = [];
  const formsContainer = document.getElementById('formsContainer');
  const formElements = formsContainer.querySelectorAll('.form-container form'); // Select all forms

  formElements.forEach((form, index) => {
console.log("form before formdata -> ",form)

    // const agentForwarder = form.querySelector(`#agent_${index}_0`)?.value === "Other"
    //   ? form.querySelector(`#otherAgent_${index}_0`)?.value
    //   : form.querySelector(`#agent_${index}_0`)?.value;

      // Find the agent forwarder select and input using their `name` attribute
      const agentSelect = form.querySelector('[name="agent_forwarder"]:not([type="text"])');
    const otherAgentInput = form.querySelector('[name="agent_forwarder"][type="text"]');

    const agentForwarder = agentSelect?.value === "Other"
      ? otherAgentInput?.value
      : agentSelect?.value;

    

    const formData = {
        _csrf: form.querySelector('[name="_csrf"]').value, // Include the CSRF token
      trn: form.querySelector('[name="trn"]').value,
      firstname: form.querySelector('[name="firstname"]').value,
      lastname: form.querySelector('[name="lastname"]').value,
      contact: form.querySelector('[name="contact"]').value,
      country_code: form.querySelector('[name="country_code"]').value,
      user_email: form.querySelector('[name="user_email"]').value,
      agent_forwarder: agentForwarder, // Use the corrected agent forwarding logic
      appointment_by: form.querySelector('[name="appointment_by"]').value,
      bol_number: form.querySelector('[name="bol_number"]').value,
      vessel_name: form.querySelector('[name="vessel_name"]').value,
      vessel_reported_date: form.querySelector('[name="vessel_reported_date"]').value,
      chassis_number: form.querySelector('[name="chassis_number"]').value,
      declaration_number: form.querySelector('[name="declaration_number"]').value,
      container_number: form.querySelector('[name="container_number"]').value,
      number_of_items: form.querySelector('[name="number_of_items"]').value,
      calendarID: form.querySelector('[name="calendarId"]').value,
      typename: form.querySelector('[name="typename"]').value,
      appointment_type: form.querySelector('[name="appointment_type"]').value,
      selectedTime: form.querySelector('[name="selectedTime"]').value,
      timezone: selectedTimezone, // Add the timezone dynamically
      appointmentTypeID: document.getElementById("appointmentType").value,
      selectedDateTimes :selectedDateTimes,
      booking_date: selectedDate,  // Add the selected date
        booking_times: selectedTimes, // Add the selected times
        primary_email :email
    };


    console.log("form after formdata -> ",formData)
    forms.push(formData); // Add the extracted data to the forms array
  });

  return forms; // Return the array of form data
};


// Function to handle direct booking confirmation
async function directConfirmBookingworking(email) {
  
    const csrfToken = document.querySelector('input[name="_csrf"]').value;
    try {


        const formData = {
                trn: document.getElementById("trn").value,
                firstname: document.getElementById("fname").value,
                lastname: document.getElementById("lname").value,
                contact: document.getElementById("kilvishcontact").value,
                country_code: document.getElementById("country_code").value,
                user_email: document.getElementById("email").value,
                // agent_forwarder: document.getElementById("agent").value,
                agent_forwarder: document.getElementById("agent").value === "Other" ? document.getElementById("otherAgent").value : document.getElementById("agent").value,
                appointment_by: document.getElementById("appname").value,
                appointment_type: document.getElementById("apppersonal").value,
                bol_number: document.getElementById("blnumber").value,
                vessel_name: document.getElementById("vname").value,
                vessel_reported_date: document.getElementById("vreport").value,
                chassis_number: document.getElementById("chassis").value,
                declaration_number: document.getElementById("ims").value,
                container_number: document.getElementById("cnumber").value,
                number_of_items: document.getElementById("ppnumber").value,
                booking_date: selectedDate,  // Add the selected date
                booking_times: selectedTimes, // Add the selected times
                appointmentTypeID: document.getElementById("appointmentType").value,
                calendarID: document.getElementById("calendarId").value,
                selectedDateTimes :selectedDateTimes,
                timezone:selectedTimezone,
                slotUnit:document.getElementById('slotUnit').value
            };




        const bookingResponse = await fetch('/multibooking', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'CSRF-Token': csrfToken },
                body: JSON.stringify(formData)
            });

        const bookingResult = await bookingResponse.json();

            if (bookingResult.success) {
                Swal.fire({
                    title: "Kingston Booking",
                    text: "Your appointment has been successfully booked.",
                    icon: "success",
                    confirmButtonText: "View Booking"
                }).then(() => {
                    window.location.href = '/viewBookings';
                });
            } else {
                
                // Handle error if not successful
                Swal.fire({
                    title: "Booking Error",
                    text: bookingResult.message || 'Failed to confirm booking. Please try again later.',
                    icon: "error",
                    confirmButtonText: "Retry"
                });
            }



    } catch (error) {
        console.log("ajax error ",error)
        Swal.fire('Error', 'Internal Server Error, Please try again later.', 'error');
    }
}






</script>



<script>




   //==================== Comman Kilvalidation start =====================
   
      
   function validateRequiredFields(kil) {
   
   
   const form = document.querySelector(`${kil}`); 
   
   const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
   
   
   let isValid = true;
   let kilerror = 'This Field is Required.'
   
   
   
   // Remove previous error messages and borders
   form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
   inputs.forEach(input => {
    
       input.style.border = ''; // Reset borders
   });
   
   inputs.forEach(input => {
   
   
   
                    if(input.type == 'date'){
                        
                        kilerror = "Please Select Date"
                        input.style.border = '1px solid red';
                    }else if(input.name == 'comments'){
                    
                        kilerror = 'Please Enter Comments'
                    }else if(input.type == 'email'){
                    
                    kilerror = 'Please Enter Email'
                }else if(input.type == 'password'){
                    
                    kilerror = 'Please Enter Password'
                }else{
                    kilerror = 'This Field is Required.'
                }
     
   
       if (!input.value.trim()) {  // If the required field is empty      
           isValid = false;
           input.style.border = '1px solid red'; // Set border to red for empty required fields
           addErrorMessage(input.parentNode, kilerror); // Add error message
       }
   });
   
   return isValid;
   }
   
   
   // Add real-time validation for each required field
   function addRealTimeValidation(kil) {
       const form = document.querySelector(`${kil}`); 
       const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
   
       inputs.forEach(input => {
           input.addEventListener('input', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
   
           input.addEventListener('change', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the select input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
       });
   }
   
   
   // Combined validation function
   function validateForm(kil) {
   
   
   if(!validateRequiredFields(kil)){
     event.preventDefault();
   }
   }
   
   // Add real-time validation once the document is loaded
   document.addEventListener('DOMContentLoaded', () => {
   addRealTimeValidation('#kilform');  // Activate real-time validation
   });
   
   
   function validateKilvishInput(event) { 
  
          const inputField = event.target;


      
 
      
          // General valid character sets
          // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;
      
          let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 
      
          // Define allowed image file types
          const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];
      
          // Use parentNode for regular inputs, container for checkboxes
          const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
          const inputParent = inputField.parentNode;
      
          // Remove previous error message and border
          let errorMessage = inputParent.querySelector('.error-message');
          if (errorMessage) errorMessage.remove();
          inputField.style.border = ''; // Reset border
      
          // Custom validations based on input name
          if (inputField.name === 'description' || inputField.name ===  'address') {
              validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;
      
              // Check length limit
              if (inputField.value.length > 400) {
                  addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
                  inputField.style.border = '1px solid red';
                  inputField.value = inputField.value.substring(0, 400); // Truncate the input
                  return;
              }
          }  else if (inputField.name === 'firstname' ||  inputField.name === 'lastname' || inputField.name ==='appointment_by' ) {
   
                       //  validCharacters = /^[a-zA-Z\s]*$/;  
                         validCharacters = /^[a-zA-Z\s-]*$/; // with - hypen

                         // Extract the dynamic indices from the triggering field's ID
    const idParts = inputField.id.split('_');
    const index = idParts[1];
    const i = idParts[2];


                         if(inputField.name === 'firstname' || inputField.name === 'lastname'){
                //                             var firstName = document.getElementById('fname').value;
                //         var lastName = document.getElementById('lname').value;
                // // Combine first name and last name with hyphens
                //     var fullName = firstName.replace(/\s+/g, '-') + '-' + lastName.replace(/\s+/g, '-'); 
                //     document.getElementById('appname').value = fullName;


                // Get the related First Name and Last Name fields using the same indices
    const firstNameField = document.getElementById(`fname_${index}_${i}`);
    const lastNameField = document.getElementById(`lname_${index}_${i}`);
    const appNameField = document.getElementById(`appname_${index}_${i}`);

    const firstName = firstNameField.value.trim().replace(/\s+/g, '-');
        const lastName = lastNameField.value.trim().replace(/\s+/g, '-');

        // Combine first and last names with hyphens
        const fullName = `${firstName}-${lastName}`;
        appNameField.value = fullName; // Update the app name field

                         }
                      

                   
                       // const allowedChars = /^[a-zA-Z0-9._@-]+$/;  //for kilMiddle Conditon 
                        const allowedChars = /^[a-zA-Z0-9._@-\s]+$/; // For any additional validations
                        
                        const inputValue = inputField.value; 

                          

                                    if (!allowedChars.test(inputField.value)) {
                                        // Allow common validation to handle non-numeric characters
                                    } else if (inputValue.length > 20 || inputValue.length < 2  ) {                        
                                        addErrorMessage(inputParent, 'This Field Must Be Between 2 And 20 Characters.');
                                        inputField.style.border = '1px solid red'; 

                                        if (event.type === 'change') {
                                            inputField.value = ''; 
                                        }    
                                        return;
                                        } 


                                        inputField.style.border = '';



                        } else if (inputField.name === 'otp') {
   
   
   
              validCharacters = /^\d{6,6}$/;
              const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
            const inputValue = inputField.value; 
   
                        const numericValue = parseInt(inputValue, 10);
   
                        if (!numericOnlyPattern.test(inputField.value)) {
                           // Allow common validation to handle non-numeric characters
                       } else if (inputValue.length > 6 || inputValue.length < 6  ) {                        
                              addErrorMessage(inputParent, 'OTP must be exactly 6 digits');
                              inputField.style.border = '1px solid red'; 
   
                              if (event.type === 'change') {
                                 inputField.value = ''; 
                              }    
                              return;
                           } 
   
   
                           inputField.style.border = '';
   
   
   
          }else if (inputField.name === 'trn') { 
   
          
   
   
            validCharacters = /^[\d-]{11,11}$/;
            
                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                            const inputValue = inputField.value; 
                      
                                        const numericValue = parseInt(inputValue, 10);

                                       if (inputValue.length > 11 || inputValue.length < 11 ) {                        
                                            addErrorMessage(inputParent, 'TRN must be exactly 9 digits');
                                            inputField.style.border = '2px solid red'; 

                                            if (event.type === 'change') {
                                                inputField.value = ''; 
                                            }    
                                            return;
                                            } 


                                            inputField.style.border = '';



                            }else if (inputField.name === 'number_of_items') { 
   
          
   
   
                            // validCharacters = /^\d{0,6}$/;  // without decimal 
                            validCharacters = /^\d{0,6}(\.\d{0,2})?$/;   //with decimal 2 place
                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                            const inputValue = inputField.value; 

                                        const numericValue = parseInt(inputValue, 10);

                                        if (!numericOnlyPattern.test(inputField.value)) {
                                            // Allow common validation to handle non-numeric characters
                                        } else if (inputValue.length > 3  ) {                        
                                            addErrorMessage(inputParent, 'Pacakge Number Cannot Be  Exceed 3 Digits');
                                            inputField.style.border = '2px solid red'; 

                                            if (event.type === 'change') {
                                                inputField.value = ''; 
                                            }    
                                            return;
                                            } 


                                            inputField.style.border = '';



   }else if (inputField.name === 'contact' || inputField.id =='agent_contact') {
   
   
                                            
                                           // validCharacters = /^\d{7,15}$/;

                                            validCharacters = /^[\d\-\s]{0,20}$/; // alllow dash(-) and space 

                                            // const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                                            // const inputValue = inputField.value; 

                                            //             const numericValue = parseInt(inputValue, 10);

                                            //             if (!numericOnlyPattern.test(inputField.value)) {
                                            //                 // Allow common validation to handle non-numeric characters
                                            //             } else if (inputValue.length > 10 || inputValue.length < 7  ) {                        
                                            //                 addErrorMessage(inputParent, 'Mobile Number Must Be Between 7 And 10 Digits.');
                                            //                 inputField.style.border = '2px solid red'; 

                                            //                 if (event.type === 'change') {
                                            //                     inputField.value = ''; 
                                            //                 }    
                                            //                 return;
                                            //                 } 


                                            //                 inputField.style.border = '';



   }else if (inputField.name =='chassis_number' || inputField.name =='declaration_number' || inputField.name =='container_number' ) {
   
   
                                            
       validCharacters = /^\d{0,20}$/;
   const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
   const inputValue = inputField.value; 

               const numericValue = parseInt(inputValue, 10);

               if (!numericOnlyPattern.test(inputField.value)) {
                   // Allow common validation to handle non-numeric characters
               } else if (inputValue.length > 20 || inputValue.length < 1  ) {                        
                   addErrorMessage(inputParent, 'This Must Be Between 1 And 20 Digits.');
                   inputField.style.border = '2px solid red'; 

                   if (event.type === 'change') {
                       inputField.value = ''; 
                   }    
                   return;
                   } 


                   inputField.style.border = '';



}else if (inputField.name === 'bol_number') {
   
   
                                            
   //  validCharacters = /^[A-Z]{4}\/[A-Z]{3}\/[A-Z]{2}\/[A-Z]\/\d{3}\/\d{2}-\d{2}$/;

    validCharacters = /^[A-Za-z0-9\/\-]+$/;

const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
const inputValue = inputField.value; 

           const numericValue = parseInt(inputValue, 10);
                 if (inputValue.length > 25 || inputValue.length < 1  ) {                        
               addErrorMessage(inputParent, 'This Must Be Between 1 And 20 Digits.');
               inputField.style.border = '2px solid red'; 

               if (event.type === 'change') {
                   inputField.value = ''; 
               }    
               return;
               } 


               inputField.style.border = '';



}else if (inputField.type === 'date') {

  
         
                                validCharacters = /^(?:\d{4}[-\/]\d{2}[-\/]\d{2})$/; 
                                return;
                                
                                const inputValue = inputField.value.trim();
   
   
                                const inputDate = new Date(inputValue.replace(/[-\/]/g, '/'));
                          const today = new Date();
                          today.setHours(0, 0, 0, 0); // Set to midnight for comparison
   
                                         // Check if the date is in the past
                          if (inputDate < today) {
                             addErrorMessage(inputParent, 'The date cannot be in the past.');
                             inputField.style.border = '2px solid red';
                             
                             if (event.type === 'change') {
                                   inputField.value = ''; // Clear the input field on change
                             }
                             
                             return; // Exit the function after handling the error
                          }
   
   
                 inputField.style.border = '';
                  }else if (inputField.name === 'model_name' || inputField.name ==='models[]') {
                     // Only numbers allowed, between 7 and 10 digits
                     validCharacters = /^[a-zA-Z0-9]{4,20}$/;
                  }else if(inputField.type =='email'){
                     validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
                     const allowedEmailChars = /^[a-zA-Z0-9._@-]+$/; 
                    
                     const inputValue = inputField.value; 
   
                     // If input contains invalid characters, skip email validation and let common validation handle it
                               if (!allowedEmailChars.test(inputValue)) {
                                   // Skip email validation, allowing common validation to catch unwanted characters
                               } else if (!validCharacters.test(inputValue)) {                        
                                 addErrorMessage(inputParent, 'Invalid Email Format.');
                                 inputField.style.border = '1px solid red'; 
   
                                 if (event.type === 'change') {
                                   inputField.value = ''; 
                                 }    
                                 return;
                             } 
   
   
                             inputField.style.border = '';
   
                  }else if(inputField.type ==='password'){
      
                                  const hasSequentialChars = (password) => {
                                       console.log("passworddddddd -", password)
                                       const length = password.length;
                                       
                                       // Check for ascending sequences (e.g., "123", "abc")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                                return true; // Ascending sequence found
                                          }
                                       }
      
                                       // Check for descending sequences (e.g., "321", "cba")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                                return true; // Descending sequence found
                                          }
                                       }
                                       
                                       return false; // No sequential characters
                                    };
      
                     
      
                     validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;
      
      
                                                // Check if password meets the required pattern
                                 if (!validCharacters.test(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                                    inputField.style.border = '1px solid red';
                                    if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
                                 // Check for sequential characters
                                 if (hasSequentialChars(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                                    inputField.style.border = '1px solid red';
                                       if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
      
                                 // Function to check for sequential characters in the password
                       
                                                         
      
      
      
                  }
                    
      
                  
      
      
      
          // Handle file input validation
          if (inputField.type === 'file') {
              const file = inputField.files[0];
              if (file && !validImageTypes.includes(file.type)) {
                  addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
                  inputField.value = ''; // Clear the file input field
                  inputField.style.border = '1px solid red';
                  return;
              }
          } else {
              // For normal text/number input validation
              if (event.type === 'keyup') {
                  if (!validCharacters.test(inputField.value)) {
                      addErrorMessage(inputParent, 'Invalid character entered!');
                      inputField.style.border = '1px solid red';
                      
                  }
              }
      
              if (event.type === 'change') {
                  if (!validCharacters.test(inputField.value)) {
                      // On invalid input during change event, clear the field and show an error
                      inputField.value = ''; // Clear invalid input
                      addErrorMessage(inputParent, 'Invalid character or format!');
                      inputField.style.border = '1px solid red';
                  } else {
                      // Clear error when value is corrected
                      inputField.style.border = '';
                      if (errorMessage) errorMessage.remove();
                  }
              }
          }
      }
      
   
   
   
   
   
      // Function to display error messages under the input field or container for checkboxes
      function addErrorMessage(parent, message) {
          if (!parent.querySelector('.error-message')) {
              const errorMessage = document.createElement('div');
              errorMessage.className = 'error-message';
              errorMessage.style.color = 'red';
              errorMessage.style.fontSize = '12px';
              errorMessage.innerText = message;
              parent.appendChild(errorMessage);
          }
      }
      
      
   
   
      document.addEventListener('DOMContentLoaded', () => {    
       addRealTimeValidation('#kilform');  // Activate real-time validation

       const form = document.querySelector(`#kilform`); 
      // const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
      const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
   
            requiredFields.forEach(field => {
    
       const label = document.querySelector(`label[for='${field.name}']`); // Use name instead of id
      // Check if the field is empty
                     if (label && !label.innerHTML.includes('*') && field.value.trim() === '') { 
                                          // Append asterisk only if the field is empty
                            label.innerHTML += ' <span style="color:red;">*</span>'; 
                        }

   
   });
   
   
   });



   //============= Clear Kilalert msg after 5 sec =========== 
    // Wait for the DOM to fully load
    document.addEventListener("DOMContentLoaded", function() {
        // Set a timeout to clear the message after 5 seconds
        setTimeout(function() {
            const messageElement = document.getElementById("kilmessage");
            if (messageElement) {
                messageElement.innerHTML = ""; // Clear the message
            }
        }, 5000); // 5000 milliseconds = 5 seconds
    });
   




    function initializeIntlTelInput(index, i) {
    const input = document.querySelector(`#kilvishcontact_${index}_${i}`);
    const errorMsg = document.createElement("div");
    errorMsg.id = `error-msg_${index}_${i}`;
    errorMsg.style.color = "red";
    errorMsg.style.fontSize = "0.9em";
    errorMsg.style.marginTop = "5px";
    input.parentNode.appendChild(errorMsg);

    const iti = window.intlTelInput(input, {
        preferredCountries: ["jm", "us"], // Customize based on your needs
        separateDialCode: true,
        initialCountry: "jm",
        autoPlaceholder: "off", // Disable auto-placeholder
        autoHideDialCode: false, // Prevent hiding the dial code
        nationalMode: false, // Ensure the number is shown without spaces
        formatOnDisplay: false, // Disable auto-formatting on display
        utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js",
    });

    const errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

    const validateNumber = () => {
        const errorCode = iti.getValidationError();
        const valid = iti.isValidNumber();

        if (valid) {
            errorMsg.textContent = ""; // Clear error message
            input.style.borderColor = ""; // Reset border color
        } else {
            const msg = errorMap[errorCode] || "Invalid number";
            errorMsg.textContent = msg; // Show error message
            input.style.borderColor = "red"; // Highlight input box
        }

        // Update hidden fields even if invalid
        const fullPhoneNumber = iti.getNumber();
        const countryCode = "+" + iti.getSelectedCountryData().dialCode;
        document.querySelector(`#fullkilvishcontact_${index}_${i}`).value = fullPhoneNumber;
        document.querySelector(`#country_code_${index}_${i}`).value = countryCode;
    };

    // Validate on input
    input.addEventListener("input", validateNumber);

    // Validate on country change
    input.addEventListener("countrychange", validateNumber);
}



document.addEventListener("DOMContentLoaded", function () {
    var input = document.querySelector("#kilvishcontact");
    var errorMsg = document.createElement("div");
    errorMsg.id = "error-msg";
    errorMsg.style.color = "red";
    errorMsg.style.fontSize = "0.9em";
    errorMsg.style.marginTop = "5px";
    input.parentNode.appendChild(errorMsg);

    var iti = window.intlTelInput(input, {
        preferredCountries: ["jm", "us"], // Customize based on your needs
        separateDialCode: true,
        initialCountry: "jm",
        autoPlaceholder: "off", // Disable auto-placeholder
        autoHideDialCode: false, // Prevent hiding the dial code
        nationalMode: false, // Ensure the number is shown without spaces
        formatOnDisplay: false, // Disable auto-formatting on display
        utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js",
    });

    const errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

    const validateNumber = () => {
        var errorCode = iti.getValidationError();
        var valid = iti.isValidNumber();

        if (valid) {
            errorMsg.textContent = ""; // Clear error message
            input.style.borderColor = ""; // Reset border color
        } else {
            var msg = errorMap[errorCode] || "Invalid number";
            errorMsg.textContent = msg; // Show error message
            input.style.borderColor = "red"; // Highlight input box
        }

        // Update hidden fields even if invalid
        var fullPhoneNumber = iti.getNumber();
        var countryCode = "+" + iti.getSelectedCountryData().dialCode;
        document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
        document.querySelector("#country_code").value = countryCode;
    };

    // Validate on input
    input.addEventListener("input", validateNumber);

    // Validate on country change
    input.addEventListener("countrychange", validateNumber);

  
});

   
   
   //====================== Command Kilvish validation End ===============================





   //=======auto dash include after 3 digits  -> 
   function formatTRN(input) {
      // Remove all non-numeric characters
      let value = input.value.replace(/\D/g, '');
      
      // Add dashes at the correct positions
      if (value.length > 3 && value.length <= 6) {
        input.value = value.slice(0, 3) + '-' + value.slice(3);
      } else if (value.length > 6) {
        input.value = value.slice(0, 3) + '-' + value.slice(3, 6) + '-' + value.slice(6, 9);
      } else {
        input.value = value; // If less than 3 digits, no dashes
      }
    }


</script>










