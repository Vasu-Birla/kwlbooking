<!-- Footer Begin  -->
  <footer id="footer" class="footer light-background">
    <div class="container footer-top">
      <div class="row gy-4">
        <div class="col-lg-4 col-md-6 footer-about">
          <a href="/" class="logo d-flex align-items-center">
            <img src="assets/img/logo.png">
          </a>
          <div class="social-links d-flex mt-4">
            <a href="#"><i class="bi bi-twitter-x"></i></a>
            <a href="#"><i class="bi bi-facebook"></i></a>
            <a href="#"><i class="bi bi-instagram"></i></a>
            <a href="#"><i class="bi bi-linkedin"></i></a>
          </div>
        </div>
        <div class="col-lg-2 col-md-3 footer-links">
          <h4>Useful Links</h4>
          <ul>
            <li><a href="#">Terms & Conditions</a></li>
            <li><a href="#">Privacy policy</a></li>
          </ul>
        </div>
        <div class="col-lg-3 col-md-3 footer-links">
          <h4>Our Services</h4>
          <ul>
            <li><a href="#">Calender</a></li>
            <li><a href="calendar.html">Make an Appointment</a></li>
          </ul>
        </div>
        <div class="col-lg-3 col-md-3 footer-links">
          <h4>Get In Touch</h4>
          <div class="footer-contact">
            <p class="mt-3"><strong>Phone:</strong> <span>+1 9876543210</span></p>
            <p><strong>Email:</strong> <span>support@kwlias.com</span></p>
          </div>
        </div>
      </div>
    </div>
    <div class="container copyright text-center mt-4">
      <p>Â© <span>Copyright 2024</span> <strong class="px-1 sitename">Kingston Wharves</strong> <span>All Rights Reserved.</span> Designed by <a href="https://cyberimpulses.com/" target="_blank">Amber Innovations</a></p>
    </div>
  </footer>
  <!-- Footer End -->



  
  <!-- Scroll Top -->
  <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

  <!-- Vendor JS Files -->
  <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="assets/vendor/php-email-form/validate.js"></script>
  <script src="assets/vendor/aos/aos.js"></script>
  <script src="assets/vendor/glightbox/js/glightbox.min.js"></script>
  <script src="assets/vendor/purecounter/purecounter_vanilla.js"></script>
  <script src="assets/vendor/swiper/swiper-bundle.min.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <!-- Main JS File -->
  <script src="assets/js/main.js"></script>

  <!-- Datatables CSS -->
<script src="https://code.jquery.com/jquery-3.7.1.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.datatables.net/2.1.8/js/dataTables.js"></script>
<script src="https://cdn.datatables.net/2.1.8/js/dataTables.bootstrap4.js"></script>
<script>
    new DataTable('#example');
</script>

</body>
</html>




<!-- Login POPUP CODE START -->
<div id="popup1" class="overlay">
  <div class="popup">
    <div class="popup-header" style="padding-bottom: 20px;">
      <img src="assets/img/favicon.png" alt="" style="width: 14%;"><span style="color: #07233d;font-size: 20px;">Kingston Wharves</span>
      <a class="close" href="#">&times;</a>
    </div>
    <div class="headings-full">
      <!-- <h3 class="headings"> Welcome To Job Portal Website 2 </h3> -->
      <center>
        <h4>Login</h4>
        <p>User the registered email address to login</p>
      </center>
      <hr>
    </div>
    <div class="content">
      <div class="full-content">
        <div id="errmsg1"></div>
        <div id="loader1" style="display:none; font-size:16px; color:rgb(8, 233, 102); margin-bottom:15px;"></div>

        <form id="loginForm" method="post" action="/login">   
        <div class="form-group row">
          <div class="col-lg-12 form-group">
           
            <label>Email</label>
            <input type="email" name="email" id="loginEmail" class="form-control" placeholder="Your Email" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
          </div>
          <div class="col-lg-12 form-group">
           
            <label>OTP</label>
            <input type="text" name="otp" id="loginOtp" class="form-control" placeholder="Your OTP" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
          </div>
          <div class="form-group">
            <button type="button" class="form-control btn-get-otp" id="kilotp" onclick="getOtp()" style="background-color: #1977cc; color: white;">Get OTP</button>
            <span id="otpStatus" class="form-control otps"></span>
          </div>
          <div class="form-group justify-content-between align-items-center">
            <!-- <div class="form-check">
              <label class="form-check-label text-muted" style="color: black !important;">
                <input type="checkbox" class="form-check-input">
                Remember me
                <i class="input-helper"></i>
              </label>
            </div> -->
          </div>
          <div class="col-md-12 text-center">
            <div class="fpassword d-flex">
              <button type="button" class="form-control" style="background: #f1bf17; color: white; font-weight: 500; padding: 7px 15px; margin: 0px 5px;" onclick="login()">Login</button>
              <button type="button" class="form-control btn-get-otp" id="kilotpresend" onclick="getOtp()" style="background-color: #26b28b !important; color: white; display: none;"> Resend</button>
              <!-- <a href="#" class="form-control" style="text-align: left; background: #26b28b; color: white; font-weight: 500; padding: 7px 15px; margin: 0px 5px;">Forget Password</a> -->
            </div>
          </div>
        </div>

        </form>
      </div>
    </div>
  </div>
</div>
<!-- Login POPUP CODE END -->

<script>
//------- login modal script 
document.addEventListener("DOMContentLoaded", function() {
  // Get the modal and login button
  var modal = document.getElementById("popup1");
  var loginButton = document.querySelector("a.btn-getstarted");
  
  // Get the close button
  var closeBtn = document.querySelector(".popup .close");

  // Function to open the modal
  function openModal() {
    modal.classList.add("show"); // Add the "show" class to make it visible
    window.location.hash = "popup1"; // Update the URL with #popup1
  }

  // Function to close the modal
  function closeModal() {
    modal.classList.remove("show"); // Remove the "show" class to hide it
    history.pushState("", document.title, window.location.pathname); // Remove the hash from URL
  }

  // Open the modal when the login button is clicked
  loginButton.onclick = function(event) {
    event.preventDefault(); // Prevent default link behavior
    openModal();
  };

  // Close the modal only when the close button is clicked
  closeBtn.onclick = function() {
    closeModal();
  };
});



</script>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    var input = document.querySelector("#phone");
    var iti = window.intlTelInput(input, {
      preferredCountries: ["us", "gb"], // Customize based on your needs
      separateDialCode: true,
      utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
    });

// Update hidden input field with full phone number
input.addEventListener("input", function() {
  var fullPhoneNumber = iti.getNumber();
  var countryCode =   '+'+iti.getSelectedCountryData().dialCode;


  document.querySelector("#fullPhoneNumber").value = fullPhoneNumber;
  document.querySelector("#countryCode").value = countryCode;

});

// Initialize hidden field with the current value on page load
var fullPhoneNumber = iti.getNumber();
var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
document.querySelector("#fullPhoneNumber").value = fullPhoneNumber;
document.querySelector("#countryCode").value = countryCode;

});




document.addEventListener("DOMContentLoaded", function() {
    var input = document.querySelector("#phone1");
    var iti = window.intlTelInput(input, {
      preferredCountries: ["us", "gb"], // Customize based on your needs
      separateDialCode: true,
      utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
    });

// Update hidden input field with full phone number
input.addEventListener("input", function() {
  var fullPhoneNumber = iti.getNumber();
  var countryCode =   '+'+iti.getSelectedCountryData().dialCode;


  document.querySelector("#fullPhoneNumber1").value = fullPhoneNumber;
  document.querySelector("#countryCode1").value = countryCode;

});

// Initialize hidden field with the current value on page load
var fullPhoneNumber = iti.getNumber();
var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
document.querySelector("#fullPhoneNumber1").value = fullPhoneNumber;
document.querySelector("#countryCode1").value = countryCode;

});







</script>


<!-- SIGNIN POPUP SCRIPT START  -->
<script>
let openModalBtn = document.getElementById("openModalBtn");
let modal = document.getElementById("myModal");
let closeModalBtn = document.getElementById("closeModalBtn");

openModalBtn.addEventListener("click", function() {
  modal.style.display = "block";
});

closeModalBtn.addEventListener("click", function() {
  modal.style.display = "none";
});

window.addEventListener("click", function(event) {
  if (event.target === modal) {
      modal.style.display = "none";
  }
});

function regisermodal(){
openModalBtn.click();
}

function loginmodal(){
modal.style.display = "none";
}



function backbutton(){

document.getElementById('showrole').style.display = "block";

document.getElementById('jobs').style.display = "none";

document.getElementById('Employer').style.display = "none";

document.getElementById("openModalBtn").click();

}

</script>
<!-- REGISTER POPUP SCRIPT START  -->
<script>
function openPage1(pageName,elmnt,color) {
document.getElementById('showrole').style.display = "none";
var i, tabcontent, tablinks;
tabcontent = document.getElementsByClassName("tabcontent1");
for (i = 0; i < tabcontent.length; i++) {
  tabcontent[i].style.display = "none";
}
tablinks = document.getElementsByClassName("tablink1");
for (i = 0; i < tablinks.length; i++) {
  tablinks[i].style.backgroundColor = "";
}
document.getElementById(pageName).style.display = "block";
elmnt.style.backgroundColor = color;



}



function openPage(pageName,elmnt,color) {
var i, tabcontent, tablinks;
tabcontent = document.getElementsByClassName("tabcontent");
for (i = 0; i < tabcontent.length; i++) {
tabcontent[i].style.display = "none";
}
tablinks = document.getElementsByClassName("tablink");
for (i = 0; i < tablinks.length; i++) {
tablinks[i].style.backgroundColor = "";
}
document.getElementById(pageName).style.display = "block";
elmnt.style.backgroundColor = color;
}


// Get the element with id="defaultOpen" and click on it
document.getElementById("defaultOpen").click();


function myFunction() {
document.getElementById("myDropdown").classList.toggle("show");
}

// Close the dropdown if the user clicks outside of it
window.onclick = function(event) {
if (!event.target.matches('.dropbtn')) {
var dropdowns = document.getElementsByClassName("dropdown-content");
var i;
for (i = 0; i < dropdowns.length; i++) {
  var openDropdown = dropdowns[i];
  if (openDropdown.classList.contains('show')) {
    openDropdown.classList.remove('show');
  }
}
}
}
</script>


</body>

</html>


<script>



async function openOtpModal() {
        const errorMessageDiv = document.getElementById('errmsg0');
        const loaderDiv = document.getElementById('loader0');
        const loaderDivResend = document.getElementById('loader0resend');

        const otpMessageDiv = document.getElementById('otpmsg0');

        const email = document.getElementById('email0').value;
        const company_name = document.getElementById('company_name').value;
        // const company_location = document.getElementById('company_location').value;
        // const company_mobile = document.getElementById('phone1').value;
       
        // const language = document.getElementById('language0').value;

        if (company_name &&  email) {
            console.log("done");
        } else {
            errorMessageDiv.textContent = 'Please fill out all required fields.';
            errorMessageDiv.style.color = 'red';
            return;
        }

      

        errorMessageDiv.textContent = '';
        // document.getElementById('emailDisplay').innerText = email;

        document.getElementById('emailDisplayUnique').innerText = email; // Updated ID
     
        // Show loader and message
    loaderDiv.style.display = 'block';
    loaderDiv.innerHTML = `<div class="spinner-border text-success" role="status"></div> Sending OTP...`;
    // loaderDiv.textContent = 'Sending OTP...';

    loaderDivResend.style.display = 'block';
    loaderDivResend.innerHTML = `<div class="spinner-border text-success" role="status"></div> Re-sending OTP...`;

    


        // Send OTP to the email
        const response = await fetch('/sendsignupOTP', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email })
        });

        const result = await response.json();

        loaderDiv.style.display = 'none';
        loaderDivResend.style.display = 'none';
        
        if (result.msg && !result.exists) {
           // $('#otpModal').modal('show');
            $('#otpModalUnique0').modal('show'); // Updated ID
            otpMessageDiv.textContent = `âA one time password (OTP) has been sent to ${email}. If you do not receive the mail, please also check your SPAM mailbox`;
        otpMessageDiv.style.color = 'grey';
        } else if(result.msg && result.exists){
          errorMessageDiv.textContent = `Account with Email: ${email} is already exists`;
          errorMessageDiv.style.color = 'red';

        } else {
            errorMessageDiv.textContent = 'Failed to send OTP. Please try again.';
            errorMessageDiv.style.color = 'red';
        }
    }

    async function openOtpModalUser() {
        const errorMessageDiv = document.getElementById('errmsg');
        const loaderDiv = document.getElementById('loader');
        const loaderDivResend = document.getElementById('loaderresend');

        const otpMessageDiv = document.getElementById('otpmsg');
        

        const user_name = document.getElementById('user_name').value;
        // const user_location = document.getElementById('user_location').value;
        // const user_mobile = document.getElementById('phone').value;
        const email = document.getElementById('email').value;
        // const language = document.getElementById('language').value;

        if (user_name && email) {
            console.log("done");
        } else {
            errorMessageDiv.textContent = 'Please fill out all required fields.';
            errorMessageDiv.style.color = 'red';
            return;
        }

        errorMessageDiv.textContent = '';
        // document.getElementById('emailDisplay').innerText = email;
        document.getElementById('emailDisplayUnique').innerText = email; // Updated ID

        // Show loader and message
    loaderDiv.style.display = 'block';
    loaderDiv.innerHTML = `<div class="spinner-border text-success" role="status"></div> Sending OTP...`;

    loaderDivResend.style.display = 'block';
    loaderDivResend.innerHTML = `<div class="spinner-border text-success" role="status"></div> Re-sending OTP...`;

    

    // loaderDiv.textContent = 'Sending OTP...';


        // Send OTP to the email
        const response = await fetch('/sendsignupOTP', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email })
        });

        const result = await response.json();

        loaderDiv.style.display = 'none';
        loaderDivResend.style.display = 'none';

        

        
        
        if (result.msg && !result.exists) {
           // $('#otpModal').modal('show');
            $('#otpModalUnique').modal('show'); // Updated ID
            otpMessageDiv.textContent = `âA one time password (OTP) has been sent to ${email}. If you do not receive the mail, please also check your SPAM mailbox`;
        otpMessageDiv.style.color = 'grey';
        } else if(result.msg && result.exists){
          errorMessageDiv.textContent = `Account with Email: ${email} is already exists`;
          errorMessageDiv.style.color = 'red';

        } else {
            errorMessageDiv.textContent = 'Failed to send OTP. Please try again.';
            errorMessageDiv.style.color = 'red';
        }
    }


    function closeOtpModal(){
      $('#otpModalUnique').modal('hide');
    }

    function closeOtpModal0(){
      $('#otpModalUnique0').modal('hide');
    }




    async function verifyOtp0() {
    const otp = document.getElementById('otp0').value;
    const email = document.getElementById('email0').value; // Use the email from the form
    const signup_type = document.getElementById('signup_type0').value;
    

    const errorMessageDiv = document.getElementById('otpmsg0');

    const response = await fetch('/verifyotp', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, otp })
    });

    const result = await response.json();

    if (result.success) {
        // OTP verified, submit the registration form
        if(signup_type== 'user'){
          document.getElementById('userRegisterForm').submit();
        }else{
          document.getElementById('companyRegisterForm').submit();
        }
        
    } else {
        // alert('Invalid or expired OTP');
        errorMessageDiv.textContent = 'Invalid or expired OTP';
        errorMessageDiv.style.color = 'red';
        return;
    }
}



 async function verifyOtp() {
    const otp = document.getElementById('otp').value;
    const email = document.getElementById('email').value; // Use the email from the form
    const signup_type = document.getElementById('signup_type').value;
    

    const errorMessageDiv = document.getElementById('otpmsg');

    const response = await fetch('/verifyotp', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, otp })
    });

    const result = await response.json();

    if (result.success) {
        // OTP verified, submit the registration form
        if(signup_type== 'user'){
          document.getElementById('userRegisterForm').submit();
        }else{
          document.getElementById('companyRegisterForm').submit();
        }
        
    } else {
        // alert('Invalid or expired OTP');
        errorMessageDiv.textContent = 'Invalid or expired OTP';
        errorMessageDiv.style.color = 'red';
        return;
    }
}






//-------------- login part ----------- 

async function getOtp() {
const email = document.getElementById('loginEmail').value;
const errorMessageDiv = document.getElementById('errmsg1');
const loaderDiv = document.getElementById('loader1');

if (!email) {
 
    errorMessageDiv.textContent = 'Please enter your email';
    errorMessageDiv.style.color = 'red';
          
    return;
}



        // Show loader and message
        loaderDiv.style.display = 'block';
    loaderDiv.innerHTML = `<div class="spinner-border text-success" role="status"></div> Sending OTP...`;
    // loaderDiv.textContent = 'Sending OTP...';


const response = await fetch('/getLoginOtp', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({ email })
});

const result = await response.json();
const otpStatus = document.getElementById('otpStatus');

loaderDiv.style.display = 'none';

if (result.msg == true && result.exists == true) {
    otpStatus.textContent = `âA one time password (OTP) has been sent to ${email} .  If you do not receive the mail, please also check your SPAM mailbox.`;
    otpStatus.style.color = 'green';
    document.getElementById('loginOtp').value = result.otp;
    document.getElementById('kilotp').style.display = 'none';
    document.getElementById('kilotpresend').style.display = 'block';
} else if (!result.exists) {
    otpStatus.textContent = 'Account not fount';
    document.getElementById('errmsg1').textContent = ''
    otpStatus.style.color = 'red';
} else {
    otpStatus.textContent = 'Failed to send OTP. Please try again.';
    otpStatus.style.color = 'red';
}
}

async function login() {
const email = document.getElementById('loginEmail').value;
const otp = document.getElementById('loginOtp').value;
const errorMessageDiv = document.getElementById('errmsg1');

if (!email || !otp) {
    errorMessageDiv.textContent = 'Please enter both email and OTP';
    errorMessageDiv.style.color = 'red';
          
    return;
}

const response = await fetch('/verifyLoginOtp', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({ email, otp })
});

const result = await response.json();

if (result.success) {
  document.getElementById('loginForm').submit();
        
    } else {
        // alert('Invalid or expired OTP');
        errorMessageDiv.textContent = 'Invalid or expired OTP';
        errorMessageDiv.style.color = 'red';
        return;
    }
}






//---------------- Input Validations ---------------------- 




   

</script>


<script>

//-------- Notifcation kilScript ---------- 
let showAllNotifications = false;

function fetchNotificationswithoutmessge() {
  fetch('/notificationsUsers')
      .then(response => response.json())
      .then(data => {
          const badge = document.querySelector('.header-badge');
          const notificationList = document.querySelector('.dropdown-menu');

          // Update the notification counter
          if (data.unreadCount > 0) {
              badge.textContent = data.unreadCount;
              badge.style.display = 'inline';
          } else {
              badge.style.display = 'none';
          }

          // Update the notification list
          notificationList.innerHTML = `
              <li class="not-head">You have <b class="text-primary">${data.unreadCount}</b> new notifications.</li>
          `;

          const notificationsToShow = showAllNotifications ? data.notifications : data.notifications.slice(0, 5);
          
          notificationsToShow.forEach(notification => {
              const notificationClass = notification.status === 'unread' ? 'unread-notification' : '';
              notificationList.innerHTML += `
                  <li class="bell-notification ${notificationClass}" style="padding: 10px;">
                      <a href="javascript:;" class="media" onclick="markAsRead(${notification.noti_id})">
                          <span class="media-left media-icon">
                              <img class="img-circle" src="assets/img/human-1.png" alt="Notification Image" style="width: 40px; height: 40px;">
                          </span>
                          <div class="media-body">
                              <span class="block" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 180px;">${notification.title}</span><br>
                              <span class="text-muted block-time">${new Date(notification.created_at).toLocaleString()}</span>
                          </div>
                      </a>
                  </li>
              `;
          });

          if (data.notifications.length > 5) {
              notificationList.innerHTML += `
                  <li class="not-footer">
                      <a href="javascript:;" onclick="toggleNotifications()">See ${showAllNotifications ? 'less' : 'more'} notifications.</a>
                  </li>
              `;
          }
      })
      .catch(error => {
          console.error('Error fetching notifications:', error);
      });
}


function fetchNotifications() {
  fetch('/notificationsUsers')
      .then(response => response.json())
      .then(data => {
          const badge = document.querySelector('.header-badge');
          const notificationList = document.querySelector('.dropdown-menu');

          // Update the notification counter
          if (data.unreadCount > 0) {
              badge.textContent = data.unreadCount;
              badge.style.display = 'inline';
          } else {
              badge.style.display = 'none';
          }

          // Update the notification list
          notificationList.innerHTML = `
              <li class="not-head">You have <b class="text-primary">${data.unreadCount}</b> new notifications.</li>
          `;

          const notificationsToShow = showAllNotifications ? data.notifications : data.notifications.slice(0, 5);

            function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, function(m) { return map[m]; });
}

          
          notificationsToShow.forEach(notification => {
              const notificationClass = notification.status === 'unread' ? 'unread-notification' : '';

              const escapedMessage = escapeHtml(notification.message); 
              notificationList.innerHTML += `
                  <li class="bell-notification ${notificationClass}" style="padding: 10px;">
                      <a href="javascript:;" class="media" onclick="handleNotificationClick(${notification.noti_id}, '', '${notification.created_at}')">
                          <span class="media-left media-icon">
                              <img class="img-circle" src="assets/img/human-1.png" alt="Notification Image" style="width: 40px; height: 40px;">
                          </span>
                          <div class="media-body">
                              <span class="block" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 180px;">${notification.title}</span><br>
                              <span class="text-muted block-time">${new Date(notification.created_at).toLocaleString()}</span>
                          </div>
                      </a>
                  </li>
              `;
          });

          if (data.notifications.length > 5) {
              notificationList.innerHTML += `
                  <li class="not-footer">
                      <a href="javascript:;" onclick="toggleNotifications()">See ${showAllNotifications ? 'less' : 'more'} notifications.</a>
                  </li>
              `;
          }
      })
      .catch(error => {
          console.error('Error fetching notifications:', error);
      });
}



// Function to toggle between showing all notifications and only five
function toggleNotifications() {
  showAllNotifications = !showAllNotifications;
  fetchNotifications();
}

function decodeHtml(text) {
  const txt = document.createElement('textarea');
  txt.innerHTML = text;
  return txt.value;
}


function handleNotificationClick1(noti_id, message, dateTime) {
  markAsRead(noti_id);

  // message = decodeHtml(message);

  // Show SweetAlert popup with the notification message
  Swal.fire({
      html: `
          <div class="custom-popup-header">
              <div class="notification-date-time">${formatDateTime(dateTime)}</div>
          </div>
          <div class="custom-popup-body">
              ${message} <!-- Ensure the message is properly sanitized if it contains HTML -->
          </div>
      `,
      showCloseButton: true,
      customClass: {
          popup: 'custom-popup'
      },
      padding: '1em',
      backdrop: false // Optional: Adjust backdrop as needed
  });
}



function handleNotificationClick(noti_id, message, dateTime) {
  markAsRead(noti_id);

  // message = decodeHtml(message);


  fetch(`/noti/${noti_id}`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const { title, message, created_at } = data.notification;

        Swal.fire({
          html: `
          <div class="custom-popup-header">
              <div class="notification-date-time">${formatDateTime(dateTime)}</div>
          </div>
          <div class="custom-popup-body">
              ${message} <!-- Ensure the message is properly sanitized if it contains HTML -->
          </div>
      `,
          showCloseButton: true,
          showConfirmButton: false,
          customClass: {
            container: 'swal2-container',
            header: 'swal2-header',
            body: 'swal2-body'
          }
        });

        // Mark notification as read
   
      }
    });
}






// JavaScript to handle notification click and show modal
document.querySelectorAll('.mediaaaaaa').forEach(notification => {
notification.addEventListener('click', function() {
  const notificationId = this.getAttribute('data-id');





  fetch(`/api/notifications/${notificationId}`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const { title, message, created_at } = data.notification;

        Swal.fire({
          title: `Notification Details`,
          html: `
            <div class="notification-modal">
              <div class="modal-header">
                <h5>${title}</h5>
                <small>${new Date(created_at).toLocaleString()}</small>
              </div>
              <div class="modal-body">
                ${message}
              </div>
            </div>
          `,
          showCloseButton: true,
          showConfirmButton: false,
          customClass: {
            container: 'swal2-container',
            header: 'swal2-header',
            body: 'swal2-body'
          }
        });

        // Mark notification as read
   
      }
    });













});
});





function formatDateTime(dateTime) {
  const options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
  return new Date(dateTime).toLocaleDateString(undefined, options);
}

// Function to mark a notification as read
function markAsRead(noti_id) {
  fetch(`/mark-as-read/${noti_id}`, { method: 'POST' })
      .then(response => {
          if (response.ok) {
              fetchNotifications();  // Refresh notifications after marking one as read
          } else {
              return response.json().then(data => {
                  throw new Error(data.error || 'Failed to mark notification as read');
              });
          }
      })
      .catch(error => {
          console.error('Error marking notification as read:', error);
      });
}


// Function to mark a notification as read
function markAsRead(noti_id) {
  fetch(`/mark-as-read/${noti_id}`, { method: 'POST' })
      .then(response => {
          if (response.ok) {
              fetchNotifications();  // Refresh notifications after marking one as read
          } else {
              return response.json().then(data => {
                  throw new Error(data.error || 'Failed to mark notification as read');
              });
          }
      })
      .catch(error => {
          console.error('Error marking notification as read:', error);
      });
}

// Toggle notification dropdown visibility
document.querySelector('.dropdown-toggle').addEventListener('click', function() {
  const notificationList = document.querySelector('.dropdown-menu');
  notificationList.style.display = notificationList.style.display === 'none' ? 'block' : 'none';
});

// Fetch notifications on page load
document.addEventListener('DOMContentLoaded', fetchNotifications);




</script>




<script>

   //==================== Comman Kilvalidation start =====================
   
      
   function validateRequiredFields(kil) {
   
   
   const form = document.querySelector(`${kil}`); 
   
   const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
   
   
   let isValid = true;
   let kilerror = 'This Field is Required.'
   
   
   
   // Remove previous error messages and borders
   form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
   inputs.forEach(input => {
    
       input.style.border = ''; // Reset borders
   });
   
   inputs.forEach(input => {
   
   
   
                    if(input.type == 'date'){
                        
                        kilerror = "Please Select Date"
                        input.style.border = '1px solid red';
                    }else if(input.name == 'comments'){
                    
                        kilerror = 'Please Enter Comments'
                    }else if(input.type == 'email'){
                    
                    kilerror = 'Please Enter Email'
                }else if(input.type == 'password'){
                    
                    kilerror = 'Please Enter Password'
                }else{
                    kilerror = 'This Field is Required.'
                }
     
   
       if (!input.value.trim()) {  // If the required field is empty      
           isValid = false;
           input.style.border = '1px solid red'; // Set border to red for empty required fields
           addErrorMessage(input.parentNode, kilerror); // Add error message
       }
   });
   
   return isValid;
   }
   
   
   // Add real-time validation for each required field
   function addRealTimeValidation(kil) {
       const form = document.querySelector(`${kil}`); 
       const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
   
       inputs.forEach(input => {
           input.addEventListener('input', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
   
           input.addEventListener('change', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the select input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
       });
   }
   
   
   // Combined validation function
   function validateForm(kil) {
   
   
   if(!validateRequiredFields(kil)){
     event.preventDefault();
   }
   }
   
   // Add real-time validation once the document is loaded
   document.addEventListener('DOMContentLoaded', () => {
   addRealTimeValidation('#kilform');  // Activate real-time validation
   });
   
   
   function validateKilvishInput(event) {
          const inputField = event.target;
      
          // General valid character sets
          // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;
      
          let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 
      
          // Define allowed image file types
          const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];
      
          // Use parentNode for regular inputs, container for checkboxes
          const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
          const inputParent = inputField.parentNode;
      
          // Remove previous error message and border
          let errorMessage = inputParent.querySelector('.error-message');
          if (errorMessage) errorMessage.remove();
          inputField.style.border = ''; // Reset border
      
          // Custom validations based on input name
          if (inputField.name === 'description' || inputField.name ===  'address') {
              validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;
      
              // Check length limit
              if (inputField.value.length > 400) {
                  addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
                  inputField.style.border = '1px solid red';
                  inputField.value = inputField.value.substring(0, 400); // Truncate the input
                  return;
              }
          }  else if (inputField.name === 'agent_name') {
   
                         validCharacters = /^[a-zA-Z\s]*$/; 
                   
                       // const allowedChars = /^[a-zA-Z0-9._@-]+$/;  //for kilMiddle Conditon 
                        const allowedChars = /^[a-zA-Z0-9._@-\s]+$/; // For any additional validations
                        
                        const inputValue = inputField.value; 

                          

                                    if (!allowedChars.test(inputField.value)) {
                                        // Allow common validation to handle non-numeric characters
                                    } else if (inputValue.length > 20 || inputValue.length < 2  ) {                        
                                        addErrorMessage(inputParent, 'Agent Name Must Be Between 2 And 20 Characters.');
                                        inputField.style.border = '1px solid red'; 

                                        if (event.type === 'change') {
                                            inputField.value = ''; 
                                        }    
                                        return;
                                        } 


                                        inputField.style.border = '';



                        } else if (inputField.name === 'otp') {
   
   
   
              validCharacters = /^\d{6,6}$/;
              const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
            const inputValue = inputField.value; 
   
                        const numericValue = parseInt(inputValue, 10);
   
                        if (!numericOnlyPattern.test(inputField.value)) {
                           // Allow common validation to handle non-numeric characters
                       } else if (inputValue.length > 6 || inputValue.length < 6  ) {                        
                              addErrorMessage(inputParent, 'OTP must be exactly 6 digits');
                              inputField.style.border = '1px solid red'; 
   
                              if (event.type === 'change') {
                                 inputField.value = ''; 
                              }    
                              return;
                           } 
   
   
                           inputField.style.border = '';
   
   
   
          }else if (inputField.name === 'credit_limit') { 
   
          
   
   
                            // validCharacters = /^\d{0,6}$/;  // without decimal 
                            validCharacters = /^\d{0,6}(\.\d{0,2})?$/;   //with decimal 2 place
                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                            const inputValue = inputField.value; 
                      
                                        const numericValue = parseInt(inputValue, 10);

                                        if (!numericOnlyPattern.test(inputField.value)) {
                                            // Allow common validation to handle non-numeric characters
                                        } else if (inputValue.length > 5 || inputValue == 0  ) {                        
                                            addErrorMessage(inputParent, 'Credit Limit Amount Cannot Be 0 Or Exceed 5 Digits');
                                            inputField.style.border = '2px solid red'; 

                                            if (event.type === 'change') {
                                                inputField.value = ''; 
                                            }    
                                            return;
                                            } 


                                            inputField.style.border = '';



                            }else if (inputField.name === 'agent_contact' || inputField.id =='agent_contact') {
   
   
                                            
                                            validCharacters = /^\d{7,10}$/;
                                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                                            const inputValue = inputField.value; 

                                                        const numericValue = parseInt(inputValue, 10);

                                                        if (!numericOnlyPattern.test(inputField.value)) {
                                                            // Allow common validation to handle non-numeric characters
                                                        } else if (inputValue.length > 10 || inputValue.length < 7  ) {                        
                                                            addErrorMessage(inputParent, 'Mobile Number Must Be Between 7 And 10 Digits.');
                                                            inputField.style.border = '2px solid red'; 

                                                            if (event.type === 'change') {
                                                                inputField.value = ''; 
                                                            }    
                                                            return;
                                                            } 


                                                            inputField.style.border = '';



   }else if (inputField.type === 'date') {
         
                                validCharacters = /^(?:\d{4}[-\/]\d{2}[-\/]\d{2})$/; 
                                
                                const inputValue = inputField.value.trim();
   
   
                                const inputDate = new Date(inputValue.replace(/[-\/]/g, '/'));
                          const today = new Date();
                          today.setHours(0, 0, 0, 0); // Set to midnight for comparison
   
                                         // Check if the date is in the past
                          if (inputDate < today) {
                             addErrorMessage(inputParent, 'The date cannot be in the past.');
                             inputField.style.border = '2px solid red';
                             
                             if (event.type === 'change') {
                                   inputField.value = ''; // Clear the input field on change
                             }
                             
                             return; // Exit the function after handling the error
                          }
   
   
                 inputField.style.border = '';
                  }else if (inputField.name === 'model_name' || inputField.name ==='models[]') {
                     // Only numbers allowed, between 7 and 10 digits
                     validCharacters = /^[a-zA-Z0-9]{4,20}$/;
                  }else if(inputField.type =='email'){
                     validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
                     const allowedEmailChars = /^[a-zA-Z0-9._@-]+$/; 
                    
                     const inputValue = inputField.value; 
   
                     // If input contains invalid characters, skip email validation and let common validation handle it
                               if (!allowedEmailChars.test(inputValue)) {
                                   // Skip email validation, allowing common validation to catch unwanted characters
                               } else if (!validCharacters.test(inputValue)) {                        
                                 addErrorMessage(inputParent, 'Invalid Email Format.');
                                 inputField.style.border = '1px solid red'; 
   
                                 if (event.type === 'change') {
                                   inputField.value = ''; 
                                 }    
                                 return;
                             } 
   
   
                             inputField.style.border = '';
   
                  }else if(inputField.type ==='password'){
      
                                  const hasSequentialChars = (password) => {
                                       console.log("passworddddddd -", password)
                                       const length = password.length;
                                       
                                       // Check for ascending sequences (e.g., "123", "abc")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                                return true; // Ascending sequence found
                                          }
                                       }
      
                                       // Check for descending sequences (e.g., "321", "cba")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                                return true; // Descending sequence found
                                          }
                                       }
                                       
                                       return false; // No sequential characters
                                    };
      
                     
      
                     validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;
      
      
                                                // Check if password meets the required pattern
                                 if (!validCharacters.test(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                                    inputField.style.border = '1px solid red';
                                    if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
                                 // Check for sequential characters
                                 if (hasSequentialChars(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                                    inputField.style.border = '1px solid red';
                                       if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
      
                                 // Function to check for sequential characters in the password
                       
                                                         
      
      
      
                  }
                    
      
                  
      
      
      
          // Handle file input validation
          if (inputField.type === 'file') {
              const file = inputField.files[0];
              if (file && !validImageTypes.includes(file.type)) {
                  addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
                  inputField.value = ''; // Clear the file input field
                  inputField.style.border = '1px solid red';
                  return;
              }
          } else {
              // For normal text/number input validation
              if (event.type === 'keyup') {
                  if (!validCharacters.test(inputField.value)) {
                      addErrorMessage(inputParent, 'Invalid character entered!');
                      inputField.style.border = '1px solid red';
                      
                  }
              }
      
              if (event.type === 'change') {
                  if (!validCharacters.test(inputField.value)) {
                      // On invalid input during change event, clear the field and show an error
                      inputField.value = ''; // Clear invalid input
                      addErrorMessage(inputParent, 'Invalid character or format!');
                      inputField.style.border = '1px solid red';
                  } else {
                      // Clear error when value is corrected
                      inputField.style.border = '';
                      if (errorMessage) errorMessage.remove();
                  }
              }
          }
      }
      
   
   
   
   
   
      // Function to display error messages under the input field or container for checkboxes
      function addErrorMessage(parent, message) {
          if (!parent.querySelector('.error-message')) {
              const errorMessage = document.createElement('div');
              errorMessage.className = 'error-message';
              errorMessage.style.color = 'red';
              errorMessage.style.fontSize = '12px';
              errorMessage.innerText = message;
              parent.appendChild(errorMessage);
          }
      }
      
      
   
   
      document.addEventListener('DOMContentLoaded', () => {    
       addRealTimeValidation('#kilform');  // Activate real-time validation

       const form = document.querySelector(`#kilform`); 
      // const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
      const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
   
            requiredFields.forEach(field => {
    
       const label = document.querySelector(`label[for='${field.name}']`); // Use name instead of id
      // Check if the field is empty
                     if (label && !label.innerHTML.includes('*') && field.value.trim() === '') { 
                                          // Append asterisk only if the field is empty
                            label.innerHTML += ' <span style="color:red;">*</span>'; 
                        }

   
   });
   
   
   });



   //============= Clear Kilalert msg after 5 sec =========== 
    // Wait for the DOM to fully load
    document.addEventListener("DOMContentLoaded", function() {
        // Set a timeout to clear the message after 5 seconds
        setTimeout(function() {
            const messageElement = document.getElementById("kilmessage");
            if (messageElement) {
                messageElement.innerHTML = ""; // Clear the message
            }
        }, 5000); // 5000 milliseconds = 5 seconds
    });
   
   
   
   //====================== Command Kilvish validation End ===============================




</script>


