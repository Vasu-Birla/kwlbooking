

<%- include ("header.ejs") %>



<style>


.calendar-day-name {
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    text-transform: uppercase;
    font-size: 16px;
    height: 50px;
    width: 50px;
    border: 1px solid #ddd;
    background-color: #f0f0f0;
}
 


.col-md-6 {
    padding-top: 10px !important;
}


div:where(.swal2-container) .swal2-html-container {
    font-size: 1.3em !important;

}




.time-info {
    font-family: Arial, sans-serif;
    background: #f8f9fa; /* Light gray background for a professional look */
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px 20px;
    max-width: 400px;
    margin: 20px auto;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.info-block {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.info-block:last-child {
    margin-bottom: 0; /* No margin on the last block */
}

.label {
    font-weight: bold;
    color: #333; /* Dark text for readability */
    font-size: 14px;
}

.value {
    color: #007bff; /* Blue for emphasis */
    font-size: 14px;
}


</style>

<main class="main">
    <!-- Stats Section -->
    <section id="stats" class="section light-background" style="background-image: url('assets/img/kwl-bg.jpg'); background-size: inherit; background-position: inherit;">
        <div class="container section-title" data-aos="fade-up" style="padding-bottom: 0px;">
            <h2>Schedule Your Appointment</h2>
            <p>Effortlessly book your cargo pickup appointments and ensure a smooth collection process.</p>
        </div>
    </section>
    <!-- /Stats Section -->

    
    <!-- calendar Section -->
    <section class="appointment section">
        <div class="container">
            <div class="row">
                <div class="col-md-1"></div>
                <div class="col-md-10 colcontainer">

                    <!-- Tab Headers -->
                    <div class="tabs">
                        <div class="tab active" onclick="showTab(0)">1. CHOOSE APPOINTMENT</div> &nbsp;
                        <div class="tab">2. CONTACT INFORMATION</div>&nbsp;
                        <div class="tab">3. APPOINTMENT PREVIEW</div>
                    </div>

                    <!-- Tab Contents -->
                    <div id="tabContents">
                        <!-- Choose Appointment Tab -->
                        <div class="tab-content active">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>* Appointment Type</label>
                   
                                    <select name="option1" id="appointmentType" class="form-control select2" required style="appearance: auto;">
                                        <option value="">Select Service</option>
                                    </select>
                                    <br>
                                    <label>Select Date</label>
                                    <!-- Calendar Section -->
                          
                                    <div class="calendar">
                                        <div class="calendar-header">
                                            <span onclick="prevMonth()" class="calendaricon">&#706;</span>
                                            <div id="monthYear">October 2024</div>
                                            <span onclick="nextMonth()" class="calendaricon">&#707;</span>
                                        </div>
                                        <div class="calendar-days" id="calendarDays">
                                            <!-- Calendar days will be generated by JavaScript -->
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-6">
                                    <div class="time-info">
                                        <div class="info-block">
                                            <span class="label">Selected Date:</span>
                                            <span id="cal_date" class="value"></span>
                                        </div>
                                        <div class="info-block">
                                            <span class="label">Time Zone:</span>
                                            <span id="timeZone" class="value">America/Jamaica</span>
                                        </div>
                                    </div>

                                    <div class="time-slots" id="timeSlotsSection" style="display:none;">

                                   <label>Select time</label>
                                        <div id="timeSlots">
                                            <!-- Time slots will be dynamically generated by JavaScript -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="button-container">
                                <center><button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button></center>
                            </div>
                        </div>

                        <!-- Contact Information Tab -->
                        <div class="tab-content">
                            <form id="kilform">
                                <div class="row gy-4">
                                    <input type="hidden" id="calendarId" name="calendarId" value="" >
                                    <input type="hidden" id="typename" name="typename" value="" >
                                    
                                    <div class="col-md-6">
                                        <label>* TRN</label>
                                        <input maxlength="20" type="text" id="trn" name="trn" class="form-control" placeholder="Enter the number" oninput="formatTRN(this)" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <label>* First Name</label>
                                        <input maxlength="20" type="text" id="fname" class="form-control" name="firstname" placeholder="Enter the name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>Last Name</label>
                                        <input maxlength="20" type="text" id="lname" class="form-control" name="lastname"  placeholder="Last Name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Mobile Number</label>
                                        <div class="input-group">                                          

                                            <input type="tel"  name="contact" id="kilvishcontact" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)"   class="form-control" placeholder="Mobile Number" required>

    
                                            <input type="hidden" id="fullkilvishcontact" name="fullkilvishcontact"  >
                                            <input type="hidden" id="country_code" name="country_code" >

                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Email Address</label>
                                        <!-- <input type="email" id="email" class="form-control" name="email" placeholder="Enter the email" required=""> -->

                                        <% if (typeof loggeduser !== 'undefined' && loggeduser.user_email) { %>
                                            <input type="email" id="email" class="form-control" name="user_email"  value="<%= loggeduser.user_email %>" readonly>
                                        <% } else { %>
                                            <input type="email" id="email" class="form-control" name="user_email" placeholder="Enter the email" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required>
                                        <% } %>
                                    </div>
                                    <!-- <div class="col-md-6">
                                        <label>* Agent/Freight Forwarder</label>
                                        <input maxlength="20" type="text" id="agent"  class="form-control" name="agent_forwarder" placeholder="Enter the name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div> -->


                                    <div class="col-md-6">
                                        <label>*  Agent/Freight Forwarder </label>
                                      
                                        <select id="agent" class="form-control" name="agent_forwarder"  required style="appearance: auto;">
                                            <option value="">Select Agent</option>
                                            <option value="Agent1">Agent1</option>
                                            <option value="Agent2">Agent2</option>
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label> Name of Individual Making Appointment (If not consignee)</label>
                                        <input maxlength="20" type="text" id="appname" class="form-control" name="appointment_by" placeholder="Enter the name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" value="0" readonly>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Appointment Type (Personal/Commercial)</label>
                                        <!-- <input type="text" id="apppersonal" class="form-control" name="appointment_type" placeholder="Enter the appointment type" required=""> -->
                                        <select id="apppersonal" class="form-control" name="appointment_type"  required style="appearance: auto;">
                                            <option value="">Select any one</option>
                                            <option value="Personal">Personal</option>
                                            <option value="Commercial">Commercial</option>
                                        </select>
                                    </div>

                                    
                                    <div class="col-md-6">
                                        <label>* Bill of Lading Number</label>
                                        <input maxlength="25" type="text" id="blnumber" class="form-control" name="bol_number" placeholder="Enter the number" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Vessel Name</label>
                                        <input maxlength="20" type="text" id="vname" class="form-control" name="vessel_name" placeholder="Enter the vessel name" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Expected Vessel Reported Date</label>
                                        <input type="date" id="vreport" class="form-control" name="vessel_reported_date" placeholder="Vessel Reported Date" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                    <div class="col-md-6" id="chassisContainer" style="display: none;">
                                        <label>* Chassis No (in the case of Motor Unit Appointments)</label>
                                        <input maxlength="20" type="text" id="chassis" class="form-control" value="0" name="chassis_number" placeholder="Enter the number" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label> Customs Release/IMS4 Declaration Number</label>
                                        <input maxlength="20" type="text" id="ims" class="form-control" name="declaration_number" placeholder="Customs Release/IMS4 Declaration Number" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" value="0">
                                    </div>
                                    <div class="col-md-6">
                                        <label> Container Number</label>
                                        <input maxlength="20" type="text" id="cnumber" class="form-control" name="container_number" placeholder="Enter the data" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" value="0">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Number of Pieces/Packages/Units</label>
                                        <input type="number" min="0" id="ppnumber" class="form-control" name="number_of_items" placeholder="Enter the packages" onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" required="">
                                    </div>
                                </div>
                            </form>
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-1)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button>
                                </center>
                            </div>
                        </div>

                        <!-- Confirmation Tab -->
                        <div class="tab-content">
                            <h3>Appointment Details</h3>
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>Date</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmDate"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Time</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmTime"></span>
                                </div>
                            </div>
                        
                            <h3>Contact Information</h3>
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>TRN</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmTRN"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>First Name</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmFirstName"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Last Name</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmLastName"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Mobile Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmPhone"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Email Address</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmEmail"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Agent/Freight Forwarder</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmAgent"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Name of Individual Making Appointment (If not consignee)</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmAppName"></span>
                                </div>

                                

                                <div class="col-md-6">
                                    <strong>Appointment Type Name</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="typenames"></span>
                                </div>

                                <div class="col-md-6">
                                    <strong>Appointment Type</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmAppointmentType"></span>
                                </div>

                                <div class="col-md-6">
                                    <strong>Bill of Lading Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmBLNumber"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Vessel Name</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmVesselName"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Expected Vessel Reported Date</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmVesselReportedDate"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Chassis No</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmChassis"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Customs Release/IMS4 Declaration Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmIMS"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Container Number</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmContainerNumber"></span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Number of Pieces/Packages/Units</strong>
                                </div>
                                <div class="col-md-6">
                                    <span id="confirmPPNumber"></span>
                                </div>
                            </div>
                        
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-1)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="confirmBooking()">Submit</button>
                                </center>
                            </div>
                        </div>


                    </div>

                </div>
                <div class="col-md-1"></div>
            </div>
        </div>
    </section>
    <!-- calendar Section -->
    <input type="hidden" id="loggeduserData" value="<%= JSON.stringify(loggeduser) %>">

</main>
    
<%- include ("footer.ejs") %>




<script>
    let currentTab = 0;
    let tabs = document.querySelectorAll('.tab-content');
    let selectedDate = null;
    let selectedTimes = [];
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    let currentMonth = moment().month();
    let currentYear = 2024;
    let availableDates = []; // Array to store available dates
    let calendarId =0
    let appointmentTypeID =0
    let typename = ''
    let selectedDateTimes=[]
    let selectedTimezone = 'America/Jamaica';



// Fetch the select element by ID
const appointmentTypeSelect = document.getElementById('appointmentType');
const chassisContainer = document.getElementById('chassisContainer');


// Add an event listener to handle changes in the select element
appointmentTypeSelect.addEventListener('change', function() {
    // Get the selected option
    const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];

  
    const defaultOption = appointmentTypeSelect.options[0];
    defaultOption.disabled = true;


    appointmentTypeID = document.getElementById("appointmentType").value,

    // Fetch the data-calendar-id using getAttribute
     calendarId = selectedOption.getAttribute('data-calendar-id');
     typename = selectedOption.getAttribute('data-type-name');

     document.getElementById('calendarId').value = calendarId;
     document.getElementById('typename').value = typename;

    console.log('Selected Calendar ID:', calendarId);

 
    const timeContainer = document.getElementById("timeSlots");                     
    timeContainer.innerHTML = "";


     selectedTimes = [];
     selectedDate=null;   

      // Check if the appointmentTypeID matches the required IDs
      const validIDs = ['70702351', '13801622', '16120840', '16581501'];
        if (validIDs.includes(appointmentTypeID)) {
            chassisContainer.style.display = 'block'; // Show the Chassis No field
        } else {
            chassisContainer.style.display = 'none'; // Hide the Chassis No field
        }

});


    document.addEventListener('DOMContentLoaded', function() {
        showTab(currentTab);
        generateCalendar();
        generateTimeSlots();
        fetchAvailableDates();
        loadAppointmentTypes();
        setupEventListeners();
    });

    function showTab(n) {
        const tabs = document.querySelectorAll('.tab-content');
        const tabHeaders = document.querySelectorAll('.tab');

        if (n < 0 || n >= tabs.length) return;
        currentTab = n;

        tabs.forEach((tab, index) => {
            tab.classList.toggle('active', index === currentTab);
            tabHeaders[index].classList.toggle('active', index === currentTab);
        });

        if (n === 2) populateConfirmation();
    }

    function changeTab(step) {
        
        // if(currentTab==1){
        //     selectedTimes = [];
        // }
        const newTabIndex = currentTab + step;
        if (newTabIndex >= 0 && newTabIndex < tabs.length) showTab(newTabIndex);
    }

    function nextStep() {
        if (!validateCurrentTab()) return;

      

        if (currentTab === 0 && (!selectedDate || selectedTimes.length == 0)) {
            alert("Please select a date and at least one time slot.");
            return;
        } else if (currentTab === 1 && !validateInfo()) {
            alert("Please fill out all fields.");
            return;
        }

        if (currentTab === 1) populateConfirmation();
        changeTab(1);
    }

    function prevStep() {
        changeTab(currentTab === 2 ? -2 : -1);
    }





    function populateConfirmation() {
        const selectedDateText = selectedDate || "Not selected";
        const selectedTimesText = selectedTimes.length > 0 ? selectedTimes.join(", ") : "Not selected";
       // const appointmentType = document.getElementById("appointmentType").value || "N/A";

        const appointmentType = document.getElementById("apppersonal").value || "N/A";

        // Retrieve values from all the required input fields
        const trn = document.getElementById("trn").value || "N/A";
        const firstName = document.getElementById("fname").value || "N/A";
        const lastName = document.getElementById("lname").value || "N/A";
        const country_code = document.getElementById("country_code").value || "N/A";
        const mobileNumber = document.getElementById("kilvishcontact").value || "N/A";
        const email = document.getElementById("email").value || "N/A";
        const agent = document.getElementById("agent").value || "N/A";
        const appname = document.getElementById("appname").value || "N/A";
        const blNumber = document.getElementById("blnumber").value || "N/A";
        const vname = document.getElementById("vname").value || "N/A";
        const vreport = document.getElementById("vreport").value || "N/A";
        const chassis = document.getElementById("chassis").value || "N/A";
        const ims = document.getElementById("ims").value || "N/A";
        const cnumber = document.getElementById("cnumber").value || "N/A";
        const ppnumber = document.getElementById("ppnumber").value || "N/A";
        const typename = document.getElementById("typename").value || "N/A";




        

        // Set the retrieved values in the confirmation fields
        document.getElementById("confirmDate").textContent = `${selectedDateText}`;
        document.getElementById("confirmTime").textContent = selectedTimesText;
        document.getElementById("confirmTRN").textContent = trn;
        document.getElementById("confirmFirstName").textContent = firstName;
        document.getElementById("confirmLastName").textContent = lastName;
        document.getElementById("confirmEmail").textContent = email;
        document.getElementById("confirmPhone").textContent = `${country_code} ${mobileNumber}`;
        document.getElementById("confirmAgent").textContent = agent;
        document.getElementById("confirmAppName").textContent = appname;
        document.getElementById("confirmAppointmentType").textContent = appointmentType;
        document.getElementById("typenames").textContent = typename;
        document.getElementById("confirmBLNumber").textContent = blNumber;
        document.getElementById("confirmVesselName").textContent = vname;
        document.getElementById("confirmVesselReportedDate").textContent = vreport;
        document.getElementById("confirmChassis").textContent = chassis;
        document.getElementById("confirmIMS").textContent = ims;
        document.getElementById("confirmContainerNumber").textContent = cnumber;
        document.getElementById("confirmPPNumber").textContent = ppnumber;
    }



    function validateInfo() {
        return ["fname", "lname", "email", "kilvishcontact"].every(id => document.getElementById(id).value.trim());
    }

    async function loadAppointmentTypes() {
        try {
            const { data } = await axios.get('/appointment_types');
            const appointmentTypeSelect = document.getElementById('appointmentType');
            data.forEach(type => {     
                console.log("typeeeeeee",type)           
                const option = document.createElement('option');
                option.value = type.id;
                option.text = type.name;
                option.setAttribute('data-calendar-id', type.calendarIDs[0]);
                option.setAttribute('data-type-name', type.name);
                option.setAttribute('data-timezone', type.timezone);
                option.setAttribute('data-location', type.location);

                
                appointmentTypeSelect.add(option);

                
                // document.getElementById('calendarID').value = type.calendarIDs[0]
                

            });
        } catch (error) {
            console.error('Error loading appointment types:', error);
        }
    }

    // Add this function to define renderAvailableDates
function renderAvailableDates(data,timezone) {
    availableDates = data.map(item => item.date); // Extract dates from the response and store in availableDates array
    generateCalendar(); // Re-render the calendar with updated available dates
}


    async function fetchAvailableDates() {
        const appointmentTypeID = document.getElementById('appointmentType').value;

        const appointmentTypeSelect = document.getElementById('appointmentType');
        const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];
        calendarId = selectedOption.getAttribute('data-calendar-id');
        timezone = selectedOption.getAttribute('data-timezone');

        document.getElementById('timeZone').innerHTML = timezone;

        selectedTimezone = timezone;
        
        
        const month = monthNames[currentMonth];
        if (!appointmentTypeID) return;

        try {
            const { data } = await axios.get(`/dates_availability`, { params: { appointmentTypeID, month ,calendarId ,timezone } });
            renderAvailableDates(data,timezone);
        } catch (error) {
            console.error('Error fetching available dates:', error);
        }
    }

        // Function to fetch available times based on the selected date
        async function fetchAvailableTimes(date, appointmentTypeID) {
        try {
            const response = await axios.get(`/time_availability`, {
                params: { appointmentTypeID, date }
            });

            renderAvailableTimes(response.data);
        } catch (error) {
            console.error("Error fetching available times:", error.message);
        }
    }

        //============================ Function to render available times on the page

        function renderAvailableTimes(times) {
    console.log("Available Timeslots -> ", times);

    const appointmentTypeSelect = document.getElementById('appointmentType');
    const selectedOption = appointmentTypeSelect.options[appointmentTypeSelect.selectedIndex];
    calendarId = selectedOption.getAttribute('data-calendar-id');
    timezone = selectedOption.getAttribute('data-timezone');





    const timeContainer = document.getElementById("timeSlots");
    timeContainer.innerHTML = ""; // Clear existing timeslots

    if (!times || times.length === 0) {
        timeContainer.textContent = "No available times for this date.";
        return;
    }

    for (const timeObj of times) {
      //  const formattedTime = new Date(timeObj.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                const formattedTime = new Intl.DateTimeFormat('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: timezone, // Use the selected timezone
            }).format(new Date(timeObj.time));

        const timeSlotDiv = document.createElement("div");
        timeSlotDiv.classList.add("time-slot");
        timeSlotDiv.dataset.time = formattedTime; // Store the time for easy selection
        timeSlotDiv.dataset.datetime = timeObj.time; // Store full datetime

        document.getElementById('timeSlotsSection').style.display = 'block';

        const timeTextSpan = document.createElement("span");
        timeTextSpan.textContent = formattedTime;

        const slotsLeftText = document.createElement("span");
        slotsLeftText.style.marginLeft = "10px";

        if (timeObj.slotsAvailable > 0) {
            timeSlotDiv.style.border = "2px solid green";
            // slotsLeftText.style.color = "green";
            slotsLeftText.textContent = `${timeObj.slotsAvailable} Slot${timeObj.slotsAvailable > 1 ? 's' : ''} left`;

            // Enable click for available slots
            timeSlotDiv.onclick = function () {
                toggleTimeSelection(formattedTime, timeObj.time);
            };
        } else {
            timeSlotDiv.style.border = "2px solid red";
            // slotsLeftText.style.color = "red";
            slotsLeftText.textContent = "0 Slots left";
            timeSlotDiv.style.pointerEvents = 'none';
        }

        timeSlotDiv.appendChild(timeTextSpan);
        timeSlotDiv.appendChild(slotsLeftText);

        timeContainer.appendChild(timeSlotDiv);
    }
}


        function renderAvailableTimesworking(times) {


            console.log("available Timeslots -> ",times)
                        const timeContainer = document.getElementById("timeSlots");                     
                        timeContainer.innerHTML = "";

                        if (times.length === 0) {
                            
                            timeContainer.textContent = "No available times for this date.";
                            return;
                        }        
                 


                        //----------- working fine without time check ---------------------


                        // times.forEach(timeObj => {

                        //             const formattedTime = new Date(timeObj.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                        //             console.log("formatted time ", formattedTime);

                        //             const timeSlotDiv = document.createElement("div");
                        //             timeSlotDiv.classList.add("time-slot");

                        //             document.getElementById('timeSlotsSection').style.display = 'block';

                        //             timeSlotDiv.textContent = formattedTime;

                        //             // Pass formattedTime explicitly to the onclick function
                        //             timeSlotDiv.onclick = function() {
                        //                 toggleTimeSelection(formattedTime);
                        //             };

                        //             timeContainer.appendChild(timeSlotDiv);
                        //  });

                         //------------- end working fine --------------------------------

      

                         times.forEach(async (timeObj) => {
    // Use timeObj.time (which includes both date and time) for comparison
    const formattedTime = new Date(timeObj.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    console.log("formatted time ", formattedTime);

    const timeSlotDiv = document.createElement("div");
    timeSlotDiv.classList.add("time-slot");
    document.getElementById('timeSlotsSection').style.display = 'block';
    timeSlotDiv.textContent = formattedTime;

    // Check availability for this time slot
    const availabilityResponse = await checkAvailability(selectedDate, formattedTime, timeObj.time);

    if (availabilityResponse) {
        // Now compare the full datetime (date + time)
        const timeSlot = availabilityResponse.find(slot => {
            const slotDate = new Date(slot.datetime);
            const formattedSlotTime = slotDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            return formattedSlotTime === formattedTime && slot.datetime === timeObj.time; // Compare both time and full datetime
        });

        if (timeSlot && timeSlot.valid) {
            // Available time slot
            timeSlotDiv.style.border = "2px solid green";
            timeSlotDiv.onclick = function() {
                toggleTimeSelection(formattedTime,timeObj.time);
            };
        } else {
            // Unavailable time slot
            timeSlotDiv.style.border = "2px solid red";
            timeSlotDiv.style.pointerEvents = 'none'; // Disable click
            const unavailableText = document.createElement('div');
            unavailableText.textContent = timeSlot ? timeSlot.message : "Unavailable";
            unavailableText.style.color = 'red';
            timeSlotDiv.appendChild(unavailableText);
        }
    }

    timeContainer.appendChild(timeSlotDiv);
});


                         


    }


    async function checkAvailability(selectedDate, formattedTime , datetime) {
    try {
        // Make a POST request to check availability
        const response = await fetch('/check_times', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                date: selectedDate,
                time: formattedTime,
                appointmentTypeID: appointmentTypeID,
                calendarID: calendarId,
                datetime:datetime
            })
        });

        const data = await response.json();
        if (response.ok) {
            return data;
        } else {
            console.error("Error checking time:", data);
            return null;
        }
    } catch (error) {
        console.error("Error with the request:", error);
        return null;
    }
}



    function generateCalendar() {
        const daysContainer = document.getElementById("calendarDays");
        const monthYearLabel = document.getElementById("monthYear");
        monthYearLabel.textContent = `${monthNames[currentMonth]} ${currentYear}`;

        const date = new Date(currentYear, currentMonth, 1);
        const firstDay = date.getDay();
        const lastDate = new Date(currentYear, currentMonth + 1, 0).getDate();
        let daysHTML = "";

        for (let i = 0; i < firstDay; i++) daysHTML += `<div class="calendar-day"></div>`;
        for (let i = 1; i <= lastDate; i++) {
            const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
            const isAvailable = availableDates.includes(formattedDate);
            daysHTML += `<div class="calendar-day ${isAvailable ? 'available' : 'disabled'}" onclick="${isAvailable ? `selectDate(${i})` : ''}">${i}</div>`;
        }
        daysContainer.innerHTML = daysHTML;
    }

 function generateCalendarkharbwala() {
        const daysContainer = document.getElementById("calendarDays");
        const monthYearLabel = document.getElementById("monthYear");

        // Define the names of the months and days
        const monthNames = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        const dayNames = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];

        // Update the month and year label
        monthYearLabel.textContent = `${monthNames[currentMonth]} ${currentYear}`;

        // Create the weekday header with only the first letter
        let daysHTML = "";
        dayNames.forEach(day => {
            daysHTML += `<div class="calendar-day-name">${day.charAt(0)}</div>`;
        });

        // Get the first day and last date of the current month
        const date = new Date(currentYear, currentMonth, 1);
        const firstDay = (date.getDay() + 6) % 7; // Adjust to start the week on Monday
        const lastDate = new Date(currentYear, currentMonth + 1, 0).getDate();

        // Add empty slots for days before the first day of the month
        for (let i = 0; i < firstDay; i++) {
            daysHTML += `<div class="calendar-day empty"></div>`;
        }

        // Add days of the current month
        for (let i = 1; i <= lastDate; i++) {
            const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
            const isAvailable = availableDates.includes(formattedDate);
            daysHTML += `<div class="calendar-day ${isAvailable ? 'available' : 'disabled'}" onclick="${isAvailable ? `selectDate(${i})` : ''}">${i}</div>`;
        }

        // Render the calendar
        daysContainer.innerHTML = daysHTML;
    } 

    function setupEventListeners() {
        document.getElementById('appointmentType').addEventListener('change', fetchAvailableDates);
        document.getElementById('prevMonthBtn').addEventListener('click', prevMonth);
        document.getElementById('nextMonthBtn').addEventListener('click', nextMonth);
    }


    function selectDate(day) {
      
    // Format the selected date to "YYYY-MM-DD" (e.g., "2024-11-11") for consistency with the server request
    const formattedDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    selectedDate = formattedDate;
    
    // document.getElementById('cal_date').innerHTML = moment(selectedDate).format('MMMM DD, YYYY');

    document.getElementById('cal_date').innerHTML = moment(selectedDate).format('dddd, MMMM DD, YYYY');


    // Deselect all days and highlight the selected day
    document.querySelectorAll(".calendar-day").forEach(dayEl => dayEl.classList.remove("selected-day"));
    document.querySelectorAll(".calendar-day")[new Date(currentYear, currentMonth, 1).getDay() + day - 1].classList.add("selected-day");

    const appointmentTypeID = document.getElementById('appointmentType').value;
    fetchAvailableTimes(selectedDate, appointmentTypeID);
}


    function generateTimeSlots() {
        const timeSlotsContainer = document.getElementById("timeSlots");
        ["09:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "01:00 PM", "02:00 PM", "03:00 PM"].forEach(slot => {
            const timeSlotDiv = document.createElement("div");
            timeSlotDiv.classList.add("time-slot");
            timeSlotDiv.textContent = slot;
            timeSlotDiv.onclick = () => toggleTimeSelection(slot);
            timeSlotsContainer.appendChild(timeSlotDiv);
        });
    }


    function toggleTimeSelection(slot, datetime) {
    // Clear previous selection
    document.querySelectorAll(".time-slot").forEach(el => {
        el.classList.remove("selected-time");
    });

    // Mark the selected slot
    const selectedSlot = [...document.querySelectorAll(".time-slot")].find(
        el => el.dataset.time === slot && el.dataset.datetime === datetime
    );

    if (selectedSlot) {
        selectedSlot.classList.add("selected-time");
        console.log(`Selected time: ${slot}, datetime: ${datetime}`);
    }

    // Store the selection
    selectedTimes = [slot];
    selectedDateTimes = [datetime];
}





    function toggleTimeSelectionworking(slot, datetime) {
    // If the slot is already selected, do nothing
    if (selectedTimes.length > 0) {
        // Deselect previously selected slot and datetime
        selectedTimes = [];
        selectedDateTimes = [];
    }

    // Add the new slot and datetime
    selectedTimes.push(slot);
    selectedDateTimes.push(datetime);

    // Update the selected-time class for each time slot element
    document.querySelectorAll(".time-slot").forEach(el => {
        // Use trim() to remove spaces that may affect matching
        if (selectedTimes.includes(el.textContent.trim())) {
            el.classList.add("selected-time");
        } else {
            el.classList.remove("selected-time");
        }
    });
}




                    function toggleTimeSelectionformultiple(slot,datetime) {
                            
                                // Check if the slot is selected or not
                                const index = selectedTimes.indexOf(slot);
                                const index1 = selectedDateTimes.indexOf(datetime);
                                
                            
                                if (index > -1) {
                                    // If it is selected, remove it
                                    selectedTimes.splice(index, 1);
                                    selectedDateTimes.splice(index1,1);
                                } else {
                                    // If it is not selected, add it
                                    selectedTimes.push(slot);
                                    selectedDateTimes.push(datetime);
                                }

                                // Update the selected-time class for each time slot element
                                document.querySelectorAll(".time-slot").forEach(el => {
                                    // Use trim() to remove spaces that may affect matching
                                    if (selectedTimes.includes(el.textContent.trim())) {
                                        el.classList.add("selected-time");
                                    } else {
                                        el.classList.remove("selected-time");
                                    }
                                });
                }






    function prevMonth() {
        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;
        currentYear -= (currentMonth === 11) ? 1 : 0;
        fetchAvailableDates();
    }

    function nextMonth() {
        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;
        currentYear += (currentMonth === 0) ? 1 : 0;
        fetchAvailableDates();
    }







    //--------------- Validation Start =======================================


    

    function validateCurrentTab() {  
    const inputs = tabs[currentTab].querySelectorAll('input, select, textarea');
    let isValid = true;

    // Remove previous error messages and borders
    tabs[currentTab].querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
    inputs.forEach(input => {
        input.style.border = ''; // Reset borders
    });

    const processedGroups = [];

    inputs.forEach(input => {


          //-----------start Remove Red border and error on enter something ------------
        // Remove error message and border immediately on valid input change
        input.addEventListener('input', () => {
            if (input.value.trim() || input.checked) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });

        if (input.type === 'text' || input.type === 'textarea' || input.tagName.toLowerCase() === 'select') {
        input.addEventListener('input', () => {
            if (input.value.trim()) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });
    }

    if (input.type === 'checkbox' || input.type === 'radio') {
        input.addEventListener('change', () => {
            if (input.checked) {
                input.style.border = ''; // Remove red border
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');
                const error = container.querySelector('.error-message');
                if (error) error.remove(); // Remove error message for the group
            }
        });
    }

    //-----------End Remove Red border and error on enter something ------------
    

        // Only validate fields that have the "required" attribute
        // if (input.required) {
            // For checkboxes and radio buttons, validate the group as a whole
            if ((input.type === 'checkbox' || input.type === 'radio') &&  input.id !== 'select-all' && input.id !== 'notloc' ){
                const name = input.name;
                console.log("checkbox names ",name)

                // Skip if this group has already been validated
                if (processedGroups.includes(name)) return;
                processedGroups.push(name);

                const group = tabs[currentTab].querySelectorAll(`input[name="${name}"]`);
                const checked = [...group].some(el => el.checked);
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');

                // Show a single error message if none are selected
                if (!checked) {
                    isValid = false;
                    group.forEach(input => {
                        input.style.border = '2px solid red'; // Highlight each checkbox/radio in the group
                    });
                    addErrorMessage(container, "Please select at least one option.");
                }
            } else {
                // Check for required fields that are empty (normal inputs)
                if (input.required && !input.value.trim()) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for required fields
                    addErrorMessage(input.parentNode, "This Field is Required"); // Add error message under normal inputs
                }
            }

            // Check if file input has a file selected (excluding specific cases)
            if (input.type === 'file' && input.required) {
                if (!input.files.length) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for invalid file input
                    addErrorMessage(input.parentNode, "Please upload a file.");
                }
            }

            // Special case: Validate hidden input storing job location data
            if (input.name === 'job_preferred_location' && input.required) {
                const selectedLocations = input.value.trim(); // Hidden field value
                const container = input.closest('.form-group');
                if (!selectedLocations) {
                    isValid = false;
                    addErrorMessage(container, "Please select at least one job location.");
                    input.style.border = '2px solid red';
                }
            }
        // }
    });

    return isValid;
}

function addErrorMessage(container, message) {
    // Check if error message already exists to avoid duplicate
    if (!container.querySelector('.error-message')) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.style.color = 'red';
        errorMessage.style.fontSize = '12px';
        errorMessage.innerText = message;
        container.appendChild(errorMessage);
    }
}






    //---------------- Validation End ========================================== 





// Function to handle the booking confirmation with OTP verification and final confirmation
async function confirmBooking() {
    const email = document.getElementById("email").value;


    const loggeduserData = document.getElementById('loggeduserData').value;
const loggeduser = loggeduserData ? JSON.parse(loggeduserData) : null;

        if (typeof loggeduser !== 'undefined' && loggeduser) {
        // If logged in, directly confirm booking without OTP
        await directConfirmBooking(email);
        return;
    }

    // Initial SweetAlert OTP input screen with loader
    Swal.fire({
        title: "Kingston Booking",
        html: `
            <p style="color: green;">Sending OTP to ${email}...</p>
            <div class="spinner-border text-success" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        `,
        showConfirmButton: false,
        allowOutsideClick: false,
        allowEscapeKey: false,
        showCloseButton: true
    });


    try {
        // Send OTP request to the server
        const response = await fetch('/getBookingOtp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
        });
        const result = await response.json();

        if (!result.exists) {
            Swal.update({
                html: `<p style="color: red;">Failed to send OTP. <button id="resendBtn" class="btn btn-link">Resend OTP</button></p>`
            });
            document.getElementById('resendBtn').onclick = confirmBooking; // Resend OTP
            return;
        }

        // Show OTP input form with message
        Swal.update({
            html: `
                <p style="color: green;">OTP sent to ${email}</p>
                <input type="text" id="otpInput" class="swal2-input" placeholder="Enter OTP">
                <div id="otpErrorMsg" style="color: red; display: none;">Invalid OTP! Enter correct OTP or try resending.</div>
                <button id="verifyBtn" class="swal2-confirm swal2-styled" style="margin-right:10px;">Verify OTP</button>
                <button id="resendOtpBtn" class="swal2-cancel swal2-styled">Resend OTP</button>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
        });

        document.getElementById('otpInput').value = result.otp; // For testing purposes only
        document.getElementById('verifyBtn').onclick = verifyOTP;
        document.getElementById('resendOtpBtn').onclick = confirmBooking;

    } catch (error) {
        Swal.fire('Error', 'Failed to send OTP. Please try again later.', 'error');
    }
}



// Function to verify the OTP
async function verifyOTP() {
    const email = document.getElementById("email").value;
    const otp = document.getElementById("otpInput").value;

    try {
        const response = await fetch('/verifyOTP', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, otp })
        });
        const result = await response.json();

        if (!result.success) {
            // Show error in red on the same SweetAlert modal
            document.getElementById('otpErrorMsg').style.display = 'block';
            return;
        }

        // OTP verified, show booking confirmation loader
        Swal.update({
            html: `
                <p style="color: green;">OTP Verified! Confirming your booking...</p>
                <div class="spinner-border text-success" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            `,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
        });

        await directConfirmBooking(email);  // Proceed to direct booking after OTP verification

    } catch (error) {
        Swal.fire('Error', 'Failed to Verify OTP Please try again later.', 'error');
    }
}

// Function to handle direct booking confirmation
async function directConfirmBooking(email) {
    try {


        const formData = {
                trn: document.getElementById("trn").value,
                firstname: document.getElementById("fname").value,
                lastname: document.getElementById("lname").value,
                contact: document.getElementById("kilvishcontact").value,
                country_code: document.getElementById("country_code").value,
                user_email: document.getElementById("email").value,
                agent_forwarder: document.getElementById("agent").value,
                appointment_by: document.getElementById("appname").value,
                appointment_type: document.getElementById("apppersonal").value,
                bol_number: document.getElementById("blnumber").value,
                vessel_name: document.getElementById("vname").value,
                vessel_reported_date: document.getElementById("vreport").value,
                chassis_number: document.getElementById("chassis").value,
                declaration_number: document.getElementById("ims").value,
                container_number: document.getElementById("cnumber").value,
                number_of_items: document.getElementById("ppnumber").value,
                booking_date: selectedDate,  // Add the selected date
                booking_times: selectedTimes, // Add the selected times
                appointmentTypeID: document.getElementById("appointmentType").value,
                calendarID: document.getElementById("calendarId").value,
                selectedDateTimes :selectedDateTimes,
                timezone:selectedTimezone
            };




        const bookingResponse = await fetch('/confirmBooking', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

        const bookingResult = await bookingResponse.json();

            if (bookingResult.success) {
                Swal.fire({
                    title: "Kingston Booking",
                    text: "Your appointment has been successfully booked.",
                    icon: "success",
                    confirmButtonText: "View Booking"
                }).then(() => {
                    window.location.href = '/viewBookings';
                });
            } else {
                
                // Handle error if not successful
                Swal.fire({
                    title: "Booking Error",
                    text: bookingResult.message || 'Failed to confirm booking. Please try again later.',
                    icon: "error",
                    confirmButtonText: "Retry"
                });
            }



    } catch (error) {
        console.log("ajax error ",error)
        Swal.fire('Error', 'Internal Server Error, Please try again later.', 'error');
    }
}





</script>



<script>




   //==================== Comman Kilvalidation start =====================
   
      
   function validateRequiredFields(kil) {
   
   
   const form = document.querySelector(`${kil}`); 
   
   const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
   
   
   let isValid = true;
   let kilerror = 'This Field is Required.'
   
   
   
   // Remove previous error messages and borders
   form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
   inputs.forEach(input => {
    
       input.style.border = ''; // Reset borders
   });
   
   inputs.forEach(input => {
   
   
   
                    if(input.type == 'date'){
                        
                        kilerror = "Please Select Date"
                        input.style.border = '1px solid red';
                    }else if(input.name == 'comments'){
                    
                        kilerror = 'Please Enter Comments'
                    }else if(input.type == 'email'){
                    
                    kilerror = 'Please Enter Email'
                }else if(input.type == 'password'){
                    
                    kilerror = 'Please Enter Password'
                }else{
                    kilerror = 'This Field is Required.'
                }
     
   
       if (!input.value.trim()) {  // If the required field is empty      
           isValid = false;
           input.style.border = '1px solid red'; // Set border to red for empty required fields
           addErrorMessage(input.parentNode, kilerror); // Add error message
       }
   });
   
   return isValid;
   }
   
   
   // Add real-time validation for each required field
   function addRealTimeValidation(kil) {
       const form = document.querySelector(`${kil}`); 
       const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
   
       inputs.forEach(input => {
           input.addEventListener('input', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
   
           input.addEventListener('change', function () {
               const label = document.querySelector(`label[for='${input.name}']`); // Find label based on name
               if (input.value.trim()) {
                   input.style.border = '';
                   const errorMessage = input.parentNode.querySelector('.error-message');
                   if (errorMessage) {
                       errorMessage.remove();
                   }
                   if (label && label.innerHTML.includes('*')) {
                       label.innerHTML = label.innerHTML.replace(' <span style="color:red;">*</span>', ''); // Remove asterisk
                   }
               } else {
                   // If the select input is empty again, add the asterisk back
                   if (label && !label.innerHTML.includes('*')) {
                       label.innerHTML += ' <span style="color:red;">*</span>'; // Append asterisk
                   }
               }
           });
       });
   }
   
   
   // Combined validation function
   function validateForm(kil) {
   
   
   if(!validateRequiredFields(kil)){
     event.preventDefault();
   }
   }
   
   // Add real-time validation once the document is loaded
   document.addEventListener('DOMContentLoaded', () => {
   addRealTimeValidation('#kilform');  // Activate real-time validation
   });
   
   
   function validateKilvishInput(event) {
  
          const inputField = event.target;


          var firstName = document.getElementById('fname').value;
    var lastName = document.getElementById('lname').value;

    // Combine first name and last name
    var fullName = firstName + ' ' + lastName;

    // Set the combined name to the appointment name input
    document.getElementById('appname').value = fullName;
      
          // General valid character sets
          // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;
      
          let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 
      
          // Define allowed image file types
          const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];
      
          // Use parentNode for regular inputs, container for checkboxes
          const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
          const inputParent = inputField.parentNode;
      
          // Remove previous error message and border
          let errorMessage = inputParent.querySelector('.error-message');
          if (errorMessage) errorMessage.remove();
          inputField.style.border = ''; // Reset border
      
          // Custom validations based on input name
          if (inputField.name === 'description' || inputField.name ===  'address') {
              validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;
      
              // Check length limit
              if (inputField.value.length > 400) {
                  addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
                  inputField.style.border = '1px solid red';
                  inputField.value = inputField.value.substring(0, 400); // Truncate the input
                  return;
              }
          }  else if (inputField.name === 'firstname' ||  inputField.name === 'lastname' ) {
   
                         validCharacters = /^[a-zA-Z\s]*$/; 
                   
                       // const allowedChars = /^[a-zA-Z0-9._@-]+$/;  //for kilMiddle Conditon 
                        const allowedChars = /^[a-zA-Z0-9._@-\s]+$/; // For any additional validations
                        
                        const inputValue = inputField.value; 

                          

                                    if (!allowedChars.test(inputField.value)) {
                                        // Allow common validation to handle non-numeric characters
                                    } else if (inputValue.length > 20 || inputValue.length < 2  ) {                        
                                        addErrorMessage(inputParent, 'This Field Must Be Between 2 And 20 Characters.');
                                        inputField.style.border = '1px solid red'; 

                                        if (event.type === 'change') {
                                            inputField.value = ''; 
                                        }    
                                        return;
                                        } 


                                        inputField.style.border = '';



                        } else if (inputField.name === 'otp') {
   
   
   
              validCharacters = /^\d{6,6}$/;
              const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
            const inputValue = inputField.value; 
   
                        const numericValue = parseInt(inputValue, 10);
   
                        if (!numericOnlyPattern.test(inputField.value)) {
                           // Allow common validation to handle non-numeric characters
                       } else if (inputValue.length > 6 || inputValue.length < 6  ) {                        
                              addErrorMessage(inputParent, 'OTP must be exactly 6 digits');
                              inputField.style.border = '1px solid red'; 
   
                              if (event.type === 'change') {
                                 inputField.value = ''; 
                              }    
                              return;
                           } 
   
   
                           inputField.style.border = '';
   
   
   
          }else if (inputField.name === 'trn') { 
   
          
   
   
            validCharacters = /^[\d-]{0,20}$/;
                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                            const inputValue = inputField.value; 
                      
                                        const numericValue = parseInt(inputValue, 10);

                                        if (!numericOnlyPattern.test(inputField.value)) {
                                            // Allow common validation to handle non-numeric characters
                                        } else if (inputValue.length > 20 || inputValue == 0  ) {                        
                                            addErrorMessage(inputParent, 'TRN Cannot Be 0 Or Exceed 20 Digits');
                                            inputField.style.border = '2px solid red'; 

                                            if (event.type === 'change') {
                                                inputField.value = ''; 
                                            }    
                                            return;
                                            } 


                                            inputField.style.border = '';



                            }else if (inputField.name === 'number_of_items') { 
   
          
   
   
                            // validCharacters = /^\d{0,6}$/;  // without decimal 
                            validCharacters = /^\d{0,6}(\.\d{0,2})?$/;   //with decimal 2 place
                            const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                            const inputValue = inputField.value; 

                                        const numericValue = parseInt(inputValue, 10);

                                        if (!numericOnlyPattern.test(inputField.value)) {
                                            // Allow common validation to handle non-numeric characters
                                        } else if (inputValue.length > 3  ) {                        
                                            addErrorMessage(inputParent, 'Pacakge Number Cannot Be  Exceed 3 Digits');
                                            inputField.style.border = '2px solid red'; 

                                            if (event.type === 'change') {
                                                inputField.value = ''; 
                                            }    
                                            return;
                                            } 


                                            inputField.style.border = '';



   }else if (inputField.name === 'contact' || inputField.id =='agent_contact') {
   
   
                                            
                                           // validCharacters = /^\d{7,15}$/;

                                            validCharacters = /^[\d\-\s]{0,20}$/; // alllow dash(-) and space 

                                            // const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
                                            // const inputValue = inputField.value; 

                                            //             const numericValue = parseInt(inputValue, 10);

                                            //             if (!numericOnlyPattern.test(inputField.value)) {
                                            //                 // Allow common validation to handle non-numeric characters
                                            //             } else if (inputValue.length > 10 || inputValue.length < 7  ) {                        
                                            //                 addErrorMessage(inputParent, 'Mobile Number Must Be Between 7 And 10 Digits.');
                                            //                 inputField.style.border = '2px solid red'; 

                                            //                 if (event.type === 'change') {
                                            //                     inputField.value = ''; 
                                            //                 }    
                                            //                 return;
                                            //                 } 


                                            //                 inputField.style.border = '';



   }else if (inputField.name =='chassis_number' || inputField.name =='declaration_number' || inputField.name =='container_number' ) {
   
   
                                            
       validCharacters = /^\d{0,20}$/;
   const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
   const inputValue = inputField.value; 

               const numericValue = parseInt(inputValue, 10);

               if (!numericOnlyPattern.test(inputField.value)) {
                   // Allow common validation to handle non-numeric characters
               } else if (inputValue.length > 20 || inputValue.length < 1  ) {                        
                   addErrorMessage(inputParent, 'This Must Be Between 1 And 20 Digits.');
                   inputField.style.border = '2px solid red'; 

                   if (event.type === 'change') {
                       inputField.value = ''; 
                   }    
                   return;
                   } 


                   inputField.style.border = '';



}else if (inputField.name === 'bol_number') {
   
   
                                            
   //  validCharacters = /^[A-Z]{4}\/[A-Z]{3}\/[A-Z]{2}\/[A-Z]\/\d{3}\/\d{2}-\d{2}$/;

    validCharacters = /^[A-Za-z0-9\/\-]+$/;

const numericOnlyPattern = /^\d+$/; // Checks for numeric-only input
const inputValue = inputField.value; 

           const numericValue = parseInt(inputValue, 10);
                 if (inputValue.length > 25 || inputValue.length < 1  ) {                        
               addErrorMessage(inputParent, 'This Must Be Between 1 And 20 Digits.');
               inputField.style.border = '2px solid red'; 

               if (event.type === 'change') {
                   inputField.value = ''; 
               }    
               return;
               } 


               inputField.style.border = '';



}else if (inputField.type === 'date') {

  
         
                                validCharacters = /^(?:\d{4}[-\/]\d{2}[-\/]\d{2})$/; 
                                return;
                                
                                const inputValue = inputField.value.trim();
   
   
                                const inputDate = new Date(inputValue.replace(/[-\/]/g, '/'));
                          const today = new Date();
                          today.setHours(0, 0, 0, 0); // Set to midnight for comparison
   
                                         // Check if the date is in the past
                          if (inputDate < today) {
                             addErrorMessage(inputParent, 'The date cannot be in the past.');
                             inputField.style.border = '2px solid red';
                             
                             if (event.type === 'change') {
                                   inputField.value = ''; // Clear the input field on change
                             }
                             
                             return; // Exit the function after handling the error
                          }
   
   
                 inputField.style.border = '';
                  }else if (inputField.name === 'model_name' || inputField.name ==='models[]') {
                     // Only numbers allowed, between 7 and 10 digits
                     validCharacters = /^[a-zA-Z0-9]{4,20}$/;
                  }else if(inputField.type =='email'){
                     validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
                     const allowedEmailChars = /^[a-zA-Z0-9._@-]+$/; 
                    
                     const inputValue = inputField.value; 
   
                     // If input contains invalid characters, skip email validation and let common validation handle it
                               if (!allowedEmailChars.test(inputValue)) {
                                   // Skip email validation, allowing common validation to catch unwanted characters
                               } else if (!validCharacters.test(inputValue)) {                        
                                 addErrorMessage(inputParent, 'Invalid Email Format.');
                                 inputField.style.border = '1px solid red'; 
   
                                 if (event.type === 'change') {
                                   inputField.value = ''; 
                                 }    
                                 return;
                             } 
   
   
                             inputField.style.border = '';
   
                  }else if(inputField.type ==='password'){
      
                                  const hasSequentialChars = (password) => {
                                       console.log("passworddddddd -", password)
                                       const length = password.length;
                                       
                                       // Check for ascending sequences (e.g., "123", "abc")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                                return true; // Ascending sequence found
                                          }
                                       }
      
                                       // Check for descending sequences (e.g., "321", "cba")
                                       for (let i = 0; i < length - 3; i++) {
                                          if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                                password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                                password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                                return true; // Descending sequence found
                                          }
                                       }
                                       
                                       return false; // No sequential characters
                                    };
      
                     
      
                     validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;
      
      
                                                // Check if password meets the required pattern
                                 if (!validCharacters.test(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                                    inputField.style.border = '1px solid red';
                                    if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
                                 // Check for sequential characters
                                 if (hasSequentialChars(inputField.value)) {
                                    addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                                    inputField.style.border = '1px solid red';
                                       if (event.type === 'change') {   inputField.value = '';  }
                                    return; // Stop further validation
                                 }
      
      
                                 // Function to check for sequential characters in the password
                       
                                                         
      
      
      
                  }
                    
      
                  
      
      
      
          // Handle file input validation
          if (inputField.type === 'file') {
              const file = inputField.files[0];
              if (file && !validImageTypes.includes(file.type)) {
                  addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
                  inputField.value = ''; // Clear the file input field
                  inputField.style.border = '1px solid red';
                  return;
              }
          } else {
              // For normal text/number input validation
              if (event.type === 'keyup') {
                  if (!validCharacters.test(inputField.value)) {
                      addErrorMessage(inputParent, 'Invalid character entered!');
                      inputField.style.border = '1px solid red';
                      
                  }
              }
      
              if (event.type === 'change') {
                  if (!validCharacters.test(inputField.value)) {
                      // On invalid input during change event, clear the field and show an error
                      inputField.value = ''; // Clear invalid input
                      addErrorMessage(inputParent, 'Invalid character or format!');
                      inputField.style.border = '1px solid red';
                  } else {
                      // Clear error when value is corrected
                      inputField.style.border = '';
                      if (errorMessage) errorMessage.remove();
                  }
              }
          }
      }
      
   
   
   
   
   
      // Function to display error messages under the input field or container for checkboxes
      function addErrorMessage(parent, message) {
          if (!parent.querySelector('.error-message')) {
              const errorMessage = document.createElement('div');
              errorMessage.className = 'error-message';
              errorMessage.style.color = 'red';
              errorMessage.style.fontSize = '12px';
              errorMessage.innerText = message;
              parent.appendChild(errorMessage);
          }
      }
      
      
   
   
      document.addEventListener('DOMContentLoaded', () => {    
       addRealTimeValidation('#kilform');  // Activate real-time validation

       const form = document.querySelector(`#kilform`); 
      // const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
      const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
   
            requiredFields.forEach(field => {
    
       const label = document.querySelector(`label[for='${field.name}']`); // Use name instead of id
      // Check if the field is empty
                     if (label && !label.innerHTML.includes('*') && field.value.trim() === '') { 
                                          // Append asterisk only if the field is empty
                            label.innerHTML += ' <span style="color:red;">*</span>'; 
                        }

   
   });
   
   
   });



   //============= Clear Kilalert msg after 5 sec =========== 
    // Wait for the DOM to fully load
    document.addEventListener("DOMContentLoaded", function() {
        // Set a timeout to clear the message after 5 seconds
        setTimeout(function() {
            const messageElement = document.getElementById("kilmessage");
            if (messageElement) {
                messageElement.innerHTML = ""; // Clear the message
            }
        }, 5000); // 5000 milliseconds = 5 seconds
    });
   


    

//   document.addEventListener("DOMContentLoaded", function() {
//         var input = document.querySelector("#kilvishcontact");

//         var iti = window.intlTelInput(input, {
//           preferredCountries: ["us", "in"], // Customize based on your needs
//           separateDialCode: true,
//           initialCountry: "us",
//           utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
//         });



//     // Update hidden input field with full phone number
//     input.addEventListener("input", function() {
//       var fullPhoneNumber = iti.getNumber();
//       var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
//       document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
//       document.querySelector("#country_code").value = countryCode;

//     });


//     input.addEventListener("countrychange", function() {
//     var fullPhoneNumber = iti.getNumber();  // Get the full number
//     var countryCode = '+' + iti.getSelectedCountryData().dialCode;  // Get the new country code
//     // Update hidden fields
//     document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
//     document.querySelector("#country_code").value = countryCode;
//   });




//     // Initialize hidden field with the current value on page load
//     var fullPhoneNumber = iti.getNumber();
//     var countryCode =   '+'+iti.getSelectedCountryData().dialCode;
//     document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
//     document.querySelector("#country_code").value = countryCode;

//   });


document.addEventListener("DOMContentLoaded", function () {
    var input = document.querySelector("#kilvishcontact");
    var errorMsg = document.createElement("div");
    errorMsg.id = "error-msg";
    errorMsg.style.color = "red";
    errorMsg.style.fontSize = "0.9em";
    errorMsg.style.marginTop = "5px";
    input.parentNode.appendChild(errorMsg);

    var iti = window.intlTelInput(input, {
        preferredCountries: ["jm", "us"], // Customize based on your needs
        separateDialCode: true,
        initialCountry: "jm",
        autoPlaceholder: "off", // Disable auto-placeholder
        autoHideDialCode: false, // Prevent hiding the dial code
        utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js",
    });

    const errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

    const validateNumber = () => {
        var errorCode = iti.getValidationError();
        var valid = iti.isValidNumber();

        if (valid) {
            errorMsg.textContent = ""; // Clear error message
            input.style.borderColor = ""; // Reset border color
        } else {
            var msg = errorMap[errorCode] || "Invalid number";
            errorMsg.textContent = msg; // Show error message
            input.style.borderColor = "red"; // Highlight input box
        }

        // Update hidden fields even if invalid
        var fullPhoneNumber = iti.getNumber();
        var countryCode = "+" + iti.getSelectedCountryData().dialCode;
        document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
        document.querySelector("#country_code").value = countryCode;
    };

    // Validate on input
    input.addEventListener("input", validateNumber);

    // Validate on country change
    input.addEventListener("countrychange", validateNumber);

  
});

   
   
   //====================== Command Kilvish validation End ===============================





   //=======auto dash include after 3 digits  -> 
   function formatTRN(input) {
      // Remove all non-numeric characters
      let value = input.value.replace(/\D/g, '');
      
      // Add dashes at the correct positions
      if (value.length > 3 && value.length <= 6) {
        input.value = value.slice(0, 3) + '-' + value.slice(3);
      } else if (value.length > 6) {
        input.value = value.slice(0, 3) + '-' + value.slice(3, 6) + '-' + value.slice(6, 9);
      } else {
        input.value = value; // If less than 3 digits, no dashes
      }
    }


</script>










