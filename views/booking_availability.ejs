

<%- include ("header.ejs") %>

<main class="main">
    <!-- Stats Section -->
    <section id="stats" class="section light-background" style="background-image: url('assets/img/kwl-bg.jpg'); background-size: inherit; background-position: inherit;">
        <div class="container section-title" data-aos="fade-up" style="padding-bottom: 0px;">
            <h2>Schedule Your Appointment</h2>
            <p>Effortlessly book your cargo pickup appointments and ensure a smooth collection process.</p>
        </div>
    </section>
    <!-- /Stats Section -->

    
    <!-- calendar Section -->
    <section class="appointment section">
        <div class="container">
            <div class="row">
                <div class="col-md-1"></div>
                <div class="col-md-10 colcontainer">

                    <!-- Tab Headers -->
                    <div class="tabs">
                        <div class="tab active" onclick="showTab(0)">1. CHOOSE APPOINTMENT</div>
                        <div class="tab">2. CONTACT INFORMATION</div>
                        <div class="tab">3. APPOINTMENT PREVIEW</div>
                    </div>

                    <!-- Tab Contents -->
                    <div id="tabContents">
                        <!-- Choose Appointment Tab -->
                        <div class="tab-content active">
                            <div class="row">
                                <div class="col-md-6">
                                    <label>* Appointment Type</label>
                                    <select name="option1" id="option" class="form-control select2 select2-danger select2-hidden-accessible" required>
                                        <option value="">Services</option>
                                        <option value="Personal">Personal</option>
                                        <option value="Scheduled">Scheduled</option>
                                    </select>
                                    <br>
                                    <label>Select Date</label>
                                    <!-- Calendar Section -->
                                    <div class="calendar">
                                        
                                        
                                        <div class="calendar-header">
                                            <span onclick="prevMonth()" class="calendaricon">&#706;</span>
                                            <div id="monthYear">October 2024</div>
                                            <span onclick="nextMonth()" class="calendaricon">&#707;</span>
                                        </div>
                                    
                                        <div class="calendar-days" id="calendarDays">
                                            <!-- Calendar days will be generated by JavaScript -->
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="time-slots" id="timeSlotsSection" style="display:none;">
                                        <label>Select time</label>
                                        <div id="timeSlots">
                                            <!-- Time slots will be dynamically generated by JavaScript -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="button-container">
                                <center><button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button></center>
                            </div>
                        </div>

                        <!-- Contact Information Tab -->
                        <div class="tab-content">
                            <form id="infoForm">
                                <div class="row gy-4">
                                    <div class="col-md-6">
                                        <label>* TRN</label>
                                        <input type="text" id="trn" name="trn" class="form-control" placeholder="Enter the number" required="">
                                    </div>
                                    <div class="col-md-6"></div>
                                    <div class="col-md-6">
                                        <label>* First Name</label>
                                        <input type="text" id="fname" class="form-control" name="fname" placeholder="Enter the name" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>Last Name</label>
                                        <input type="text" id="lname" class="form-control" name="lname"  placeholder="Last Name" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Mobile Number</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <select id="country-code" class="form-control" name="country-code" required>
                                                    <option value="+1">+1 (USA)</option>
                                                    <option value="+44">+44 (UK)</option>
                                                    <option value="+91">+91 (India)</option>
                                                </select>
                                            </div>
                                            <input type="number" id="phone" class="form-control" name="phone" placeholder="Enter contact number" required>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Email Address</label>
                                        <input type="email" id="email" class="form-control" name="email" placeholder="Enter the email" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Agent/Freight Forwarder</label>
                                        <input type="text" id="agent" class="form-control" name="agent" placeholder="Enter the name" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Name of Individual Making Appointment</label>
                                        <input type="text" id="appname" class="form-control" name="appname" placeholder="Enter the name" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Appointment Type (Personal/Commercial)</label>
                                        <input type="text" id="apppersonal" class="form-control" name="apppersonal" placeholder="Enter the appointment type" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Bill of Lading Number</label>
                                        <input type="text" id="blnumber" class="form-control" name="blnumber" placeholder="Enter the number" required="">
                                    </div>
                                    <div class="col-md-12">
                                        <label>* Vessel Name</label>
                                        <input type="text" id="vname" class="form-control" name="vname" placeholder="Enter the vessel name" required="">
                                    </div>
                                    <div class="col-md-12">
                                        <label>* Vessel Reported Date</label>
                                        <input type="text" id="vreport" class="form-control" name="vreport" placeholder="Vessel Reported Date" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Chassis No (in the case of Motor Unit Appointments)</label>
                                        <input type="text" id="chassis" class="form-control" name="chassis" placeholder="Enter the number" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Customs Release/IMS4 Declaration Number</label>
                                        <input type="text" id="ims" class="form-control" name="ims" placeholder="Customs Release/IMS4 Declaration Number" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>Container Number</label>
                                        <input type="number" id="cnumber" class="form-control" name="cnumber" placeholder="Enter the data" required="">
                                    </div>
                                    <div class="col-md-6">
                                        <label>* Number of Pieces/Packages</label>
                                        <input type="text" id="ppnumber" class="form-control" name="ppnumber" placeholder="Enter the packages" required="">
                                    </div>
                                </div>
                            </form>
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-1)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="nextStep()">Continue</button>
                                </center>
                            </div>
                        </div>

                        <!-- Confirmation Tab -->
                        <div class="tab-content">
                            <h3>Appointment Details</h3>
                            <p><strong>Date:</strong> <span id="confirmDate"></span></p>
                            <p><strong>Time:</strong> <span id="confirmTime"></span></p>
                            <h3>Contact Information</h3>
                            <p><strong>First Name:</strong> <span id="confirmFirstName"></span></p>
                            <p><strong>Last Name:</strong> <span id="confirmLastName"></span></p>
                            <p><strong>Email:</strong> <span id="confirmEmail"></span></p>
                            <p><strong>Phone:</strong> <span id="confirmPhone"></span></p>
                            <div class="button-container">
                                <center>
                                    <button class="btn btn-warning" id="prevBtn" onclick="changeTab(-2)">Previous</button>
                                    <button class="btn btn-warning" id="nextBtn" onclick="confirmBooking()">Submit</button>
                                </center>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="col-md-1"></div>
            </div>
        </div>
    </section>
    <!-- calendar Section -->

</main>
    
<%- include ("footer.ejs") %>


<script>
    let currentTab = 0;
    let tabs = document.querySelectorAll('.tab-content');
    let selectedDate = null;
    let selectedTimes = [];
    const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    let currentMonth = 9; // October
    let currentYear = 2024;

    document.addEventListener('DOMContentLoaded', function() {
        showTab(currentTab);
        generateCalendar();
        generateTimeSlots();
    });

    function showTab(n) {
        // Define the tabs here
        const tabs = document.querySelectorAll('.tab-content');
        const tabHeaders = document.querySelectorAll('.tab');

        // Check if the tab index is within the valid range
        if (n < 0 || n >= tabs.length) return;

        currentTab = n;

        // Hide all tabs and remove the active class from headers
        tabs.forEach((tab, index) => {
            tab.classList.toggle('active', index === currentTab);
            tabHeaders[index].classList.toggle('active', index === currentTab);
        });

        // Populate confirmation tab if it's the final tab
        if (n === 2) {
            populateConfirmation();
        }
    }

    // function changeTab(step) {
    //     showTab(currentTab + step);
    // }
    function changeTab(step) {
        const newTabIndex = currentTab + step;

        // Check that the new tab index is within valid range
        if (newTabIndex >= 0 && newTabIndex < document.querySelectorAll('.tab-content').length) {
            showTab(newTabIndex);
        }
    }

    
    function nextStep() {

        if (!validateCurrentTab()) {           
          // Display error message
          errorMessage.innerText = 'All fields are required.';
          nextButtons[currentTab].parentElement.appendChild(errorMessage);
          return;
      }


        if (currentTab === 0) {
            if (!selectedDate || selectedTimes.length === 0) {
                alert("Please select a date and at least one time slot.");
                return;
            }
        } else if (currentTab === 1) {
            if (!validateInfo()) {
                alert("Please fill out all fields.");
                return;
            }
        }

        if (currentTab === 1) {
            populateConfirmation();
        }
        changeTab(1);
    }

    function prevStep() {
        if (currentTab === 2) {
            // If on the Confirmation tab, go back two steps to the Contact Information tab
            changeTab(-2);
        } else {
            // Otherwise, go back one step
            changeTab(-1);
        }
    }

    function populateConfirmation() {
        const selectedDateText = selectedDate || "Not selected";
        const selectedTimesText = selectedTimes.length > 0 ? selectedTimes.join(", ") : "Not selected";
        const appointmentType = document.getElementById("option").value;

        const firstName = document.getElementById("fname").value;
        const lastName = document.getElementById("lname").value;
        const email = document.getElementById("email").value;
        const phone = document.getElementById("phone").value;

        document.getElementById("confirmDate").textContent = `${selectedDateText} (${appointmentType})`;
        document.getElementById("confirmTime").textContent = selectedTimesText;
        document.getElementById("confirmFirstName").textContent = firstName;
        document.getElementById("confirmLastName").textContent = lastName;
        document.getElementById("confirmEmail").textContent = email || "N/A";
        document.getElementById("confirmPhone").textContent = phone || "N/A";
    }

    function validateInfo() {
        const fields = ["fname", "lname", "email", "phone"];
        for (let field of fields) {
            if (!document.getElementById(field).value) {
                return false;
            }
        }
        return true;
    }

    function generateCalendar() {
        const daysContainer = document.getElementById("calendarDays");
        const monthYearLabel = document.getElementById("monthYear");

        monthYearLabel.textContent = `${monthNames[currentMonth]} ${currentYear}`;

        const date = new Date(currentYear, currentMonth, 1);
        const firstDay = date.getDay();
        const lastDate = new Date(currentYear, currentMonth + 1, 0).getDate();

        let daysHTML = "";
        for (let i = 0; i < firstDay; i++) {
            daysHTML += `<div class="calendar-day"></div>`; 
        }

        for (let i = 1; i <= lastDate; i++) {
            daysHTML += `<div class="calendar-day" onclick="selectDate(${i})">${i}</div>`;
        }

        daysContainer.innerHTML = daysHTML;
    }

    function prevMonth() {
        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;  // If currentMonth is January (0), go to December (11)
        if (currentMonth === 11) {
            currentYear--; // If we're in December and move to previous month, decrement the year
        }
        generateCalendar();
    }

    function nextMonth() {
        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1; // If currentMonth is December (11), go to January (0)
        if (currentMonth === 0) {
            currentYear++; // If we're in January and move to the next month, increment the year
        }
        generateCalendar();
    }

    function selectDate(day) {
        // Format the selected date as "Month Day, Year"
        selectedDate = `${monthNames[currentMonth]} ${day}, ${currentYear}`;

        // Get all the calendar day divs and remove the "selected-day" class
        const days = document.querySelectorAll(".calendar-day");
        days.forEach(dayElement => dayElement.classList.remove("selected-day"));

        // Calculate the correct index for the day in the calendar (taking into account the starting day of the month)
        const firstDay = new Date(currentYear, currentMonth, 1).getDay();  // Get the first day of the month
        const selectedDayIndex = firstDay + day - 1; // The correct index for the clicked day

        // Highlight the selected day by adding the "selected-day" class to the corresponding element
        days[selectedDayIndex].classList.add("selected-day");

        // Show time slots once a date is selected
        showTimeSlots();
    }


    function showTimeSlots() {
        const timeSlotsSection = document.getElementById("timeSlotsSection");
        timeSlotsSection.style.display = 'block';  // Show the time slots
        const timeSlots = document.querySelectorAll(".time-slot");
        timeSlots.forEach(slot => {
            slot.classList.remove("selected-time");
        });
    }

    function generateTimeSlots() {
        const timeSlots = ["09:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "01:00 PM", "02:00 PM", "03:00 PM"];
        const timeSlotsContainer = document.getElementById("timeSlots");

        timeSlots.forEach(slot => {
            const timeSlotDiv = document.createElement("div");
            timeSlotDiv.classList.add("time-slot");
            timeSlotDiv.textContent = slot;
            timeSlotDiv.onclick = () => toggleTimeSelection(slot);
            timeSlotsContainer.appendChild(timeSlotDiv);
        });
    }

    function toggleTimeSelection(slot) {
        const index = selectedTimes.indexOf(slot);
        if (index > -1) {
            selectedTimes.splice(index, 1);
            document.querySelectorAll(".time-slot").forEach(element => {
                if (element.textContent === slot) {
                    element.classList.remove("selected-time");
                }
            });
        } else {
            selectedTimes.push(slot);
            document.querySelectorAll(".time-slot").forEach(element => {
                if (element.textContent === slot) {
                    element.classList.add("selected-time");
                }
            });
        }
    }

    function confirmBooking() {
        // Show SweetAlert confirmation box
        Swal.fire({
            title: 'Appointment Confirmed!',
            text: 'Your appointment has been successfully booked.',
            icon: 'success',
            confirmButtonText: 'OK'
        }).then((result) => {
            if (result.isConfirmed) {
                // Optionally, reset form or go to another page
                // Reset or clear form fields, or redirect
                window.location.href = '/booking.html'; // You can redirect to a "thank you" page
            }
        });
    }

    function validateCurrentTab() {  
    const inputs = tabs[currentTab].querySelectorAll('input, select, textarea');
    let isValid = true;

    // Remove previous error messages and borders
    tabs[currentTab].querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
    inputs.forEach(input => {
        input.style.border = ''; // Reset borders
    });

    const processedGroups = [];

    inputs.forEach(input => {


          //-----------start Remove Red border and error on enter something ------------
        // Remove error message and border immediately on valid input change
        input.addEventListener('input', () => {
            if (input.value.trim() || input.checked) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });

        if (input.type === 'text' || input.type === 'textarea' || input.tagName.toLowerCase() === 'select') {
        input.addEventListener('input', () => {
            if (input.value.trim()) {
                input.style.border = ''; // Remove red border
                const error = input.parentNode.querySelector('.error-message');
                if (error) error.remove(); // Remove error message
            }
        });
    }

    if (input.type === 'checkbox' || input.type === 'radio') {
        input.addEventListener('change', () => {
            if (input.checked) {
                input.style.border = ''; // Remove red border
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');
                const error = container.querySelector('.error-message');
                if (error) error.remove(); // Remove error message for the group
            }
        });
    }

    //-----------End Remove Red border and error on enter something ------------
    

        // Only validate fields that have the "required" attribute
        // if (input.required) {
            // For checkboxes and radio buttons, validate the group as a whole
            if ((input.type === 'checkbox' || input.type === 'radio') &&  input.id !== 'select-all' && input.id !== 'notloc' ){
                const name = input.name;
                console.log("checkbox names ",name)

                // Skip if this group has already been validated
                if (processedGroups.includes(name)) return;
                processedGroups.push(name);

                const group = tabs[currentTab].querySelectorAll(`input[name="${name}"]`);
                const checked = [...group].some(el => el.checked);
                const container = input.closest('.col-lg-12') || input.closest('.form-group') || input.closest('div');

                // Show a single error message if none are selected
                if (!checked) {
                    isValid = false;
                    group.forEach(input => {
                        input.style.border = '2px solid red'; // Highlight each checkbox/radio in the group
                    });
                    addErrorMessage(container, "Please select at least one option.");
                }
            } else {
                // Check for required fields that are empty (normal inputs)
                if (input.required && !input.value.trim()) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for required fields
                    addErrorMessage(input.parentNode, "This Field is Required"); // Add error message under normal inputs
                }
            }

            // Check if file input has a file selected (excluding specific cases)
            if (input.type === 'file' && input.required) {
                if (!input.files.length) {
                    isValid = false;
                    input.style.border = '2px solid red'; // Set border to red for invalid file input
                    addErrorMessage(input.parentNode, "Please upload a file.");
                }
            }

            // Special case: Validate hidden input storing job location data
            if (input.name === 'job_preferred_location' && input.required) {
                const selectedLocations = input.value.trim(); // Hidden field value
                const container = input.closest('.form-group');
                if (!selectedLocations) {
                    isValid = false;
                    addErrorMessage(container, "Please select at least one job location.");
                    input.style.border = '2px solid red';
                }
            }
        // }
    });

    return isValid;
}

function addErrorMessage(container, message) {
    // Check if error message already exists to avoid duplicate
    if (!container.querySelector('.error-message')) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.style.color = 'red';
        errorMessage.style.fontSize = '12px';
        errorMessage.innerText = message;
        container.appendChild(errorMessage);
    }
}

</script>



